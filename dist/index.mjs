import{pathToFileURL as V}from"node:url";import*as u from"node:console";import v from"node:fs";import y from"node:path";import $ from"node:fs";import w from"node:path";import h from"node:process";import*as m from"node:console";import{globSync as B}from"glob";import O from"node:fs";function I(e){return JSON.parse(O.readFileSync(e).toString("utf-8"))}function g(e){return I(e)}function x(e){return I(e)}function d(e){return(process.env[`INPUT_${e.toUpperCase()}`]||"").trim()}function j(e){let r=k(e);$.mkdirSync(w.join(h.cwd(),e.analyzerDirectory),{recursive:!0});let t=w.join(h.cwd(),e.analyzerDirectory,"bundle_analysis.json");$.writeFileSync(t,JSON.stringify(r,null,2)),m.log(`Wrote ${t}`,r)}function N(e){return e.metafiles.flatMap(r=>B(w.join(h.cwd(),r),{nodir:!0}).map(t=>({relativePath:w.relative(h.cwd(),t),absolutePath:t})))}function k(e){let r={},t=N(e),n=t.reduce((o,{relativePath:s,absolutePath:i})=>{try{$.accessSync(i,$.constants.R_OK)}catch{m.error(`No meta file found at "${i}" - a path to meta file may be wrong, or esbuild is not executed.`),h.exit(1)}let l=g(i);return Object.entries(l.outputs).reduce((a,c)=>{let[f,p]=c;return e.includeExtensions.some(b=>f.toLowerCase().endsWith(b))&&(a[`${s} -> ${f}`]={bytes:p.bytes,metafile:s,outfile:f}),a},o),o},r);return m.log("Found metafiles",t),m.log("Found result",n),n}function A(e){let r=!1,t=`## \u{1F4E6} esbuild Bundle Analysis for ${e.name}

This analysis was generated by [esbuild-bundle-analyzer](https://github.com/exoego/esbuild-bundle-analyzer). \u{1F916}
`,n=y.join(process.cwd(),e.analyzerDirectory,"bundle_analysis.json"),o=x(n);u.log(`Current analysis found in ${n}`,o);let s=J(e),i=L(e),a=[...new Set([...Object.keys(o),...Object.keys(s)])].sort().map(c=>{let f=o[c],p=s[c];if(u.log("Comparing",c,f,p),!f)return u.log("Deleted file",c),r=!0,{...p,baseBytes:-1,remark:"deleted",tree:void 0};let b=i.get(P(f.metafile,f.outfile));if(!p)return u.log("New file",c),r=!0,{...f,baseBytes:-1,remark:"added",tree:b};let S=f.bytes-p.bytes;return S!==0?(u.log("Changed file",c,S),r=!0):u.log("No change",c),{...f,baseBytes:p.bytes,tree:b,remark:Math.sign(S)?"increased":"decreased"}});u.log("Comparison done.",a),r?(t+=U(a,e.percentExtraAttention),t+=W(a,e.topNLargestPaths),t+=E(e)):t+="This PR introduced no changes to the esbuild bundle! \u{1F64C}",t+=`<!-- __ESBUILD_BUNDLE_${e.name} -->`,C(e,t)}function P(e,r){return`${e} -> ${r}`}function C(e,r){u.log("Writing comment to file.",r),v.mkdirSync(y.join(process.cwd(),e.analyzerDirectory),{recursive:!0}),v.writeFileSync(y.join(process.cwd(),e.analyzerDirectory,"bundle_analysis_comment.txt"),r.trim())}function E(e){return e.showDetails?`
<details>
<summary>Details</summary>
<p>Next to the size is how much the size has increased or decreased compared with the base branch of this PR.</p>
<ul>
<li>\u203C\uFE0F: Size increased by ${e.percentExtraAttention}% or more. Special attention should be given to this.</li>
<li>\u26A0\uFE0F: Size increased in acceptable range (lower than ${e.percentExtraAttention}%).</li>
<li>\u2705: No change or even downsized.</li>
<li>\u{1F5D1}\uFE0F: The out file is deleted: not found in base branch.</li>
<li>\u{1F195}: The out file is newly found: will be added to base branch.</li>
</ul>
</details>
`:""}function J(e){try{let r=y.join(process.cwd(),e.analyzerDirectory,"base/bundle/bundle_analysis.json"),t=x(r);return u.info(`Base analysis found in ${r}`,t),t}catch{return u.warn("No base analysis found. First setup or all artifacts are expired."),{}}}function L(e){function r(o){let s={name:"",path:"",value:0,children:[]};for(let[i,{bytesInOutput:l}]of Object.entries(o)){let a=i.split("/");t(s,a,l)}return s}function t(o,s,i){let l=s.shift();if(l===void 0){o.value+=i;return}let a=o.children.find(c=>c.name===l);a||(a={name:l,path:`${o.path}/${l}`.replace(/^\//,""),value:0,children:[]},o.children.push(a)),o.value+=i,t(a,s,i)}let n=new Map;if(e.topNLargestPaths<=0)return n;for(let{relativePath:o,absolutePath:s}of N(e)){let i=g(s);for(let[l,a]of Object.entries(i.outputs)){let c=r(a.inputs);n.set(P(o,l),c),v.writeFileSync(y.join(process.cwd(),e.analyzerDirectory,"tree.json"),JSON.stringify(c,null,2))}}return n}var M="\xA0";function F(e){let r=e<0?"-":"",t=Math.abs(e);if(t<1e3)return`${r}${t}${M}B`;if(t<1e3*1e3)return`${r}${(t/1e3).toFixed(2)}${M}KB`;if(t<1e3*1e3*1e3)return`${r}${(t/1e3/1e3).toFixed(2)}${M}MB`;if(t<1e3*1e3*1e3*1e3)return`${r}${(t/1e3/1e3/1e3).toFixed(2)}${M}GB`;throw new Error("Too large file size!! Are you sure?")}function U(e,r){return`
Meta File | Out File  | Size (raw) | Note 
----------|----------|-----------:|------
${e.map(n=>`${n.metafile} | ${n.outfile} | ${q(n)} | ${H(n,r)}
`).join("")}`}function K(e,r){let t=[],n=[{node:e,depth:0}];for(;n.length>0;){let s=n.shift();if(!s)break;let{node:i,depth:l}=s;if(l===3){t.push(i);continue}if(i.children.length===0)t.push(i);else for(let a of i.children)n.push({node:a,depth:l+1})}return{largeNodes:t.sort((s,i)=>i.value-s.value).slice(0,r),hasOther:t.length>r}}function R(e,r){return Number.parseFloat((e/r*100).toFixed(1))}function W(e,r){if(e.length===0||r<=0)return"";let t="";t+=`<details>
`,t+=`<summary>Largest paths</summary>
`,t+=`These visualization shows top ${r} largest paths in the bundle.
`;for(let n of e){if(t+=`
`,t+=`## Meta file: ${n.metafile}, Out file: ${n.outfile}
`,!n.tree){t+=`\uFE0F\uFE0F\u{1F5D1}\uFE0FDeleted
`;continue}t+=`| Path | Size |
`,t+=`|------|-------|
`;let o=n.tree.value,{largeNodes:s,hasOther:i}=K(n.tree,r);for(let{path:l,value:a}of s){let c=R(a,o);t+=`| ${l} | ${T(c,a)} |
`}if(i){let l=o-s[0].value,a=R(l,o);t+=`| (other) | ${T(a,l)} |
`}}return t+=`</details>
`,t}function T(e,r){return`\${{\\color{Goldenrod}{ ${G(e/100)} }}}$ ${e.toFixed(1)}%, ${F(r)}`}var _=["","\u258F","\u258E","\u258D","\u258C","\u258B","\u258A","\u2589","\u2588"],z=1/(_.length-1);function G(e,r=25,t=0,n=1){let o=e*r,s=Math.floor(o),i=o-s,l=Math.round(z*Math.floor(i/z)/z);return"\u2588".repeat(s)+_[l]}function q(e){return F(e.bytes)}function H(e,r){if(e.remark==="deleted")return"\u{1F5D1}\uFE0F Deleted";if(e.remark==="added")return"\u{1F195} Added";let t=e.bytes-e.baseBytes;if(t!==0){let n=t/e.baseBytes*100;return`${Q(n,r)}${F(t)} (${D(n)}${n.toFixed(1)}%)`}return"\u2705  No change"}function D(e){return e<0?"":"+"}function Q(e,r){let t;return e>0&&e<r?t="\u26A0\uFE0F":e>=r?t="\u203C\uFE0F":t="\u2705 ",`${t} ${D(e)}`}function X(){let e=d("metafiles");if(!e)throw new Error("metafiles is not specified");let r=d("name");if(!r)throw new Error("name is not specified");return{percentExtraAttention:Number.parseInt(d("percent_extra_attention")||"20",10),showDetails:["true","True","TRUE"].includes(d("show_details")||"true"),topNLargestPaths:Number.parseInt(d("top_n_largest_paths")||"20",10),includeExtensions:(d("include_extensions")||".js,.mjs,.cjs").split(","),name:r,analyzerDirectory:d("analyze_directory")||".analyzer",metafiles:e.split(",")}}function Y(e=X()){j(e),A(e)}import.meta.url===V(process.argv[1]).href&&Y();export{Y as run};
//# sourceMappingURL=data:application/json;base64,
