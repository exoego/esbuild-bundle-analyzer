var Is=Object.create;var Re=Object.defineProperty;var js=Object.getOwnPropertyDescriptor;var $s=Object.getOwnPropertyNames;var Ps=Object.getPrototypeOf,Bs=Object.prototype.hasOwnProperty;var ke=(n,t)=>()=>(t||n((t={exports:{}}).exports,t),t.exports);var Ws=(n,t,e,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of $s(t))!Bs.call(n,i)&&i!==e&&Re(n,i,{get:()=>t[i],enumerable:!(s=js(t,i))||s.enumerable});return n};var Us=(n,t,e)=>(e=n!=null?Is(Ps(n)):{},Ws(t||!n||!n.__esModule?Re(e,"default",{value:n,enumerable:!0}):e,n));var De=ke((zn,_e)=>{"use strict";_e.exports=Me;function Me(n,t,e){n instanceof RegExp&&(n=Fe(n,e)),t instanceof RegExp&&(t=Fe(t,e));var s=Oe(n,t,e);return s&&{start:s[0],end:s[1],pre:e.slice(0,s[0]),body:e.slice(s[0]+n.length,s[1]),post:e.slice(s[1]+t.length)}}function Fe(n,t){var e=t.match(n);return e?e[0]:null}Me.range=Oe;function Oe(n,t,e){var s,i,r,o,h,a=e.indexOf(n),l=e.indexOf(t,a+1),c=a;if(a>=0&&l>0){if(n===t)return[a,l];for(s=[],r=e.length;c>=0&&!h;)c==a?(s.push(c),a=e.indexOf(n,c+1)):s.length==1?h=[s.pop(),l]:(i=s.pop(),i<r&&(r=i,o=l),l=e.indexOf(t,c+1)),c=a<l&&a>=0?a:l;s.length&&(h=[r,o])}return h}});var Be=ke((Ln,Pe)=>{var Ne=De();Pe.exports=qs;var ze="\0SLASH"+Math.random()+"\0",Le="\0OPEN"+Math.random()+"\0",ee="\0CLOSE"+Math.random()+"\0",Ie="\0COMMA"+Math.random()+"\0",je="\0PERIOD"+Math.random()+"\0";function te(n){return parseInt(n,10)==n?parseInt(n,10):n.charCodeAt(0)}function Gs(n){return n.split("\\\\").join(ze).split("\\{").join(Le).split("\\}").join(ee).split("\\,").join(Ie).split("\\.").join(je)}function Hs(n){return n.split(ze).join("\\").split(Le).join("{").split(ee).join("}").split(Ie).join(",").split(je).join(".")}function $e(n){if(!n)return[""];var t=[],e=Ne("{","}",n);if(!e)return n.split(",");var s=e.pre,i=e.body,r=e.post,o=s.split(",");o[o.length-1]+="{"+i+"}";var h=$e(r);return r.length&&(o[o.length-1]+=h.shift(),o.push.apply(o,h)),t.push.apply(t,o),t}function qs(n){return n?(n.substr(0,2)==="{}"&&(n="\\{\\}"+n.substr(2)),ut(Gs(n),!0).map(Hs)):[]}function Js(n){return"{"+n+"}"}function Ks(n){return/^-?0\d/.test(n)}function Vs(n,t){return n<=t}function Ys(n,t){return n>=t}function ut(n,t){var e=[],s=Ne("{","}",n);if(!s)return[n];var i=s.pre,r=s.post.length?ut(s.post,!1):[""];if(/\$$/.test(s.pre))for(var o=0;o<r.length;o++){var h=i+"{"+s.body+"}"+r[o];e.push(h)}else{var a=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(s.body),l=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(s.body),c=a||l,f=s.body.indexOf(",")>=0;if(!c&&!f)return s.post.match(/,.*\}/)?(n=s.pre+"{"+s.body+ee+s.post,ut(n)):[n];var u;if(c)u=s.body.split(/\.\./);else if(u=$e(s.body),u.length===1&&(u=ut(u[0],!1).map(Js),u.length===1))return r.map(function(Mt){return s.pre+u[0]+Mt});var d;if(c){var g=te(u[0]),p=te(u[1]),w=Math.max(u[0].length,u[1].length),m=u.length==3?Math.abs(te(u[2])):1,S=Vs,b=p<g;b&&(m*=-1,S=Ys);var y=u.some(Ks);d=[];for(var E=g;S(E,p);E+=m){var x;if(l)x=String.fromCharCode(E),x==="\\"&&(x="");else if(x=String(E),y){var j=w-x.length;if(j>0){var Z=new Array(j+1).join("0");E<0?x="-"+Z+x.slice(1):x=Z+x}}d.push(x)}}else{d=[];for(var $=0;$<u.length;$++)d.push.apply(d,ut(u[$],!1))}for(var $=0;$<d.length;$++)for(var o=0;o<r.length;o++){var h=i+d[$]+r[o];(!t||c||h)&&e.push(h)}}return e}});import Ls from"node:console";import{pathToFileURL as On}from"node:url";import*as N from"node:console";import Ce from"node:fs";import Ft from"node:path";import Xt from"node:fs";import Zt from"node:path";import kt from"node:process";import*as ft from"node:console";var Ve=Us(Be(),1);var dt=n=>{if(typeof n!="string")throw new TypeError("invalid pattern");if(n.length>65536)throw new TypeError("pattern is too long")};var Xs={"[:alnum:]":["\\p{L}\\p{Nl}\\p{Nd}",!0],"[:alpha:]":["\\p{L}\\p{Nl}",!0],"[:ascii:]":["\\x00-\\x7f",!1],"[:blank:]":["\\p{Zs}\\t",!0],"[:cntrl:]":["\\p{Cc}",!0],"[:digit:]":["\\p{Nd}",!0],"[:graph:]":["\\p{Z}\\p{C}",!0,!0],"[:lower:]":["\\p{Ll}",!0],"[:print:]":["\\p{C}",!0],"[:punct:]":["\\p{P}",!0],"[:space:]":["\\p{Z}\\t\\r\\n\\v\\f",!0],"[:upper:]":["\\p{Lu}",!0],"[:word:]":["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}",!0],"[:xdigit:]":["A-Fa-f0-9",!1]},pt=n=>n.replace(/[[\]\\-]/g,"\\$&"),Zs=n=>n.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),We=n=>n.join(""),Ue=(n,t)=>{let e=t;if(n.charAt(e)!=="[")throw new Error("not in a brace expression");let s=[],i=[],r=e+1,o=!1,h=!1,a=!1,l=!1,c=e,f="";t:for(;r<n.length;){let p=n.charAt(r);if((p==="!"||p==="^")&&r===e+1){l=!0,r++;continue}if(p==="]"&&o&&!a){c=r+1;break}if(o=!0,p==="\\"&&!a){a=!0,r++;continue}if(p==="["&&!a){for(let[w,[m,S,b]]of Object.entries(Xs))if(n.startsWith(w,r)){if(f)return["$.",!1,n.length-e,!0];r+=w.length,b?i.push(m):s.push(m),h=h||S;continue t}}if(a=!1,f){p>f?s.push(pt(f)+"-"+pt(p)):p===f&&s.push(pt(p)),f="",r++;continue}if(n.startsWith("-]",r+1)){s.push(pt(p+"-")),r+=2;continue}if(n.startsWith("-",r+1)){f=p,r+=2;continue}s.push(pt(p)),r++}if(c<r)return["",!1,0,!1];if(!s.length&&!i.length)return["$.",!1,n.length-e,!0];if(i.length===0&&s.length===1&&/^\\?.$/.test(s[0])&&!l){let p=s[0].length===2?s[0].slice(-1):s[0];return[Zs(p),!1,c-e,!1]}let u="["+(l?"^":"")+We(s)+"]",d="["+(l?"":"^")+We(i)+"]";return[s.length&&i.length?"("+u+"|"+d+")":s.length?u:d,h,c-e,!0]};var P=(n,{windowsPathsNoEscape:t=!1}={})=>t?n.replace(/\[([^\/\\])\]/g,"$1"):n.replace(/((?!\\).|^)\[([^\/\\])\]/g,"$1$2").replace(/\\([^\/])/g,"$1");var Qs=new Set(["!","?","+","*","@"]),Ge=n=>Qs.has(n),ti="(?!(?:^|/)\\.\\.?(?:$|/))",Ot="(?!\\.)",ei=new Set(["[","."]),si=new Set(["..","."]),ii=new Set("().*{}+?[]^$\\!"),ni=n=>n.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),se="[^/]",He=se+"*?",qe=se+"+?",et=class n{type;#t;#e;#r=!1;#i=[];#o;#S;#l;#f=!1;#h;#a;#n=!1;constructor(t,e,s={}){this.type=t,t&&(this.#e=!0),this.#o=e,this.#t=this.#o?this.#o.#t:this,this.#h=this.#t===this?s:this.#t.#h,this.#l=this.#t===this?[]:this.#t.#l,t==="!"&&!this.#t.#f&&this.#l.push(this),this.#S=this.#o?this.#o.#i.length:0}get hasMagic(){if(this.#e!==void 0)return this.#e;for(let t of this.#i)if(typeof t!="string"&&(t.type||t.hasMagic))return this.#e=!0;return this.#e}toString(){return this.#a!==void 0?this.#a:this.type?this.#a=this.type+"("+this.#i.map(t=>String(t)).join("|")+")":this.#a=this.#i.map(t=>String(t)).join("")}#g(){if(this!==this.#t)throw new Error("should only call on root");if(this.#f)return this;this.toString(),this.#f=!0;let t;for(;t=this.#l.pop();){if(t.type!=="!")continue;let e=t,s=e.#o;for(;s;){for(let i=e.#S+1;!s.type&&i<s.#i.length;i++)for(let r of t.#i){if(typeof r=="string")throw new Error("string part in extglob AST??");r.copyIn(s.#i[i])}e=s,s=e.#o}}return this}push(...t){for(let e of t)if(e!==""){if(typeof e!="string"&&!(e instanceof n&&e.#o===this))throw new Error("invalid part: "+e);this.#i.push(e)}}toJSON(){let t=this.type===null?this.#i.slice().map(e=>typeof e=="string"?e:e.toJSON()):[this.type,...this.#i.map(e=>e.toJSON())];return this.isStart()&&!this.type&&t.unshift([]),this.isEnd()&&(this===this.#t||this.#t.#f&&this.#o?.type==="!")&&t.push({}),t}isStart(){if(this.#t===this)return!0;if(!this.#o?.isStart())return!1;if(this.#S===0)return!0;let t=this.#o;for(let e=0;e<this.#S;e++){let s=t.#i[e];if(!(s instanceof n&&s.type==="!"))return!1}return!0}isEnd(){if(this.#t===this||this.#o?.type==="!")return!0;if(!this.#o?.isEnd())return!1;if(!this.type)return this.#o?.isEnd();let t=this.#o?this.#o.#i.length:0;return this.#S===t-1}copyIn(t){typeof t=="string"?this.push(t):this.push(t.clone(this))}clone(t){let e=new n(this.type,t);for(let s of this.#i)e.copyIn(s);return e}static#w(t,e,s,i){let r=!1,o=!1,h=-1,a=!1;if(e.type===null){let d=s,g="";for(;d<t.length;){let p=t.charAt(d++);if(r||p==="\\"){r=!r,g+=p;continue}if(o){d===h+1?(p==="^"||p==="!")&&(a=!0):p==="]"&&!(d===h+2&&a)&&(o=!1),g+=p;continue}else if(p==="["){o=!0,h=d,a=!1,g+=p;continue}if(!i.noext&&Ge(p)&&t.charAt(d)==="("){e.push(g),g="";let w=new n(p,e);d=n.#w(t,w,d,i),e.push(w);continue}g+=p}return e.push(g),d}let l=s+1,c=new n(null,e),f=[],u="";for(;l<t.length;){let d=t.charAt(l++);if(r||d==="\\"){r=!r,u+=d;continue}if(o){l===h+1?(d==="^"||d==="!")&&(a=!0):d==="]"&&!(l===h+2&&a)&&(o=!1),u+=d;continue}else if(d==="["){o=!0,h=l,a=!1,u+=d;continue}if(Ge(d)&&t.charAt(l)==="("){c.push(u),u="";let g=new n(d,c);c.push(g),l=n.#w(t,g,l,i);continue}if(d==="|"){c.push(u),u="",f.push(c),c=new n(null,e);continue}if(d===")")return u===""&&e.#i.length===0&&(e.#n=!0),c.push(u),u="",e.push(...f,c),l;u+=d}return e.type=null,e.#e=void 0,e.#i=[t.substring(s-1)],l}static fromGlob(t,e={}){let s=new n(null,void 0,e);return n.#w(t,s,0,e),s}toMMPattern(){if(this!==this.#t)return this.#t.toMMPattern();let t=this.toString(),[e,s,i,r]=this.toRegExpSource();if(!(i||this.#e||this.#h.nocase&&!this.#h.nocaseMagicOnly&&t.toUpperCase()!==t.toLowerCase()))return s;let h=(this.#h.nocase?"i":"")+(r?"u":"");return Object.assign(new RegExp(`^${e}$`,h),{_src:e,_glob:t})}get options(){return this.#h}toRegExpSource(t){let e=t??!!this.#h.dot;if(this.#t===this&&this.#g(),!this.type){let a=this.isStart()&&this.isEnd(),l=this.#i.map(d=>{let[g,p,w,m]=typeof d=="string"?n.#u(d,this.#e,a):d.toRegExpSource(t);return this.#e=this.#e||w,this.#r=this.#r||m,g}).join(""),c="";if(this.isStart()&&typeof this.#i[0]=="string"&&!(this.#i.length===1&&si.has(this.#i[0]))){let g=ei,p=e&&g.has(l.charAt(0))||l.startsWith("\\.")&&g.has(l.charAt(2))||l.startsWith("\\.\\.")&&g.has(l.charAt(4)),w=!e&&!t&&g.has(l.charAt(0));c=p?ti:w?Ot:""}let f="";return this.isEnd()&&this.#t.#f&&this.#o?.type==="!"&&(f="(?:$|\\/)"),[c+l+f,P(l),this.#e=!!this.#e,this.#r]}let s=this.type==="*"||this.type==="+",i=this.type==="!"?"(?:(?!(?:":"(?:",r=this.#d(e);if(this.isStart()&&this.isEnd()&&!r&&this.type!=="!"){let a=this.toString();return this.#i=[a],this.type=null,this.#e=void 0,[a,P(this.toString()),!1,!1]}let o=!s||t||e||!Ot?"":this.#d(!0);o===r&&(o=""),o&&(r=`(?:${r})(?:${o})*?`);let h="";if(this.type==="!"&&this.#n)h=(this.isStart()&&!e?Ot:"")+qe;else{let a=this.type==="!"?"))"+(this.isStart()&&!e&&!t?Ot:"")+He+")":this.type==="@"?")":this.type==="?"?")?":this.type==="+"&&o?")":this.type==="*"&&o?")?":`)${this.type}`;h=i+r+a}return[h,P(r),this.#e=!!this.#e,this.#r]}#d(t){return this.#i.map(e=>{if(typeof e=="string")throw new Error("string type in extglob ast??");let[s,i,r,o]=e.toRegExpSource(t);return this.#r=this.#r||o,s}).filter(e=>!(this.isStart()&&this.isEnd())||!!e).join("|")}static#u(t,e,s=!1){let i=!1,r="",o=!1;for(let h=0;h<t.length;h++){let a=t.charAt(h);if(i){i=!1,r+=(ii.has(a)?"\\":"")+a;continue}if(a==="\\"){h===t.length-1?r+="\\\\":i=!0;continue}if(a==="["){let[l,c,f,u]=Ue(t,h);if(f){r+=l,o=o||c,h+=f-1,e=e||u;continue}}if(a==="*"){s&&t==="*"?r+=qe:r+=He,e=!0;continue}if(a==="?"){r+=se,e=!0;continue}r+=ni(a)}return[r,P(t),!!e,o]}};var st=(n,{windowsPathsNoEscape:t=!1}={})=>t?n.replace(/[?*()[\]]/g,"[$&]"):n.replace(/[?*()[\]\\]/g,"\\$&");var M=(n,t,e={})=>(dt(t),!e.nocomment&&t.charAt(0)==="#"?!1:new _(t,e).match(n)),ri=/^\*+([^+@!?\*\[\(]*)$/,oi=n=>t=>!t.startsWith(".")&&t.endsWith(n),hi=n=>t=>t.endsWith(n),ai=n=>(n=n.toLowerCase(),t=>!t.startsWith(".")&&t.toLowerCase().endsWith(n)),li=n=>(n=n.toLowerCase(),t=>t.toLowerCase().endsWith(n)),ci=/^\*+\.\*+$/,fi=n=>!n.startsWith(".")&&n.includes("."),ui=n=>n!=="."&&n!==".."&&n.includes("."),di=/^\.\*+$/,pi=n=>n!=="."&&n!==".."&&n.startsWith("."),mi=/^\*+$/,gi=n=>n.length!==0&&!n.startsWith("."),wi=n=>n.length!==0&&n!=="."&&n!=="..",yi=/^\?+([^+@!?\*\[\(]*)?$/,bi=([n,t=""])=>{let e=Ye([n]);return t?(t=t.toLowerCase(),s=>e(s)&&s.toLowerCase().endsWith(t)):e},Si=([n,t=""])=>{let e=Xe([n]);return t?(t=t.toLowerCase(),s=>e(s)&&s.toLowerCase().endsWith(t)):e},Ei=([n,t=""])=>{let e=Xe([n]);return t?s=>e(s)&&s.endsWith(t):e},vi=([n,t=""])=>{let e=Ye([n]);return t?s=>e(s)&&s.endsWith(t):e},Ye=([n])=>{let t=n.length;return e=>e.length===t&&!e.startsWith(".")},Xe=([n])=>{let t=n.length;return e=>e.length===t&&e!=="."&&e!==".."},Ze=typeof process=="object"&&process?typeof process.env=="object"&&process.env&&process.env.__MINIMATCH_TESTING_PLATFORM__||process.platform:"posix",Je={win32:{sep:"\\"},posix:{sep:"/"}},xi=Ze==="win32"?Je.win32.sep:Je.posix.sep;M.sep=xi;var R=Symbol("globstar **");M.GLOBSTAR=R;var Ti="[^/]",Ci=Ti+"*?",Ai="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",Ri="(?:(?!(?:\\/|^)\\.).)*?",ki=(n,t={})=>e=>M(e,n,t);M.filter=ki;var z=(n,t={})=>Object.assign({},n,t),Fi=n=>{if(!n||typeof n!="object"||!Object.keys(n).length)return M;let t=M;return Object.assign((s,i,r={})=>t(s,i,z(n,r)),{Minimatch:class extends t.Minimatch{constructor(i,r={}){super(i,z(n,r))}static defaults(i){return t.defaults(z(n,i)).Minimatch}},AST:class extends t.AST{constructor(i,r,o={}){super(i,r,z(n,o))}static fromGlob(i,r={}){return t.AST.fromGlob(i,z(n,r))}},unescape:(s,i={})=>t.unescape(s,z(n,i)),escape:(s,i={})=>t.escape(s,z(n,i)),filter:(s,i={})=>t.filter(s,z(n,i)),defaults:s=>t.defaults(z(n,s)),makeRe:(s,i={})=>t.makeRe(s,z(n,i)),braceExpand:(s,i={})=>t.braceExpand(s,z(n,i)),match:(s,i,r={})=>t.match(s,i,z(n,r)),sep:t.sep,GLOBSTAR:R})};M.defaults=Fi;var Qe=(n,t={})=>(dt(n),t.nobrace||!/\{(?:(?!\{).)*\}/.test(n)?[n]:(0,Ve.default)(n));M.braceExpand=Qe;var Mi=(n,t={})=>new _(n,t).makeRe();M.makeRe=Mi;var Oi=(n,t,e={})=>{let s=new _(t,e);return n=n.filter(i=>s.match(i)),s.options.nonull&&!n.length&&n.push(t),n};M.match=Oi;var Ke=/[?*]|[+@!]\(.*?\)|\[|\]/,_i=n=>n.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),_=class{options;set;pattern;windowsPathsNoEscape;nonegate;negate;comment;empty;preserveMultipleSlashes;partial;globSet;globParts;nocase;isWindows;platform;windowsNoMagicRoot;regexp;constructor(t,e={}){dt(t),e=e||{},this.options=e,this.pattern=t,this.platform=e.platform||Ze,this.isWindows=this.platform==="win32",this.windowsPathsNoEscape=!!e.windowsPathsNoEscape||e.allowWindowsEscape===!1,this.windowsPathsNoEscape&&(this.pattern=this.pattern.replace(/\\/g,"/")),this.preserveMultipleSlashes=!!e.preserveMultipleSlashes,this.regexp=null,this.negate=!1,this.nonegate=!!e.nonegate,this.comment=!1,this.empty=!1,this.partial=!!e.partial,this.nocase=!!this.options.nocase,this.windowsNoMagicRoot=e.windowsNoMagicRoot!==void 0?e.windowsNoMagicRoot:!!(this.isWindows&&this.nocase),this.globSet=[],this.globParts=[],this.set=[],this.make()}hasMagic(){if(this.options.magicalBraces&&this.set.length>1)return!0;for(let t of this.set)for(let e of t)if(typeof e!="string")return!0;return!1}debug(...t){}make(){let t=this.pattern,e=this.options;if(!e.nocomment&&t.charAt(0)==="#"){this.comment=!0;return}if(!t){this.empty=!0;return}this.parseNegate(),this.globSet=[...new Set(this.braceExpand())],e.debug&&(this.debug=(...r)=>console.error(...r)),this.debug(this.pattern,this.globSet);let s=this.globSet.map(r=>this.slashSplit(r));this.globParts=this.preprocess(s),this.debug(this.pattern,this.globParts);let i=this.globParts.map((r,o,h)=>{if(this.isWindows&&this.windowsNoMagicRoot){let a=r[0]===""&&r[1]===""&&(r[2]==="?"||!Ke.test(r[2]))&&!Ke.test(r[3]),l=/^[a-z]:/i.test(r[0]);if(a)return[...r.slice(0,4),...r.slice(4).map(c=>this.parse(c))];if(l)return[r[0],...r.slice(1).map(c=>this.parse(c))]}return r.map(a=>this.parse(a))});if(this.debug(this.pattern,i),this.set=i.filter(r=>r.indexOf(!1)===-1),this.isWindows)for(let r=0;r<this.set.length;r++){let o=this.set[r];o[0]===""&&o[1]===""&&this.globParts[r][2]==="?"&&typeof o[3]=="string"&&/^[a-z]:$/i.test(o[3])&&(o[2]="?")}this.debug(this.pattern,this.set)}preprocess(t){if(this.options.noglobstar)for(let s=0;s<t.length;s++)for(let i=0;i<t[s].length;i++)t[s][i]==="**"&&(t[s][i]="*");let{optimizationLevel:e=1}=this.options;return e>=2?(t=this.firstPhasePreProcess(t),t=this.secondPhasePreProcess(t)):e>=1?t=this.levelOneOptimize(t):t=this.adjascentGlobstarOptimize(t),t}adjascentGlobstarOptimize(t){return t.map(e=>{let s=-1;for(;(s=e.indexOf("**",s+1))!==-1;){let i=s;for(;e[i+1]==="**";)i++;i!==s&&e.splice(s,i-s)}return e})}levelOneOptimize(t){return t.map(e=>(e=e.reduce((s,i)=>{let r=s[s.length-1];return i==="**"&&r==="**"?s:i===".."&&r&&r!==".."&&r!=="."&&r!=="**"?(s.pop(),s):(s.push(i),s)},[]),e.length===0?[""]:e))}levelTwoFileOptimize(t){Array.isArray(t)||(t=this.slashSplit(t));let e=!1;do{if(e=!1,!this.preserveMultipleSlashes){for(let i=1;i<t.length-1;i++){let r=t[i];i===1&&r===""&&t[0]===""||(r==="."||r==="")&&(e=!0,t.splice(i,1),i--)}t[0]==="."&&t.length===2&&(t[1]==="."||t[1]==="")&&(e=!0,t.pop())}let s=0;for(;(s=t.indexOf("..",s+1))!==-1;){let i=t[s-1];i&&i!=="."&&i!==".."&&i!=="**"&&(e=!0,t.splice(s-1,2),s-=2)}}while(e);return t.length===0?[""]:t}firstPhasePreProcess(t){let e=!1;do{e=!1;for(let s of t){let i=-1;for(;(i=s.indexOf("**",i+1))!==-1;){let o=i;for(;s[o+1]==="**";)o++;o>i&&s.splice(i+1,o-i);let h=s[i+1],a=s[i+2],l=s[i+3];if(h!==".."||!a||a==="."||a===".."||!l||l==="."||l==="..")continue;e=!0,s.splice(i,1);let c=s.slice(0);c[i]="**",t.push(c),i--}if(!this.preserveMultipleSlashes){for(let o=1;o<s.length-1;o++){let h=s[o];o===1&&h===""&&s[0]===""||(h==="."||h==="")&&(e=!0,s.splice(o,1),o--)}s[0]==="."&&s.length===2&&(s[1]==="."||s[1]==="")&&(e=!0,s.pop())}let r=0;for(;(r=s.indexOf("..",r+1))!==-1;){let o=s[r-1];if(o&&o!=="."&&o!==".."&&o!=="**"){e=!0;let a=r===1&&s[r+1]==="**"?["."]:[];s.splice(r-1,2,...a),s.length===0&&s.push(""),r-=2}}}}while(e);return t}secondPhasePreProcess(t){for(let e=0;e<t.length-1;e++)for(let s=e+1;s<t.length;s++){let i=this.partsMatch(t[e],t[s],!this.preserveMultipleSlashes);if(i){t[e]=[],t[s]=i;break}}return t.filter(e=>e.length)}partsMatch(t,e,s=!1){let i=0,r=0,o=[],h="";for(;i<t.length&&r<e.length;)if(t[i]===e[r])o.push(h==="b"?e[r]:t[i]),i++,r++;else if(s&&t[i]==="**"&&e[r]===t[i+1])o.push(t[i]),i++;else if(s&&e[r]==="**"&&t[i]===e[r+1])o.push(e[r]),r++;else if(t[i]==="*"&&e[r]&&(this.options.dot||!e[r].startsWith("."))&&e[r]!=="**"){if(h==="b")return!1;h="a",o.push(t[i]),i++,r++}else if(e[r]==="*"&&t[i]&&(this.options.dot||!t[i].startsWith("."))&&t[i]!=="**"){if(h==="a")return!1;h="b",o.push(e[r]),i++,r++}else return!1;return t.length===e.length&&o}parseNegate(){if(this.nonegate)return;let t=this.pattern,e=!1,s=0;for(let i=0;i<t.length&&t.charAt(i)==="!";i++)e=!e,s++;s&&(this.pattern=t.slice(s)),this.negate=e}matchOne(t,e,s=!1){let i=this.options;if(this.isWindows){let p=typeof t[0]=="string"&&/^[a-z]:$/i.test(t[0]),w=!p&&t[0]===""&&t[1]===""&&t[2]==="?"&&/^[a-z]:$/i.test(t[3]),m=typeof e[0]=="string"&&/^[a-z]:$/i.test(e[0]),S=!m&&e[0]===""&&e[1]===""&&e[2]==="?"&&typeof e[3]=="string"&&/^[a-z]:$/i.test(e[3]),b=w?3:p?0:void 0,y=S?3:m?0:void 0;if(typeof b=="number"&&typeof y=="number"){let[E,x]=[t[b],e[y]];E.toLowerCase()===x.toLowerCase()&&(e[y]=E,y>b?e=e.slice(y):b>y&&(t=t.slice(b)))}}let{optimizationLevel:r=1}=this.options;r>=2&&(t=this.levelTwoFileOptimize(t)),this.debug("matchOne",this,{file:t,pattern:e}),this.debug("matchOne",t.length,e.length);for(var o=0,h=0,a=t.length,l=e.length;o<a&&h<l;o++,h++){this.debug("matchOne loop");var c=e[h],f=t[o];if(this.debug(e,c,f),c===!1)return!1;if(c===R){this.debug("GLOBSTAR",[e,c,f]);var u=o,d=h+1;if(d===l){for(this.debug("** at the end");o<a;o++)if(t[o]==="."||t[o]===".."||!i.dot&&t[o].charAt(0)===".")return!1;return!0}for(;u<a;){var g=t[u];if(this.debug(`
globstar while`,t,u,e,d,g),this.matchOne(t.slice(u),e.slice(d),s))return this.debug("globstar found match!",u,a,g),!0;if(g==="."||g===".."||!i.dot&&g.charAt(0)==="."){this.debug("dot detected!",t,u,e,d);break}this.debug("globstar swallow a segment, and continue"),u++}return!!(s&&(this.debug(`
>>> no match, partial?`,t,u,e,d),u===a))}let p;if(typeof c=="string"?(p=f===c,this.debug("string match",c,f,p)):(p=c.test(f),this.debug("pattern match",c,f,p)),!p)return!1}if(o===a&&h===l)return!0;if(o===a)return s;if(h===l)return o===a-1&&t[o]==="";throw new Error("wtf?")}braceExpand(){return Qe(this.pattern,this.options)}parse(t){dt(t);let e=this.options;if(t==="**")return R;if(t==="")return"";let s,i=null;(s=t.match(mi))?i=e.dot?wi:gi:(s=t.match(ri))?i=(e.nocase?e.dot?li:ai:e.dot?hi:oi)(s[1]):(s=t.match(yi))?i=(e.nocase?e.dot?Si:bi:e.dot?Ei:vi)(s):(s=t.match(ci))?i=e.dot?ui:fi:(s=t.match(di))&&(i=pi);let r=et.fromGlob(t,this.options).toMMPattern();return i&&typeof r=="object"&&Reflect.defineProperty(r,"test",{value:i}),r}makeRe(){if(this.regexp||this.regexp===!1)return this.regexp;let t=this.set;if(!t.length)return this.regexp=!1,this.regexp;let e=this.options,s=e.noglobstar?Ci:e.dot?Ai:Ri,i=new Set(e.nocase?["i"]:[]),r=t.map(a=>{let l=a.map(c=>{if(c instanceof RegExp)for(let f of c.flags.split(""))i.add(f);return typeof c=="string"?_i(c):c===R?R:c._src});return l.forEach((c,f)=>{let u=l[f+1],d=l[f-1];c!==R||d===R||(d===void 0?u!==void 0&&u!==R?l[f+1]="(?:\\/|"+s+"\\/)?"+u:l[f]=s:u===void 0?l[f-1]=d+"(?:\\/|"+s+")?":u!==R&&(l[f-1]=d+"(?:\\/|\\/"+s+"\\/)"+u,l[f+1]=R))}),l.filter(c=>c!==R).join("/")}).join("|"),[o,h]=t.length>1?["(?:",")"]:["",""];r="^"+o+r+h+"$",this.negate&&(r="^(?!"+r+").+$");try{this.regexp=new RegExp(r,[...i].join(""))}catch{this.regexp=!1}return this.regexp}slashSplit(t){return this.preserveMultipleSlashes?t.split("/"):this.isWindows&&/^\/\/[^\/]+/.test(t)?["",...t.split(/\/+/)]:t.split(/\/+/)}match(t,e=this.partial){if(this.debug("match",t,this.pattern),this.comment)return!1;if(this.empty)return t==="";if(t==="/"&&e)return!0;let s=this.options;this.isWindows&&(t=t.split("\\").join("/"));let i=this.slashSplit(t);this.debug(this.pattern,"split",i);let r=this.set;this.debug(this.pattern,"set",r);let o=i[i.length-1];if(!o)for(let h=i.length-2;!o&&h>=0;h--)o=i[h];for(let h=0;h<r.length;h++){let a=r[h],l=i;if(s.matchBase&&a.length===1&&(l=[o]),this.matchOne(l,a,e))return s.flipNegate?!0:!this.negate}return s.flipNegate?!1:this.negate}static defaults(t){return M.defaults(t).Minimatch}};M.AST=et;M.Minimatch=_;M.escape=st;M.unescape=P;import{fileURLToPath as fn}from"node:url";var it=typeof performance=="object"&&performance&&typeof performance.now=="function"?performance:Date,es=new Set,ie=typeof process=="object"&&process?process:{},ss=(n,t,e,s)=>{typeof ie.emitWarning=="function"?ie.emitWarning(n,t,e,s):console.error(`[${e}] ${t}: ${n}`)},_t=globalThis.AbortController,ts=globalThis.AbortSignal;if(typeof _t>"u"){ts=class{onabort;_onabort=[];reason;aborted=!1;addEventListener(s,i){this._onabort.push(i)}},_t=class{constructor(){t()}signal=new ts;abort(s){if(!this.signal.aborted){this.signal.reason=s,this.signal.aborted=!0;for(let i of this.signal._onabort)i(s);this.signal.onabort?.(s)}}};let n=ie.env?.LRU_CACHE_IGNORE_AC_WARNING!=="1",t=()=>{n&&(n=!1,ss("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.","NO_ABORT_CONTROLLER","ENOTSUP",t))}}var Di=n=>!es.has(n),sr=Symbol("type"),V=n=>n&&n===Math.floor(n)&&n>0&&isFinite(n),is=n=>V(n)?n<=Math.pow(2,8)?Uint8Array:n<=Math.pow(2,16)?Uint16Array:n<=Math.pow(2,32)?Uint32Array:n<=Number.MAX_SAFE_INTEGER?nt:null:null,nt=class extends Array{constructor(t){super(t),this.fill(0)}},ne=class n{heap;length;static#t=!1;static create(t){let e=is(t);if(!e)return[];n.#t=!0;let s=new n(t,e);return n.#t=!1,s}constructor(t,e){if(!n.#t)throw new TypeError("instantiate Stack using Stack.create(n)");this.heap=new e(t),this.length=0}push(t){this.heap[this.length++]=t}pop(){return this.heap[--this.length]}},mt=class n{#t;#e;#r;#i;#o;#S;ttl;ttlResolution;ttlAutopurge;updateAgeOnGet;updateAgeOnHas;allowStale;noDisposeOnSet;noUpdateTTL;maxEntrySize;sizeCalculation;noDeleteOnFetchRejection;noDeleteOnStaleGet;allowStaleOnFetchAbort;allowStaleOnFetchRejection;ignoreFetchAbort;#l;#f;#h;#a;#n;#g;#w;#d;#u;#x;#m;#T;#C;#b;#E;#v;#p;static unsafeExposeInternals(t){return{starts:t.#C,ttls:t.#b,sizes:t.#T,keyMap:t.#h,keyList:t.#a,valList:t.#n,next:t.#g,prev:t.#w,get head(){return t.#d},get tail(){return t.#u},free:t.#x,isBackgroundFetch:e=>t.#c(e),backgroundFetch:(e,s,i,r)=>t.#j(e,s,i,r),moveToTail:e=>t.#P(e),indexes:e=>t.#R(e),rindexes:e=>t.#k(e),isStale:e=>t.#y(e)}}get max(){return this.#t}get maxSize(){return this.#e}get calculatedSize(){return this.#f}get size(){return this.#l}get fetchMethod(){return this.#o}get memoMethod(){return this.#S}get dispose(){return this.#r}get disposeAfter(){return this.#i}constructor(t){let{max:e=0,ttl:s,ttlResolution:i=1,ttlAutopurge:r,updateAgeOnGet:o,updateAgeOnHas:h,allowStale:a,dispose:l,disposeAfter:c,noDisposeOnSet:f,noUpdateTTL:u,maxSize:d=0,maxEntrySize:g=0,sizeCalculation:p,fetchMethod:w,memoMethod:m,noDeleteOnFetchRejection:S,noDeleteOnStaleGet:b,allowStaleOnFetchRejection:y,allowStaleOnFetchAbort:E,ignoreFetchAbort:x}=t;if(e!==0&&!V(e))throw new TypeError("max option must be a nonnegative integer");let j=e?is(e):Array;if(!j)throw new Error("invalid max value: "+e);if(this.#t=e,this.#e=d,this.maxEntrySize=g||this.#e,this.sizeCalculation=p,this.sizeCalculation){if(!this.#e&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if(typeof this.sizeCalculation!="function")throw new TypeError("sizeCalculation set to non-function")}if(m!==void 0&&typeof m!="function")throw new TypeError("memoMethod must be a function if defined");if(this.#S=m,w!==void 0&&typeof w!="function")throw new TypeError("fetchMethod must be a function if specified");if(this.#o=w,this.#v=!!w,this.#h=new Map,this.#a=new Array(e).fill(void 0),this.#n=new Array(e).fill(void 0),this.#g=new j(e),this.#w=new j(e),this.#d=0,this.#u=0,this.#x=ne.create(e),this.#l=0,this.#f=0,typeof l=="function"&&(this.#r=l),typeof c=="function"?(this.#i=c,this.#m=[]):(this.#i=void 0,this.#m=void 0),this.#E=!!this.#r,this.#p=!!this.#i,this.noDisposeOnSet=!!f,this.noUpdateTTL=!!u,this.noDeleteOnFetchRejection=!!S,this.allowStaleOnFetchRejection=!!y,this.allowStaleOnFetchAbort=!!E,this.ignoreFetchAbort=!!x,this.maxEntrySize!==0){if(this.#e!==0&&!V(this.#e))throw new TypeError("maxSize must be a positive integer if specified");if(!V(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");this.#M()}if(this.allowStale=!!a,this.noDeleteOnStaleGet=!!b,this.updateAgeOnGet=!!o,this.updateAgeOnHas=!!h,this.ttlResolution=V(i)||i===0?i:1,this.ttlAutopurge=!!r,this.ttl=s||0,this.ttl){if(!V(this.ttl))throw new TypeError("ttl must be a positive integer if specified");this.#F()}if(this.#t===0&&this.ttl===0&&this.#e===0)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!this.#t&&!this.#e){let Z="LRU_CACHE_UNBOUNDED";Di(Z)&&(es.add(Z),ss("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",Z,n))}}getRemainingTTL(t){return this.#h.has(t)?1/0:0}#F(){let t=new nt(this.#t),e=new nt(this.#t);this.#b=t,this.#C=e,this.#_=(r,o,h=it.now())=>{if(e[r]=o!==0?h:0,t[r]=o,o!==0&&this.ttlAutopurge){let a=setTimeout(()=>{this.#y(r)&&this.#O(this.#a[r],"expire")},o+1);a.unref&&a.unref()}},this.#A=r=>{e[r]=t[r]!==0?it.now():0},this.#s=(r,o)=>{if(t[o]){let h=t[o],a=e[o];if(!h||!a)return;r.ttl=h,r.start=a,r.now=s||i();let l=r.now-a;r.remainingTTL=h-l}};let s=0,i=()=>{let r=it.now();if(this.ttlResolution>0){s=r;let o=setTimeout(()=>s=0,this.ttlResolution);o.unref&&o.unref()}return r};this.getRemainingTTL=r=>{let o=this.#h.get(r);if(o===void 0)return 0;let h=t[o],a=e[o];if(!h||!a)return 1/0;let l=(s||i())-a;return h-l},this.#y=r=>{let o=e[r],h=t[r];return!!h&&!!o&&(s||i())-o>h}}#A=()=>{};#s=()=>{};#_=()=>{};#y=()=>!1;#M(){let t=new nt(this.#t);this.#f=0,this.#T=t,this.#D=e=>{this.#f-=t[e],t[e]=0},this.#z=(e,s,i,r)=>{if(this.#c(s))return 0;if(!V(i))if(r){if(typeof r!="function")throw new TypeError("sizeCalculation must be a function");if(i=r(s,e),!V(i))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}else throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");return i},this.#N=(e,s,i)=>{if(t[e]=s,this.#e){let r=this.#e-t[e];for(;this.#f>r;)this.#I(!0)}this.#f+=t[e],i&&(i.entrySize=s,i.totalCalculatedSize=this.#f)}}#D=t=>{};#N=(t,e,s)=>{};#z=(t,e,s,i)=>{if(s||i)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");return 0};*#R({allowStale:t=this.allowStale}={}){if(this.#l)for(let e=this.#u;!(!this.#L(e)||((t||!this.#y(e))&&(yield e),e===this.#d));)e=this.#w[e]}*#k({allowStale:t=this.allowStale}={}){if(this.#l)for(let e=this.#d;!(!this.#L(e)||((t||!this.#y(e))&&(yield e),e===this.#u));)e=this.#g[e]}#L(t){return t!==void 0&&this.#h.get(this.#a[t])===t}*entries(){for(let t of this.#R())this.#n[t]!==void 0&&this.#a[t]!==void 0&&!this.#c(this.#n[t])&&(yield[this.#a[t],this.#n[t]])}*rentries(){for(let t of this.#k())this.#n[t]!==void 0&&this.#a[t]!==void 0&&!this.#c(this.#n[t])&&(yield[this.#a[t],this.#n[t]])}*keys(){for(let t of this.#R()){let e=this.#a[t];e!==void 0&&!this.#c(this.#n[t])&&(yield e)}}*rkeys(){for(let t of this.#k()){let e=this.#a[t];e!==void 0&&!this.#c(this.#n[t])&&(yield e)}}*values(){for(let t of this.#R())this.#n[t]!==void 0&&!this.#c(this.#n[t])&&(yield this.#n[t])}*rvalues(){for(let t of this.#k())this.#n[t]!==void 0&&!this.#c(this.#n[t])&&(yield this.#n[t])}[Symbol.iterator](){return this.entries()}[Symbol.toStringTag]="LRUCache";find(t,e={}){for(let s of this.#R()){let i=this.#n[s],r=this.#c(i)?i.__staleWhileFetching:i;if(r!==void 0&&t(r,this.#a[s],this))return this.get(this.#a[s],e)}}forEach(t,e=this){for(let s of this.#R()){let i=this.#n[s],r=this.#c(i)?i.__staleWhileFetching:i;r!==void 0&&t.call(e,r,this.#a[s],this)}}rforEach(t,e=this){for(let s of this.#k()){let i=this.#n[s],r=this.#c(i)?i.__staleWhileFetching:i;r!==void 0&&t.call(e,r,this.#a[s],this)}}purgeStale(){let t=!1;for(let e of this.#k({allowStale:!0}))this.#y(e)&&(this.#O(this.#a[e],"expire"),t=!0);return t}info(t){let e=this.#h.get(t);if(e===void 0)return;let s=this.#n[e],i=this.#c(s)?s.__staleWhileFetching:s;if(i===void 0)return;let r={value:i};if(this.#b&&this.#C){let o=this.#b[e],h=this.#C[e];if(o&&h){let a=o-(it.now()-h);r.ttl=a,r.start=Date.now()}}return this.#T&&(r.size=this.#T[e]),r}dump(){let t=[];for(let e of this.#R({allowStale:!0})){let s=this.#a[e],i=this.#n[e],r=this.#c(i)?i.__staleWhileFetching:i;if(r===void 0||s===void 0)continue;let o={value:r};if(this.#b&&this.#C){o.ttl=this.#b[e];let h=it.now()-this.#C[e];o.start=Math.floor(Date.now()-h)}this.#T&&(o.size=this.#T[e]),t.unshift([s,o])}return t}load(t){this.clear();for(let[e,s]of t){if(s.start){let i=Date.now()-s.start;s.start=it.now()-i}this.set(e,s.value,s)}}set(t,e,s={}){if(e===void 0)return this.delete(t),this;let{ttl:i=this.ttl,start:r,noDisposeOnSet:o=this.noDisposeOnSet,sizeCalculation:h=this.sizeCalculation,status:a}=s,{noUpdateTTL:l=this.noUpdateTTL}=s,c=this.#z(t,e,s.size||0,h);if(this.maxEntrySize&&c>this.maxEntrySize)return a&&(a.set="miss",a.maxEntrySizeExceeded=!0),this.#O(t,"set"),this;let f=this.#l===0?void 0:this.#h.get(t);if(f===void 0)f=this.#l===0?this.#u:this.#x.length!==0?this.#x.pop():this.#l===this.#t?this.#I(!1):this.#l,this.#a[f]=t,this.#n[f]=e,this.#h.set(t,f),this.#g[this.#u]=f,this.#w[f]=this.#u,this.#u=f,this.#l++,this.#N(f,c,a),a&&(a.set="add"),l=!1;else{this.#P(f);let u=this.#n[f];if(e!==u){if(this.#v&&this.#c(u)){u.__abortController.abort(new Error("replaced"));let{__staleWhileFetching:d}=u;d!==void 0&&!o&&(this.#E&&this.#r?.(d,t,"set"),this.#p&&this.#m?.push([d,t,"set"]))}else o||(this.#E&&this.#r?.(u,t,"set"),this.#p&&this.#m?.push([u,t,"set"]));if(this.#D(f),this.#N(f,c,a),this.#n[f]=e,a){a.set="replace";let d=u&&this.#c(u)?u.__staleWhileFetching:u;d!==void 0&&(a.oldValue=d)}}else a&&(a.set="update")}if(i!==0&&!this.#b&&this.#F(),this.#b&&(l||this.#_(f,i,r),a&&this.#s(a,f)),!o&&this.#p&&this.#m){let u=this.#m,d;for(;d=u?.shift();)this.#i?.(...d)}return this}pop(){try{for(;this.#l;){let t=this.#n[this.#d];if(this.#I(!0),this.#c(t)){if(t.__staleWhileFetching)return t.__staleWhileFetching}else if(t!==void 0)return t}}finally{if(this.#p&&this.#m){let t=this.#m,e;for(;e=t?.shift();)this.#i?.(...e)}}}#I(t){let e=this.#d,s=this.#a[e],i=this.#n[e];return this.#v&&this.#c(i)?i.__abortController.abort(new Error("evicted")):(this.#E||this.#p)&&(this.#E&&this.#r?.(i,s,"evict"),this.#p&&this.#m?.push([i,s,"evict"])),this.#D(e),t&&(this.#a[e]=void 0,this.#n[e]=void 0,this.#x.push(e)),this.#l===1?(this.#d=this.#u=0,this.#x.length=0):this.#d=this.#g[e],this.#h.delete(s),this.#l--,e}has(t,e={}){let{updateAgeOnHas:s=this.updateAgeOnHas,status:i}=e,r=this.#h.get(t);if(r!==void 0){let o=this.#n[r];if(this.#c(o)&&o.__staleWhileFetching===void 0)return!1;if(this.#y(r))i&&(i.has="stale",this.#s(i,r));else return s&&this.#A(r),i&&(i.has="hit",this.#s(i,r)),!0}else i&&(i.has="miss");return!1}peek(t,e={}){let{allowStale:s=this.allowStale}=e,i=this.#h.get(t);if(i===void 0||!s&&this.#y(i))return;let r=this.#n[i];return this.#c(r)?r.__staleWhileFetching:r}#j(t,e,s,i){let r=e===void 0?void 0:this.#n[e];if(this.#c(r))return r;let o=new _t,{signal:h}=s;h?.addEventListener("abort",()=>o.abort(h.reason),{signal:o.signal});let a={signal:o.signal,options:s,context:i},l=(p,w=!1)=>{let{aborted:m}=o.signal,S=s.ignoreFetchAbort&&p!==void 0;if(s.status&&(m&&!w?(s.status.fetchAborted=!0,s.status.fetchError=o.signal.reason,S&&(s.status.fetchAbortIgnored=!0)):s.status.fetchResolved=!0),m&&!S&&!w)return f(o.signal.reason);let b=d;return this.#n[e]===d&&(p===void 0?b.__staleWhileFetching?this.#n[e]=b.__staleWhileFetching:this.#O(t,"fetch"):(s.status&&(s.status.fetchUpdated=!0),this.set(t,p,a.options))),p},c=p=>(s.status&&(s.status.fetchRejected=!0,s.status.fetchError=p),f(p)),f=p=>{let{aborted:w}=o.signal,m=w&&s.allowStaleOnFetchAbort,S=m||s.allowStaleOnFetchRejection,b=S||s.noDeleteOnFetchRejection,y=d;if(this.#n[e]===d&&(!b||y.__staleWhileFetching===void 0?this.#O(t,"fetch"):m||(this.#n[e]=y.__staleWhileFetching)),S)return s.status&&y.__staleWhileFetching!==void 0&&(s.status.returnedStale=!0),y.__staleWhileFetching;if(y.__returned===y)throw p},u=(p,w)=>{let m=this.#o?.(t,r,a);m&&m instanceof Promise&&m.then(S=>p(S===void 0?void 0:S),w),o.signal.addEventListener("abort",()=>{(!s.ignoreFetchAbort||s.allowStaleOnFetchAbort)&&(p(void 0),s.allowStaleOnFetchAbort&&(p=S=>l(S,!0)))})};s.status&&(s.status.fetchDispatched=!0);let d=new Promise(u).then(l,c),g=Object.assign(d,{__abortController:o,__staleWhileFetching:r,__returned:void 0});return e===void 0?(this.set(t,g,{...a.options,status:void 0}),e=this.#h.get(t)):this.#n[e]=g,g}#c(t){if(!this.#v)return!1;let e=t;return!!e&&e instanceof Promise&&e.hasOwnProperty("__staleWhileFetching")&&e.__abortController instanceof _t}async fetch(t,e={}){let{allowStale:s=this.allowStale,updateAgeOnGet:i=this.updateAgeOnGet,noDeleteOnStaleGet:r=this.noDeleteOnStaleGet,ttl:o=this.ttl,noDisposeOnSet:h=this.noDisposeOnSet,size:a=0,sizeCalculation:l=this.sizeCalculation,noUpdateTTL:c=this.noUpdateTTL,noDeleteOnFetchRejection:f=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:u=this.allowStaleOnFetchRejection,ignoreFetchAbort:d=this.ignoreFetchAbort,allowStaleOnFetchAbort:g=this.allowStaleOnFetchAbort,context:p,forceRefresh:w=!1,status:m,signal:S}=e;if(!this.#v)return m&&(m.fetch="get"),this.get(t,{allowStale:s,updateAgeOnGet:i,noDeleteOnStaleGet:r,status:m});let b={allowStale:s,updateAgeOnGet:i,noDeleteOnStaleGet:r,ttl:o,noDisposeOnSet:h,size:a,sizeCalculation:l,noUpdateTTL:c,noDeleteOnFetchRejection:f,allowStaleOnFetchRejection:u,allowStaleOnFetchAbort:g,ignoreFetchAbort:d,status:m,signal:S},y=this.#h.get(t);if(y===void 0){m&&(m.fetch="miss");let E=this.#j(t,y,b,p);return E.__returned=E}else{let E=this.#n[y];if(this.#c(E)){let Mt=s&&E.__staleWhileFetching!==void 0;return m&&(m.fetch="inflight",Mt&&(m.returnedStale=!0)),Mt?E.__staleWhileFetching:E.__returned=E}let x=this.#y(y);if(!w&&!x)return m&&(m.fetch="hit"),this.#P(y),i&&this.#A(y),m&&this.#s(m,y),E;let j=this.#j(t,y,b,p),$=j.__staleWhileFetching!==void 0&&s;return m&&(m.fetch=x?"stale":"refresh",$&&x&&(m.returnedStale=!0)),$?j.__staleWhileFetching:j.__returned=j}}async forceFetch(t,e={}){let s=await this.fetch(t,e);if(s===void 0)throw new Error("fetch() returned undefined");return s}memo(t,e={}){let s=this.#S;if(!s)throw new Error("no memoMethod provided to constructor");let{context:i,forceRefresh:r,...o}=e,h=this.get(t,o);if(!r&&h!==void 0)return h;let a=s(t,h,{options:o,context:i});return this.set(t,a,o),a}get(t,e={}){let{allowStale:s=this.allowStale,updateAgeOnGet:i=this.updateAgeOnGet,noDeleteOnStaleGet:r=this.noDeleteOnStaleGet,status:o}=e,h=this.#h.get(t);if(h!==void 0){let a=this.#n[h],l=this.#c(a);return o&&this.#s(o,h),this.#y(h)?(o&&(o.get="stale"),l?(o&&s&&a.__staleWhileFetching!==void 0&&(o.returnedStale=!0),s?a.__staleWhileFetching:void 0):(r||this.#O(t,"expire"),o&&s&&(o.returnedStale=!0),s?a:void 0)):(o&&(o.get="hit"),l?a.__staleWhileFetching:(this.#P(h),i&&this.#A(h),a))}else o&&(o.get="miss")}#$(t,e){this.#w[e]=t,this.#g[t]=e}#P(t){t!==this.#u&&(t===this.#d?this.#d=this.#g[t]:this.#$(this.#w[t],this.#g[t]),this.#$(this.#u,t),this.#u=t)}delete(t){return this.#O(t,"delete")}#O(t,e){let s=!1;if(this.#l!==0){let i=this.#h.get(t);if(i!==void 0)if(s=!0,this.#l===1)this.#B(e);else{this.#D(i);let r=this.#n[i];if(this.#c(r)?r.__abortController.abort(new Error("deleted")):(this.#E||this.#p)&&(this.#E&&this.#r?.(r,t,e),this.#p&&this.#m?.push([r,t,e])),this.#h.delete(t),this.#a[i]=void 0,this.#n[i]=void 0,i===this.#u)this.#u=this.#w[i];else if(i===this.#d)this.#d=this.#g[i];else{let o=this.#w[i];this.#g[o]=this.#g[i];let h=this.#g[i];this.#w[h]=this.#w[i]}this.#l--,this.#x.push(i)}}if(this.#p&&this.#m?.length){let i=this.#m,r;for(;r=i?.shift();)this.#i?.(...r)}return s}clear(){return this.#B("delete")}#B(t){for(let e of this.#k({allowStale:!0})){let s=this.#n[e];if(this.#c(s))s.__abortController.abort(new Error("deleted"));else{let i=this.#a[e];this.#E&&this.#r?.(s,i,t),this.#p&&this.#m?.push([s,i,t])}}if(this.#h.clear(),this.#n.fill(void 0),this.#a.fill(void 0),this.#b&&this.#C&&(this.#b.fill(0),this.#C.fill(0)),this.#T&&this.#T.fill(0),this.#d=0,this.#u=0,this.#x.length=0,this.#f=0,this.#l=0,this.#p&&this.#m){let e=this.#m,s;for(;s=e?.shift();)this.#i?.(...s)}}};import{posix as Gi,win32 as pe}from"node:path";import{fileURLToPath as Hi}from"node:url";import{lstatSync as qi,readdir as Ji,readdirSync as Ki,readlinkSync as Vi,realpathSync as Yi}from"fs";import*as Xi from"node:fs";import{lstat as Qi,readdir as tn,readlink as en,realpath as sn}from"node:fs/promises";import{EventEmitter as fe}from"node:events";import as from"node:stream";import{StringDecoder as Ni}from"node:string_decoder";var ns=typeof process=="object"&&process?process:{stdout:null,stderr:null},zi=n=>!!n&&typeof n=="object"&&(n instanceof X||n instanceof as||Li(n)||Ii(n)),Li=n=>!!n&&typeof n=="object"&&n instanceof fe&&typeof n.pipe=="function"&&n.pipe!==as.Writable.prototype.pipe,Ii=n=>!!n&&typeof n=="object"&&n instanceof fe&&typeof n.write=="function"&&typeof n.end=="function",q=Symbol("EOF"),J=Symbol("maybeEmitEnd"),Y=Symbol("emittedEnd"),Dt=Symbol("emittingEnd"),gt=Symbol("emittedError"),Nt=Symbol("closed"),rs=Symbol("read"),zt=Symbol("flush"),os=Symbol("flushChunk"),B=Symbol("encoding"),rt=Symbol("decoder"),T=Symbol("flowing"),wt=Symbol("paused"),ot=Symbol("resume"),C=Symbol("buffer"),O=Symbol("pipes"),A=Symbol("bufferLength"),re=Symbol("bufferPush"),Lt=Symbol("bufferShift"),k=Symbol("objectMode"),v=Symbol("destroyed"),oe=Symbol("error"),he=Symbol("emitData"),hs=Symbol("emitEnd"),ae=Symbol("emitEnd2"),G=Symbol("async"),le=Symbol("abort"),It=Symbol("aborted"),yt=Symbol("signal"),Q=Symbol("dataListeners"),D=Symbol("discarded"),bt=n=>Promise.resolve().then(n),ji=n=>n(),$i=n=>n==="end"||n==="finish"||n==="prefinish",Pi=n=>n instanceof ArrayBuffer||!!n&&typeof n=="object"&&n.constructor&&n.constructor.name==="ArrayBuffer"&&n.byteLength>=0,Bi=n=>!Buffer.isBuffer(n)&&ArrayBuffer.isView(n),jt=class{src;dest;opts;ondrain;constructor(t,e,s){this.src=t,this.dest=e,this.opts=s,this.ondrain=()=>t[ot](),this.dest.on("drain",this.ondrain)}unpipe(){this.dest.removeListener("drain",this.ondrain)}proxyErrors(t){}end(){this.unpipe(),this.opts.end&&this.dest.end()}},ce=class extends jt{unpipe(){this.src.removeListener("error",this.proxyErrors),super.unpipe()}constructor(t,e,s){super(t,e,s),this.proxyErrors=i=>e.emit("error",i),t.on("error",this.proxyErrors)}},Wi=n=>!!n.objectMode,Ui=n=>!n.objectMode&&!!n.encoding&&n.encoding!=="buffer",X=class extends fe{[T]=!1;[wt]=!1;[O]=[];[C]=[];[k];[B];[G];[rt];[q]=!1;[Y]=!1;[Dt]=!1;[Nt]=!1;[gt]=null;[A]=0;[v]=!1;[yt];[It]=!1;[Q]=0;[D]=!1;writable=!0;readable=!0;constructor(...t){let e=t[0]||{};if(super(),e.objectMode&&typeof e.encoding=="string")throw new TypeError("Encoding and objectMode may not be used together");Wi(e)?(this[k]=!0,this[B]=null):Ui(e)?(this[B]=e.encoding,this[k]=!1):(this[k]=!1,this[B]=null),this[G]=!!e.async,this[rt]=this[B]?new Ni(this[B]):null,e&&e.debugExposeBuffer===!0&&Object.defineProperty(this,"buffer",{get:()=>this[C]}),e&&e.debugExposePipes===!0&&Object.defineProperty(this,"pipes",{get:()=>this[O]});let{signal:s}=e;s&&(this[yt]=s,s.aborted?this[le]():s.addEventListener("abort",()=>this[le]()))}get bufferLength(){return this[A]}get encoding(){return this[B]}set encoding(t){throw new Error("Encoding must be set at instantiation time")}setEncoding(t){throw new Error("Encoding must be set at instantiation time")}get objectMode(){return this[k]}set objectMode(t){throw new Error("objectMode must be set at instantiation time")}get async(){return this[G]}set async(t){this[G]=this[G]||!!t}[le](){this[It]=!0,this.emit("abort",this[yt]?.reason),this.destroy(this[yt]?.reason)}get aborted(){return this[It]}set aborted(t){}write(t,e,s){if(this[It])return!1;if(this[q])throw new Error("write after end");if(this[v])return this.emit("error",Object.assign(new Error("Cannot call write after a stream was destroyed"),{code:"ERR_STREAM_DESTROYED"})),!0;typeof e=="function"&&(s=e,e="utf8"),e||(e="utf8");let i=this[G]?bt:ji;if(!this[k]&&!Buffer.isBuffer(t)){if(Bi(t))t=Buffer.from(t.buffer,t.byteOffset,t.byteLength);else if(Pi(t))t=Buffer.from(t);else if(typeof t!="string")throw new Error("Non-contiguous data written to non-objectMode stream")}return this[k]?(this[T]&&this[A]!==0&&this[zt](!0),this[T]?this.emit("data",t):this[re](t),this[A]!==0&&this.emit("readable"),s&&i(s),this[T]):t.length?(typeof t=="string"&&!(e===this[B]&&!this[rt]?.lastNeed)&&(t=Buffer.from(t,e)),Buffer.isBuffer(t)&&this[B]&&(t=this[rt].write(t)),this[T]&&this[A]!==0&&this[zt](!0),this[T]?this.emit("data",t):this[re](t),this[A]!==0&&this.emit("readable"),s&&i(s),this[T]):(this[A]!==0&&this.emit("readable"),s&&i(s),this[T])}read(t){if(this[v])return null;if(this[D]=!1,this[A]===0||t===0||t&&t>this[A])return this[J](),null;this[k]&&(t=null),this[C].length>1&&!this[k]&&(this[C]=[this[B]?this[C].join(""):Buffer.concat(this[C],this[A])]);let e=this[rs](t||null,this[C][0]);return this[J](),e}[rs](t,e){if(this[k])this[Lt]();else{let s=e;t===s.length||t===null?this[Lt]():typeof s=="string"?(this[C][0]=s.slice(t),e=s.slice(0,t),this[A]-=t):(this[C][0]=s.subarray(t),e=s.subarray(0,t),this[A]-=t)}return this.emit("data",e),!this[C].length&&!this[q]&&this.emit("drain"),e}end(t,e,s){return typeof t=="function"&&(s=t,t=void 0),typeof e=="function"&&(s=e,e="utf8"),t!==void 0&&this.write(t,e),s&&this.once("end",s),this[q]=!0,this.writable=!1,(this[T]||!this[wt])&&this[J](),this}[ot](){this[v]||(!this[Q]&&!this[O].length&&(this[D]=!0),this[wt]=!1,this[T]=!0,this.emit("resume"),this[C].length?this[zt]():this[q]?this[J]():this.emit("drain"))}resume(){return this[ot]()}pause(){this[T]=!1,this[wt]=!0,this[D]=!1}get destroyed(){return this[v]}get flowing(){return this[T]}get paused(){return this[wt]}[re](t){this[k]?this[A]+=1:this[A]+=t.length,this[C].push(t)}[Lt](){return this[k]?this[A]-=1:this[A]-=this[C][0].length,this[C].shift()}[zt](t=!1){do;while(this[os](this[Lt]())&&this[C].length);!t&&!this[C].length&&!this[q]&&this.emit("drain")}[os](t){return this.emit("data",t),this[T]}pipe(t,e){if(this[v])return t;this[D]=!1;let s=this[Y];return e=e||{},t===ns.stdout||t===ns.stderr?e.end=!1:e.end=e.end!==!1,e.proxyErrors=!!e.proxyErrors,s?e.end&&t.end():(this[O].push(e.proxyErrors?new ce(this,t,e):new jt(this,t,e)),this[G]?bt(()=>this[ot]()):this[ot]()),t}unpipe(t){let e=this[O].find(s=>s.dest===t);e&&(this[O].length===1?(this[T]&&this[Q]===0&&(this[T]=!1),this[O]=[]):this[O].splice(this[O].indexOf(e),1),e.unpipe())}addListener(t,e){return this.on(t,e)}on(t,e){let s=super.on(t,e);if(t==="data")this[D]=!1,this[Q]++,!this[O].length&&!this[T]&&this[ot]();else if(t==="readable"&&this[A]!==0)super.emit("readable");else if($i(t)&&this[Y])super.emit(t),this.removeAllListeners(t);else if(t==="error"&&this[gt]){let i=e;this[G]?bt(()=>i.call(this,this[gt])):i.call(this,this[gt])}return s}removeListener(t,e){return this.off(t,e)}off(t,e){let s=super.off(t,e);return t==="data"&&(this[Q]=this.listeners("data").length,this[Q]===0&&!this[D]&&!this[O].length&&(this[T]=!1)),s}removeAllListeners(t){let e=super.removeAllListeners(t);return(t==="data"||t===void 0)&&(this[Q]=0,!this[D]&&!this[O].length&&(this[T]=!1)),e}get emittedEnd(){return this[Y]}[J](){!this[Dt]&&!this[Y]&&!this[v]&&this[C].length===0&&this[q]&&(this[Dt]=!0,this.emit("end"),this.emit("prefinish"),this.emit("finish"),this[Nt]&&this.emit("close"),this[Dt]=!1)}emit(t,...e){let s=e[0];if(t!=="error"&&t!=="close"&&t!==v&&this[v])return!1;if(t==="data")return!this[k]&&!s?!1:this[G]?(bt(()=>this[he](s)),!0):this[he](s);if(t==="end")return this[hs]();if(t==="close"){if(this[Nt]=!0,!this[Y]&&!this[v])return!1;let r=super.emit("close");return this.removeAllListeners("close"),r}else if(t==="error"){this[gt]=s,super.emit(oe,s);let r=!this[yt]||this.listeners("error").length?super.emit("error",s):!1;return this[J](),r}else if(t==="resume"){let r=super.emit("resume");return this[J](),r}else if(t==="finish"||t==="prefinish"){let r=super.emit(t);return this.removeAllListeners(t),r}let i=super.emit(t,...e);return this[J](),i}[he](t){for(let s of this[O])s.dest.write(t)===!1&&this.pause();let e=this[D]?!1:super.emit("data",t);return this[J](),e}[hs](){return this[Y]?!1:(this[Y]=!0,this.readable=!1,this[G]?(bt(()=>this[ae]()),!0):this[ae]())}[ae](){if(this[rt]){let e=this[rt].end();if(e){for(let s of this[O])s.dest.write(e);this[D]||super.emit("data",e)}}for(let e of this[O])e.end();let t=super.emit("end");return this.removeAllListeners("end"),t}async collect(){let t=Object.assign([],{dataLength:0});this[k]||(t.dataLength=0);let e=this.promise();return this.on("data",s=>{t.push(s),this[k]||(t.dataLength+=s.length)}),await e,t}async concat(){if(this[k])throw new Error("cannot concat in objectMode");let t=await this.collect();return this[B]?t.join(""):Buffer.concat(t,t.dataLength)}async promise(){return new Promise((t,e)=>{this.on(v,()=>e(new Error("stream destroyed"))),this.on("error",s=>e(s)),this.on("end",()=>t())})}[Symbol.asyncIterator](){this[D]=!1;let t=!1,e=async()=>(this.pause(),t=!0,{value:void 0,done:!0});return{next:()=>{if(t)return e();let i=this.read();if(i!==null)return Promise.resolve({done:!1,value:i});if(this[q])return e();let r,o,h=f=>{this.off("data",a),this.off("end",l),this.off(v,c),e(),o(f)},a=f=>{this.off("error",h),this.off("end",l),this.off(v,c),this.pause(),r({value:f,done:!!this[q]})},l=()=>{this.off("error",h),this.off("data",a),this.off(v,c),e(),r({done:!0,value:void 0})},c=()=>h(new Error("stream destroyed"));return new Promise((f,u)=>{o=u,r=f,this.once(v,c),this.once("error",h),this.once("end",l),this.once("data",a)})},throw:e,return:e,[Symbol.asyncIterator](){return this}}}[Symbol.iterator](){this[D]=!1;let t=!1,e=()=>(this.pause(),this.off(oe,e),this.off(v,e),this.off("end",e),t=!0,{done:!0,value:void 0}),s=()=>{if(t)return e();let i=this.read();return i===null?e():{done:!1,value:i}};return this.once("end",e),this.once(oe,e),this.once(v,e),{next:s,throw:e,return:e,[Symbol.iterator](){return this}}}destroy(t){if(this[v])return t?this.emit("error",t):this.emit(v),this;this[v]=!0,this[D]=!0,this[C].length=0,this[A]=0;let e=this;return typeof e.close=="function"&&!this[Nt]&&e.close(),t?this.emit("error",t):this.emit(v),this}static get isStream(){return zi}};var Zi=Yi.native,Et={lstatSync:qi,readdir:Ji,readdirSync:Ki,readlinkSync:Vi,realpathSync:Zi,promises:{lstat:Qi,readdir:tn,readlink:en,realpath:sn}},ds=n=>!n||n===Et||n===Xi?Et:{...Et,...n,promises:{...Et.promises,...n.promises||{}}},ps=/^\\\\\?\\([a-z]:)\\?$/i,nn=n=>n.replace(/\//g,"\\").replace(ps,"$1\\"),rn=/[\\\/]/,I=0,ms=1,gs=2,H=4,ws=6,ys=8,tt=10,bs=12,L=15,St=~L,ue=16,ls=32,vt=64,W=128,$t=256,Bt=512,cs=vt|W|Bt,on=1023,de=n=>n.isFile()?ys:n.isDirectory()?H:n.isSymbolicLink()?tt:n.isCharacterDevice()?gs:n.isBlockDevice()?ws:n.isSocket()?bs:n.isFIFO()?ms:I,fs=new Map,xt=n=>{let t=fs.get(n);if(t)return t;let e=n.normalize("NFKD");return fs.set(n,e),e},us=new Map,Pt=n=>{let t=us.get(n);if(t)return t;let e=xt(n.toLowerCase());return us.set(n,e),e},Wt=class extends mt{constructor(){super({max:256})}},me=class extends mt{constructor(t=16*1024){super({maxSize:t,sizeCalculation:e=>e.length+1})}},Ss=Symbol("PathScurry setAsCwd"),F=class{name;root;roots;parent;nocase;isCWD=!1;#t;#e;get dev(){return this.#e}#r;get mode(){return this.#r}#i;get nlink(){return this.#i}#o;get uid(){return this.#o}#S;get gid(){return this.#S}#l;get rdev(){return this.#l}#f;get blksize(){return this.#f}#h;get ino(){return this.#h}#a;get size(){return this.#a}#n;get blocks(){return this.#n}#g;get atimeMs(){return this.#g}#w;get mtimeMs(){return this.#w}#d;get ctimeMs(){return this.#d}#u;get birthtimeMs(){return this.#u}#x;get atime(){return this.#x}#m;get mtime(){return this.#m}#T;get ctime(){return this.#T}#C;get birthtime(){return this.#C}#b;#E;#v;#p;#F;#A;#s;#_;#y;#M;get parentPath(){return(this.parent||this).fullpath()}get path(){return this.parentPath}constructor(t,e=I,s,i,r,o,h){this.name=t,this.#b=r?Pt(t):xt(t),this.#s=e&on,this.nocase=r,this.roots=i,this.root=s||this,this.#_=o,this.#v=h.fullpath,this.#F=h.relative,this.#A=h.relativePosix,this.parent=h.parent,this.parent?this.#t=this.parent.#t:this.#t=ds(h.fs)}depth(){return this.#E!==void 0?this.#E:this.parent?this.#E=this.parent.depth()+1:this.#E=0}childrenCache(){return this.#_}resolve(t){if(!t)return this;let e=this.getRootString(t),i=t.substring(e.length).split(this.splitSep);return e?this.getRoot(e).#D(i):this.#D(i)}#D(t){let e=this;for(let s of t)e=e.child(s);return e}children(){let t=this.#_.get(this);if(t)return t;let e=Object.assign([],{provisional:0});return this.#_.set(this,e),this.#s&=~ue,e}child(t,e){if(t===""||t===".")return this;if(t==="..")return this.parent||this;let s=this.children(),i=this.nocase?Pt(t):xt(t);for(let a of s)if(a.#b===i)return a;let r=this.parent?this.sep:"",o=this.#v?this.#v+r+t:void 0,h=this.newChild(t,I,{...e,parent:this,fullpath:o});return this.canReaddir()||(h.#s|=W),s.push(h),h}relative(){if(this.isCWD)return"";if(this.#F!==void 0)return this.#F;let t=this.name,e=this.parent;if(!e)return this.#F=this.name;let s=e.relative();return s+(!s||!e.parent?"":this.sep)+t}relativePosix(){if(this.sep==="/")return this.relative();if(this.isCWD)return"";if(this.#A!==void 0)return this.#A;let t=this.name,e=this.parent;if(!e)return this.#A=this.fullpathPosix();let s=e.relativePosix();return s+(!s||!e.parent?"":"/")+t}fullpath(){if(this.#v!==void 0)return this.#v;let t=this.name,e=this.parent;if(!e)return this.#v=this.name;let i=e.fullpath()+(e.parent?this.sep:"")+t;return this.#v=i}fullpathPosix(){if(this.#p!==void 0)return this.#p;if(this.sep==="/")return this.#p=this.fullpath();if(!this.parent){let i=this.fullpath().replace(/\\/g,"/");return/^[a-z]:\//i.test(i)?this.#p=`//?/${i}`:this.#p=i}let t=this.parent,e=t.fullpathPosix(),s=e+(!e||!t.parent?"":"/")+this.name;return this.#p=s}isUnknown(){return(this.#s&L)===I}isType(t){return this[`is${t}`]()}getType(){return this.isUnknown()?"Unknown":this.isDirectory()?"Directory":this.isFile()?"File":this.isSymbolicLink()?"SymbolicLink":this.isFIFO()?"FIFO":this.isCharacterDevice()?"CharacterDevice":this.isBlockDevice()?"BlockDevice":this.isSocket()?"Socket":"Unknown"}isFile(){return(this.#s&L)===ys}isDirectory(){return(this.#s&L)===H}isCharacterDevice(){return(this.#s&L)===gs}isBlockDevice(){return(this.#s&L)===ws}isFIFO(){return(this.#s&L)===ms}isSocket(){return(this.#s&L)===bs}isSymbolicLink(){return(this.#s&tt)===tt}lstatCached(){return this.#s&ls?this:void 0}readlinkCached(){return this.#y}realpathCached(){return this.#M}readdirCached(){let t=this.children();return t.slice(0,t.provisional)}canReadlink(){if(this.#y)return!0;if(!this.parent)return!1;let t=this.#s&L;return!(t!==I&&t!==tt||this.#s&$t||this.#s&W)}calledReaddir(){return!!(this.#s&ue)}isENOENT(){return!!(this.#s&W)}isNamed(t){return this.nocase?this.#b===Pt(t):this.#b===xt(t)}async readlink(){let t=this.#y;if(t)return t;if(this.canReadlink()&&this.parent)try{let e=await this.#t.promises.readlink(this.fullpath()),s=(await this.parent.realpath())?.resolve(e);if(s)return this.#y=s}catch(e){this.#c(e.code);return}}readlinkSync(){let t=this.#y;if(t)return t;if(this.canReadlink()&&this.parent)try{let e=this.#t.readlinkSync(this.fullpath()),s=this.parent.realpathSync()?.resolve(e);if(s)return this.#y=s}catch(e){this.#c(e.code);return}}#N(t){this.#s|=ue;for(let e=t.provisional;e<t.length;e++){let s=t[e];s&&s.#z()}}#z(){this.#s&W||(this.#s=(this.#s|W)&St,this.#R())}#R(){let t=this.children();t.provisional=0;for(let e of t)e.#z()}#k(){this.#s|=Bt,this.#L()}#L(){if(this.#s&vt)return;let t=this.#s;(t&L)===H&&(t&=St),this.#s=t|vt,this.#R()}#I(t=""){t==="ENOTDIR"||t==="EPERM"?this.#L():t==="ENOENT"?this.#z():this.children().provisional=0}#j(t=""){t==="ENOTDIR"?this.parent.#L():t==="ENOENT"&&this.#z()}#c(t=""){let e=this.#s;e|=$t,t==="ENOENT"&&(e|=W),(t==="EINVAL"||t==="UNKNOWN")&&(e&=St),this.#s=e,t==="ENOTDIR"&&this.parent&&this.parent.#L()}#$(t,e){return this.#O(t,e)||this.#P(t,e)}#P(t,e){let s=de(t),i=this.newChild(t.name,s,{parent:this}),r=i.#s&L;return r!==H&&r!==tt&&r!==I&&(i.#s|=vt),e.unshift(i),e.provisional++,i}#O(t,e){for(let s=e.provisional;s<e.length;s++){let i=e[s];if((this.nocase?Pt(t.name):xt(t.name))===i.#b)return this.#B(t,i,s,e)}}#B(t,e,s,i){let r=e.name;return e.#s=e.#s&St|de(t),r!==t.name&&(e.name=t.name),s!==i.provisional&&(s===i.length-1?i.pop():i.splice(s,1),i.unshift(e)),i.provisional++,e}async lstat(){if((this.#s&W)===0)try{return this.#H(await this.#t.promises.lstat(this.fullpath())),this}catch(t){this.#j(t.code)}}lstatSync(){if((this.#s&W)===0)try{return this.#H(this.#t.lstatSync(this.fullpath())),this}catch(t){this.#j(t.code)}}#H(t){let{atime:e,atimeMs:s,birthtime:i,birthtimeMs:r,blksize:o,blocks:h,ctime:a,ctimeMs:l,dev:c,gid:f,ino:u,mode:d,mtime:g,mtimeMs:p,nlink:w,rdev:m,size:S,uid:b}=t;this.#x=e,this.#g=s,this.#C=i,this.#u=r,this.#f=o,this.#n=h,this.#T=a,this.#d=l,this.#e=c,this.#S=f,this.#h=u,this.#r=d,this.#m=g,this.#w=p,this.#i=w,this.#l=m,this.#a=S,this.#o=b;let y=de(t);this.#s=this.#s&St|y|ls,y!==I&&y!==H&&y!==tt&&(this.#s|=vt)}#U=[];#G=!1;#q(t){this.#G=!1;let e=this.#U.slice();this.#U.length=0,e.forEach(s=>s(null,t))}readdirCB(t,e=!1){if(!this.canReaddir()){e?t(null,[]):queueMicrotask(()=>t(null,[]));return}let s=this.children();if(this.calledReaddir()){let r=s.slice(0,s.provisional);e?t(null,r):queueMicrotask(()=>t(null,r));return}if(this.#U.push(t),this.#G)return;this.#G=!0;let i=this.fullpath();this.#t.readdir(i,{withFileTypes:!0},(r,o)=>{if(r)this.#I(r.code),s.provisional=0;else{for(let h of o)this.#$(h,s);this.#N(s)}this.#q(s.slice(0,s.provisional))})}#W;async readdir(){if(!this.canReaddir())return[];let t=this.children();if(this.calledReaddir())return t.slice(0,t.provisional);let e=this.fullpath();if(this.#W)await this.#W;else{let s=()=>{};this.#W=new Promise(i=>s=i);try{for(let i of await this.#t.promises.readdir(e,{withFileTypes:!0}))this.#$(i,t);this.#N(t)}catch(i){this.#I(i.code),t.provisional=0}this.#W=void 0,s()}return t.slice(0,t.provisional)}readdirSync(){if(!this.canReaddir())return[];let t=this.children();if(this.calledReaddir())return t.slice(0,t.provisional);let e=this.fullpath();try{for(let s of this.#t.readdirSync(e,{withFileTypes:!0}))this.#$(s,t);this.#N(t)}catch(s){this.#I(s.code),t.provisional=0}return t.slice(0,t.provisional)}canReaddir(){if(this.#s&cs)return!1;let t=L&this.#s;return t===I||t===H||t===tt}shouldWalk(t,e){return(this.#s&H)===H&&!(this.#s&cs)&&!t.has(this)&&(!e||e(this))}async realpath(){if(this.#M)return this.#M;if(!((Bt|$t|W)&this.#s))try{let t=await this.#t.promises.realpath(this.fullpath());return this.#M=this.resolve(t)}catch{this.#k()}}realpathSync(){if(this.#M)return this.#M;if(!((Bt|$t|W)&this.#s))try{let t=this.#t.realpathSync(this.fullpath());return this.#M=this.resolve(t)}catch{this.#k()}}[Ss](t){if(t===this)return;t.isCWD=!1,this.isCWD=!0;let e=new Set([]),s=[],i=this;for(;i&&i.parent;)e.add(i),i.#F=s.join(this.sep),i.#A=s.join("/"),i=i.parent,s.push("..");for(i=t;i&&i.parent&&!e.has(i);)i.#F=void 0,i.#A=void 0,i=i.parent}},Ut=class n extends F{sep="\\";splitSep=rn;constructor(t,e=I,s,i,r,o,h){super(t,e,s,i,r,o,h)}newChild(t,e=I,s={}){return new n(t,e,this.root,this.roots,this.nocase,this.childrenCache(),s)}getRootString(t){return pe.parse(t).root}getRoot(t){if(t=nn(t.toUpperCase()),t===this.root.name)return this.root;for(let[e,s]of Object.entries(this.roots))if(this.sameRoot(t,e))return this.roots[t]=s;return this.roots[t]=new ht(t,this).root}sameRoot(t,e=this.root.name){return t=t.toUpperCase().replace(/\//g,"\\").replace(ps,"$1\\"),t===e}},Gt=class n extends F{splitSep="/";sep="/";constructor(t,e=I,s,i,r,o,h){super(t,e,s,i,r,o,h)}getRootString(t){return t.startsWith("/")?"/":""}getRoot(t){return this.root}newChild(t,e=I,s={}){return new n(t,e,this.root,this.roots,this.nocase,this.childrenCache(),s)}},Ht=class{root;rootPath;roots;cwd;#t;#e;#r;nocase;#i;constructor(t=process.cwd(),e,s,{nocase:i,childrenCacheSize:r=16*1024,fs:o=Et}={}){this.#i=ds(o),(t instanceof URL||t.startsWith("file://"))&&(t=Hi(t));let h=e.resolve(t);this.roots=Object.create(null),this.rootPath=this.parseRootPath(h),this.#t=new Wt,this.#e=new Wt,this.#r=new me(r);let a=h.substring(this.rootPath.length).split(s);if(a.length===1&&!a[0]&&a.pop(),i===void 0)throw new TypeError("must provide nocase setting to PathScurryBase ctor");this.nocase=i,this.root=this.newRoot(this.#i),this.roots[this.rootPath]=this.root;let l=this.root,c=a.length-1,f=e.sep,u=this.rootPath,d=!1;for(let g of a){let p=c--;l=l.child(g,{relative:new Array(p).fill("..").join(f),relativePosix:new Array(p).fill("..").join("/"),fullpath:u+=(d?"":f)+g}),d=!0}this.cwd=l}depth(t=this.cwd){return typeof t=="string"&&(t=this.cwd.resolve(t)),t.depth()}childrenCache(){return this.#r}resolve(...t){let e="";for(let r=t.length-1;r>=0;r--){let o=t[r];if(!(!o||o===".")&&(e=e?`${o}/${e}`:o,this.isAbsolute(o)))break}let s=this.#t.get(e);if(s!==void 0)return s;let i=this.cwd.resolve(e).fullpath();return this.#t.set(e,i),i}resolvePosix(...t){let e="";for(let r=t.length-1;r>=0;r--){let o=t[r];if(!(!o||o===".")&&(e=e?`${o}/${e}`:o,this.isAbsolute(o)))break}let s=this.#e.get(e);if(s!==void 0)return s;let i=this.cwd.resolve(e).fullpathPosix();return this.#e.set(e,i),i}relative(t=this.cwd){return typeof t=="string"&&(t=this.cwd.resolve(t)),t.relative()}relativePosix(t=this.cwd){return typeof t=="string"&&(t=this.cwd.resolve(t)),t.relativePosix()}basename(t=this.cwd){return typeof t=="string"&&(t=this.cwd.resolve(t)),t.name}dirname(t=this.cwd){return typeof t=="string"&&(t=this.cwd.resolve(t)),(t.parent||t).fullpath()}async readdir(t=this.cwd,e={withFileTypes:!0}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof F||(e=t,t=this.cwd);let{withFileTypes:s}=e;if(t.canReaddir()){let i=await t.readdir();return s?i:i.map(r=>r.name)}else return[]}readdirSync(t=this.cwd,e={withFileTypes:!0}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof F||(e=t,t=this.cwd);let{withFileTypes:s=!0}=e;return t.canReaddir()?s?t.readdirSync():t.readdirSync().map(i=>i.name):[]}async lstat(t=this.cwd){return typeof t=="string"&&(t=this.cwd.resolve(t)),t.lstat()}lstatSync(t=this.cwd){return typeof t=="string"&&(t=this.cwd.resolve(t)),t.lstatSync()}async readlink(t=this.cwd,{withFileTypes:e}={withFileTypes:!1}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof F||(e=t.withFileTypes,t=this.cwd);let s=await t.readlink();return e?s:s?.fullpath()}readlinkSync(t=this.cwd,{withFileTypes:e}={withFileTypes:!1}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof F||(e=t.withFileTypes,t=this.cwd);let s=t.readlinkSync();return e?s:s?.fullpath()}async realpath(t=this.cwd,{withFileTypes:e}={withFileTypes:!1}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof F||(e=t.withFileTypes,t=this.cwd);let s=await t.realpath();return e?s:s?.fullpath()}realpathSync(t=this.cwd,{withFileTypes:e}={withFileTypes:!1}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof F||(e=t.withFileTypes,t=this.cwd);let s=t.realpathSync();return e?s:s?.fullpath()}async walk(t=this.cwd,e={}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof F||(e=t,t=this.cwd);let{withFileTypes:s=!0,follow:i=!1,filter:r,walkFilter:o}=e,h=[];(!r||r(t))&&h.push(s?t:t.fullpath());let a=new Set,l=(f,u)=>{a.add(f),f.readdirCB((d,g)=>{if(d)return u(d);let p=g.length;if(!p)return u();let w=()=>{--p===0&&u()};for(let m of g)(!r||r(m))&&h.push(s?m:m.fullpath()),i&&m.isSymbolicLink()?m.realpath().then(S=>S?.isUnknown()?S.lstat():S).then(S=>S?.shouldWalk(a,o)?l(S,w):w()):m.shouldWalk(a,o)?l(m,w):w()},!0)},c=t;return new Promise((f,u)=>{l(c,d=>{if(d)return u(d);f(h)})})}walkSync(t=this.cwd,e={}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof F||(e=t,t=this.cwd);let{withFileTypes:s=!0,follow:i=!1,filter:r,walkFilter:o}=e,h=[];(!r||r(t))&&h.push(s?t:t.fullpath());let a=new Set([t]);for(let l of a){let c=l.readdirSync();for(let f of c){(!r||r(f))&&h.push(s?f:f.fullpath());let u=f;if(f.isSymbolicLink()){if(!(i&&(u=f.realpathSync())))continue;u.isUnknown()&&u.lstatSync()}u.shouldWalk(a,o)&&a.add(u)}}return h}[Symbol.asyncIterator](){return this.iterate()}iterate(t=this.cwd,e={}){return typeof t=="string"?t=this.cwd.resolve(t):t instanceof F||(e=t,t=this.cwd),this.stream(t,e)[Symbol.asyncIterator]()}[Symbol.iterator](){return this.iterateSync()}*iterateSync(t=this.cwd,e={}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof F||(e=t,t=this.cwd);let{withFileTypes:s=!0,follow:i=!1,filter:r,walkFilter:o}=e;(!r||r(t))&&(yield s?t:t.fullpath());let h=new Set([t]);for(let a of h){let l=a.readdirSync();for(let c of l){(!r||r(c))&&(yield s?c:c.fullpath());let f=c;if(c.isSymbolicLink()){if(!(i&&(f=c.realpathSync())))continue;f.isUnknown()&&f.lstatSync()}f.shouldWalk(h,o)&&h.add(f)}}}stream(t=this.cwd,e={}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof F||(e=t,t=this.cwd);let{withFileTypes:s=!0,follow:i=!1,filter:r,walkFilter:o}=e,h=new X({objectMode:!0});(!r||r(t))&&h.write(s?t:t.fullpath());let a=new Set,l=[t],c=0,f=()=>{let u=!1;for(;!u;){let d=l.shift();if(!d){c===0&&h.end();return}c++,a.add(d);let g=(w,m,S=!1)=>{if(w)return h.emit("error",w);if(i&&!S){let b=[];for(let y of m)y.isSymbolicLink()&&b.push(y.realpath().then(E=>E?.isUnknown()?E.lstat():E));if(b.length){Promise.all(b).then(()=>g(null,m,!0));return}}for(let b of m)b&&(!r||r(b))&&(h.write(s?b:b.fullpath())||(u=!0));c--;for(let b of m){let y=b.realpathCached()||b;y.shouldWalk(a,o)&&l.push(y)}u&&!h.flowing?h.once("drain",f):p||f()},p=!0;d.readdirCB(g,!0),p=!1}};return f(),h}streamSync(t=this.cwd,e={}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof F||(e=t,t=this.cwd);let{withFileTypes:s=!0,follow:i=!1,filter:r,walkFilter:o}=e,h=new X({objectMode:!0}),a=new Set;(!r||r(t))&&h.write(s?t:t.fullpath());let l=[t],c=0,f=()=>{let u=!1;for(;!u;){let d=l.shift();if(!d){c===0&&h.end();return}c++,a.add(d);let g=d.readdirSync();for(let p of g)(!r||r(p))&&(h.write(s?p:p.fullpath())||(u=!0));c--;for(let p of g){let w=p;if(p.isSymbolicLink()){if(!(i&&(w=p.realpathSync())))continue;w.isUnknown()&&w.lstatSync()}w.shouldWalk(a,o)&&l.push(w)}}u&&!h.flowing&&h.once("drain",f)};return f(),h}chdir(t=this.cwd){let e=this.cwd;this.cwd=typeof t=="string"?this.cwd.resolve(t):t,this.cwd[Ss](e)}},ht=class extends Ht{sep="\\";constructor(t=process.cwd(),e={}){let{nocase:s=!0}=e;super(t,pe,"\\",{...e,nocase:s}),this.nocase=s;for(let i=this.cwd;i;i=i.parent)i.nocase=this.nocase}parseRootPath(t){return pe.parse(t).root.toUpperCase()}newRoot(t){return new Ut(this.rootPath,H,void 0,this.roots,this.nocase,this.childrenCache(),{fs:t})}isAbsolute(t){return t.startsWith("/")||t.startsWith("\\")||/^[a-z]:(\/|\\)/i.test(t)}},at=class extends Ht{sep="/";constructor(t=process.cwd(),e={}){let{nocase:s=!1}=e;super(t,Gi,"/",{...e,nocase:s}),this.nocase=s}parseRootPath(t){return"/"}newRoot(t){return new Gt(this.rootPath,H,void 0,this.roots,this.nocase,this.childrenCache(),{fs:t})}isAbsolute(t){return t.startsWith("/")}},Tt=class extends at{constructor(t=process.cwd(),e={}){let{nocase:s=!0}=e;super(t,{...e,nocase:s})}},pr=process.platform==="win32"?Ut:Gt,Es=process.platform==="win32"?ht:process.platform==="darwin"?Tt:at;var hn=n=>n.length>=1,an=n=>n.length>=1,lt=class n{#t;#e;#r;length;#i;#o;#S;#l;#f;#h;#a=!0;constructor(t,e,s,i){if(!hn(t))throw new TypeError("empty pattern list");if(!an(e))throw new TypeError("empty glob list");if(e.length!==t.length)throw new TypeError("mismatched pattern list and glob list lengths");if(this.length=t.length,s<0||s>=this.length)throw new TypeError("index out of range");if(this.#t=t,this.#e=e,this.#r=s,this.#i=i,this.#r===0){if(this.isUNC()){let[r,o,h,a,...l]=this.#t,[c,f,u,d,...g]=this.#e;l[0]===""&&(l.shift(),g.shift());let p=[r,o,h,a,""].join("/"),w=[c,f,u,d,""].join("/");this.#t=[p,...l],this.#e=[w,...g],this.length=this.#t.length}else if(this.isDrive()||this.isAbsolute()){let[r,...o]=this.#t,[h,...a]=this.#e;o[0]===""&&(o.shift(),a.shift());let l=r+"/",c=h+"/";this.#t=[l,...o],this.#e=[c,...a],this.length=this.#t.length}}}pattern(){return this.#t[this.#r]}isString(){return typeof this.#t[this.#r]=="string"}isGlobstar(){return this.#t[this.#r]===R}isRegExp(){return this.#t[this.#r]instanceof RegExp}globString(){return this.#S=this.#S||(this.#r===0?this.isAbsolute()?this.#e[0]+this.#e.slice(1).join("/"):this.#e.join("/"):this.#e.slice(this.#r).join("/"))}hasMore(){return this.length>this.#r+1}rest(){return this.#o!==void 0?this.#o:this.hasMore()?(this.#o=new n(this.#t,this.#e,this.#r+1,this.#i),this.#o.#h=this.#h,this.#o.#f=this.#f,this.#o.#l=this.#l,this.#o):this.#o=null}isUNC(){let t=this.#t;return this.#f!==void 0?this.#f:this.#f=this.#i==="win32"&&this.#r===0&&t[0]===""&&t[1]===""&&typeof t[2]=="string"&&!!t[2]&&typeof t[3]=="string"&&!!t[3]}isDrive(){let t=this.#t;return this.#l!==void 0?this.#l:this.#l=this.#i==="win32"&&this.#r===0&&this.length>1&&typeof t[0]=="string"&&/^[a-z]:$/i.test(t[0])}isAbsolute(){let t=this.#t;return this.#h!==void 0?this.#h:this.#h=t[0]===""&&t.length>1||this.isDrive()||this.isUNC()}root(){let t=this.#t[0];return typeof t=="string"&&this.isAbsolute()&&this.#r===0?t:""}checkFollowGlobstar(){return!(this.#r===0||!this.isGlobstar()||!this.#a)}markFollowGlobstar(){return this.#r===0||!this.isGlobstar()||!this.#a?!1:(this.#a=!1,!0)}};var ln=typeof process=="object"&&process&&typeof process.platform=="string"?process.platform:"linux",ct=class{relative;relativeChildren;absolute;absoluteChildren;platform;mmopts;constructor(t,{nobrace:e,nocase:s,noext:i,noglobstar:r,platform:o=ln}){this.relative=[],this.absolute=[],this.relativeChildren=[],this.absoluteChildren=[],this.platform=o,this.mmopts={dot:!0,nobrace:e,nocase:s,noext:i,noglobstar:r,optimizationLevel:2,platform:o,nocomment:!0,nonegate:!0};for(let h of t)this.add(h)}add(t){let e=new _(t,this.mmopts);for(let s=0;s<e.set.length;s++){let i=e.set[s],r=e.globParts[s];if(!i||!r)throw new Error("invalid pattern object");for(;i[0]==="."&&r[0]===".";)i.shift(),r.shift();let o=new lt(i,r,0,this.platform),h=new _(o.globString(),this.mmopts),a=r[r.length-1]==="**",l=o.isAbsolute();l?this.absolute.push(h):this.relative.push(h),a&&(l?this.absoluteChildren.push(h):this.relativeChildren.push(h))}}ignored(t){let e=t.fullpath(),s=`${e}/`,i=t.relative()||".",r=`${i}/`;for(let o of this.relative)if(o.match(i)||o.match(r))return!0;for(let o of this.absolute)if(o.match(e)||o.match(s))return!0;return!1}childrenIgnored(t){let e=t.fullpath()+"/",s=(t.relative()||".")+"/";for(let i of this.relativeChildren)if(i.match(s))return!0;for(let i of this.absoluteChildren)if(i.match(e))return!0;return!1}};var ge=class n{store;constructor(t=new Map){this.store=t}copy(){return new n(new Map(this.store))}hasWalked(t,e){return this.store.get(t.fullpath())?.has(e.globString())}storeWalked(t,e){let s=t.fullpath(),i=this.store.get(s);i?i.add(e.globString()):this.store.set(s,new Set([e.globString()]))}},we=class{store=new Map;add(t,e,s){let i=(e?2:0)|(s?1:0),r=this.store.get(t);this.store.set(t,r===void 0?i:i&r)}entries(){return[...this.store.entries()].map(([t,e])=>[t,!!(e&2),!!(e&1)])}},ye=class{store=new Map;add(t,e){if(!t.canReaddir())return;let s=this.store.get(t);s?s.find(i=>i.globString()===e.globString())||s.push(e):this.store.set(t,[e])}get(t){let e=this.store.get(t);if(!e)throw new Error("attempting to walk unknown path");return e}entries(){return this.keys().map(t=>[t,this.store.get(t)])}keys(){return[...this.store.keys()].filter(t=>t.canReaddir())}},Ct=class n{hasWalkedCache;matches=new we;subwalks=new ye;patterns;follow;dot;opts;constructor(t,e){this.opts=t,this.follow=!!t.follow,this.dot=!!t.dot,this.hasWalkedCache=e?e.copy():new ge}processPatterns(t,e){this.patterns=e;let s=e.map(i=>[t,i]);for(let[i,r]of s){this.hasWalkedCache.storeWalked(i,r);let o=r.root(),h=r.isAbsolute()&&this.opts.absolute!==!1;if(o){i=i.resolve(o==="/"&&this.opts.root!==void 0?this.opts.root:o);let f=r.rest();if(f)r=f;else{this.matches.add(i,!0,!1);continue}}if(i.isENOENT())continue;let a,l,c=!1;for(;typeof(a=r.pattern())=="string"&&(l=r.rest());)i=i.resolve(a),r=l,c=!0;if(a=r.pattern(),l=r.rest(),c){if(this.hasWalkedCache.hasWalked(i,r))continue;this.hasWalkedCache.storeWalked(i,r)}if(typeof a=="string"){let f=a===".."||a===""||a===".";this.matches.add(i.resolve(a),h,f);continue}else if(a===R){(!i.isSymbolicLink()||this.follow||r.checkFollowGlobstar())&&this.subwalks.add(i,r);let f=l?.pattern(),u=l?.rest();if(!l||(f===""||f===".")&&!u)this.matches.add(i,h,f===""||f===".");else if(f===".."){let d=i.parent||i;u?this.hasWalkedCache.hasWalked(d,u)||this.subwalks.add(d,u):this.matches.add(d,h,!0)}}else a instanceof RegExp&&this.subwalks.add(i,r)}return this}subwalkTargets(){return this.subwalks.keys()}child(){return new n(this.opts,this.hasWalkedCache)}filterEntries(t,e){let s=this.subwalks.get(t),i=this.child();for(let r of e)for(let o of s){let h=o.isAbsolute(),a=o.pattern(),l=o.rest();a===R?i.testGlobstar(r,o,l,h):a instanceof RegExp?i.testRegExp(r,a,l,h):i.testString(r,a,l,h)}return i}testGlobstar(t,e,s,i){if((this.dot||!t.name.startsWith("."))&&(e.hasMore()||this.matches.add(t,i,!1),t.canReaddir()&&(this.follow||!t.isSymbolicLink()?this.subwalks.add(t,e):t.isSymbolicLink()&&(s&&e.checkFollowGlobstar()?this.subwalks.add(t,s):e.markFollowGlobstar()&&this.subwalks.add(t,e)))),s){let r=s.pattern();if(typeof r=="string"&&r!==".."&&r!==""&&r!==".")this.testString(t,r,s.rest(),i);else if(r===".."){let o=t.parent||t;this.subwalks.add(o,s)}else r instanceof RegExp&&this.testRegExp(t,r,s.rest(),i)}}testRegExp(t,e,s,i){e.test(t.name)&&(s?this.subwalks.add(t,s):this.matches.add(t,i,!1))}testString(t,e,s,i){t.isNamed(e)&&(s?this.subwalks.add(t,s):this.matches.add(t,i,!1))}};var cn=(n,t)=>typeof n=="string"?new ct([n],t):Array.isArray(n)?new ct(n,t):n,qt=class{path;patterns;opts;seen=new Set;paused=!1;aborted=!1;#t=[];#e;#r;signal;maxDepth;includeChildMatches;constructor(t,e,s){if(this.patterns=t,this.path=e,this.opts=s,this.#r=!s.posix&&s.platform==="win32"?"\\":"/",this.includeChildMatches=s.includeChildMatches!==!1,(s.ignore||!this.includeChildMatches)&&(this.#e=cn(s.ignore??[],s),!this.includeChildMatches&&typeof this.#e.add!="function")){let i="cannot ignore child matches, ignore lacks add() method.";throw new Error(i)}this.maxDepth=s.maxDepth||1/0,s.signal&&(this.signal=s.signal,this.signal.addEventListener("abort",()=>{this.#t.length=0}))}#i(t){return this.seen.has(t)||!!this.#e?.ignored?.(t)}#o(t){return!!this.#e?.childrenIgnored?.(t)}pause(){this.paused=!0}resume(){if(this.signal?.aborted)return;this.paused=!1;let t;for(;!this.paused&&(t=this.#t.shift());)t()}onResume(t){this.signal?.aborted||(this.paused?this.#t.push(t):t())}async matchCheck(t,e){if(e&&this.opts.nodir)return;let s;if(this.opts.realpath){if(s=t.realpathCached()||await t.realpath(),!s)return;t=s}let r=t.isUnknown()||this.opts.stat?await t.lstat():t;if(this.opts.follow&&this.opts.nodir&&r?.isSymbolicLink()){let o=await r.realpath();o&&(o.isUnknown()||this.opts.stat)&&await o.lstat()}return this.matchCheckTest(r,e)}matchCheckTest(t,e){return t&&(this.maxDepth===1/0||t.depth()<=this.maxDepth)&&(!e||t.canReaddir())&&(!this.opts.nodir||!t.isDirectory())&&(!this.opts.nodir||!this.opts.follow||!t.isSymbolicLink()||!t.realpathCached()?.isDirectory())&&!this.#i(t)?t:void 0}matchCheckSync(t,e){if(e&&this.opts.nodir)return;let s;if(this.opts.realpath){if(s=t.realpathCached()||t.realpathSync(),!s)return;t=s}let r=t.isUnknown()||this.opts.stat?t.lstatSync():t;if(this.opts.follow&&this.opts.nodir&&r?.isSymbolicLink()){let o=r.realpathSync();o&&(o?.isUnknown()||this.opts.stat)&&o.lstatSync()}return this.matchCheckTest(r,e)}matchFinish(t,e){if(this.#i(t))return;if(!this.includeChildMatches&&this.#e?.add){let r=`${t.relativePosix()}/**`;this.#e.add(r)}let s=this.opts.absolute===void 0?e:this.opts.absolute;this.seen.add(t);let i=this.opts.mark&&t.isDirectory()?this.#r:"";if(this.opts.withFileTypes)this.matchEmit(t);else if(s){let r=this.opts.posix?t.fullpathPosix():t.fullpath();this.matchEmit(r+i)}else{let r=this.opts.posix?t.relativePosix():t.relative(),o=this.opts.dotRelative&&!r.startsWith(".."+this.#r)?"."+this.#r:"";this.matchEmit(r?o+r+i:"."+i)}}async match(t,e,s){let i=await this.matchCheck(t,s);i&&this.matchFinish(i,e)}matchSync(t,e,s){let i=this.matchCheckSync(t,s);i&&this.matchFinish(i,e)}walkCB(t,e,s){this.signal?.aborted&&s(),this.walkCB2(t,e,new Ct(this.opts),s)}walkCB2(t,e,s,i){if(this.#o(t))return i();if(this.signal?.aborted&&i(),this.paused){this.onResume(()=>this.walkCB2(t,e,s,i));return}s.processPatterns(t,e);let r=1,o=()=>{--r===0&&i()};for(let[h,a,l]of s.matches.entries())this.#i(h)||(r++,this.match(h,a,l).then(()=>o()));for(let h of s.subwalkTargets()){if(this.maxDepth!==1/0&&h.depth()>=this.maxDepth)continue;r++;let a=h.readdirCached();h.calledReaddir()?this.walkCB3(h,a,s,o):h.readdirCB((l,c)=>this.walkCB3(h,c,s,o),!0)}o()}walkCB3(t,e,s,i){s=s.filterEntries(t,e);let r=1,o=()=>{--r===0&&i()};for(let[h,a,l]of s.matches.entries())this.#i(h)||(r++,this.match(h,a,l).then(()=>o()));for(let[h,a]of s.subwalks.entries())r++,this.walkCB2(h,a,s.child(),o);o()}walkCBSync(t,e,s){this.signal?.aborted&&s(),this.walkCB2Sync(t,e,new Ct(this.opts),s)}walkCB2Sync(t,e,s,i){if(this.#o(t))return i();if(this.signal?.aborted&&i(),this.paused){this.onResume(()=>this.walkCB2Sync(t,e,s,i));return}s.processPatterns(t,e);let r=1,o=()=>{--r===0&&i()};for(let[h,a,l]of s.matches.entries())this.#i(h)||this.matchSync(h,a,l);for(let h of s.subwalkTargets()){if(this.maxDepth!==1/0&&h.depth()>=this.maxDepth)continue;r++;let a=h.readdirSync();this.walkCB3Sync(h,a,s,o)}o()}walkCB3Sync(t,e,s,i){s=s.filterEntries(t,e);let r=1,o=()=>{--r===0&&i()};for(let[h,a,l]of s.matches.entries())this.#i(h)||this.matchSync(h,a,l);for(let[h,a]of s.subwalks.entries())r++,this.walkCB2Sync(h,a,s.child(),o);o()}},At=class extends qt{matches=new Set;constructor(t,e,s){super(t,e,s)}matchEmit(t){this.matches.add(t)}async walk(){if(this.signal?.aborted)throw this.signal.reason;return this.path.isUnknown()&&await this.path.lstat(),await new Promise((t,e)=>{this.walkCB(this.path,this.patterns,()=>{this.signal?.aborted?e(this.signal.reason):t(this.matches)})}),this.matches}walkSync(){if(this.signal?.aborted)throw this.signal.reason;return this.path.isUnknown()&&this.path.lstatSync(),this.walkCBSync(this.path,this.patterns,()=>{if(this.signal?.aborted)throw this.signal.reason}),this.matches}},Rt=class extends qt{results;constructor(t,e,s){super(t,e,s),this.results=new X({signal:this.signal,objectMode:!0}),this.results.on("drain",()=>this.resume()),this.results.on("resume",()=>this.resume())}matchEmit(t){this.results.write(t),this.results.flowing||this.pause()}stream(){let t=this.path;return t.isUnknown()?t.lstat().then(()=>{this.walkCB(t,this.patterns,()=>this.results.end())}):this.walkCB(t,this.patterns,()=>this.results.end()),this.results}streamSync(){return this.path.isUnknown()&&this.path.lstatSync(),this.walkCBSync(this.path,this.patterns,()=>this.results.end()),this.results}};var un=typeof process=="object"&&process&&typeof process.platform=="string"?process.platform:"linux",U=class{absolute;cwd;root;dot;dotRelative;follow;ignore;magicalBraces;mark;matchBase;maxDepth;nobrace;nocase;nodir;noext;noglobstar;pattern;platform;realpath;scurry;stat;signal;windowsPathsNoEscape;withFileTypes;includeChildMatches;opts;patterns;constructor(t,e){if(!e)throw new TypeError("glob options required");if(this.withFileTypes=!!e.withFileTypes,this.signal=e.signal,this.follow=!!e.follow,this.dot=!!e.dot,this.dotRelative=!!e.dotRelative,this.nodir=!!e.nodir,this.mark=!!e.mark,e.cwd?(e.cwd instanceof URL||e.cwd.startsWith("file://"))&&(e.cwd=fn(e.cwd)):this.cwd="",this.cwd=e.cwd||"",this.root=e.root,this.magicalBraces=!!e.magicalBraces,this.nobrace=!!e.nobrace,this.noext=!!e.noext,this.realpath=!!e.realpath,this.absolute=e.absolute,this.includeChildMatches=e.includeChildMatches!==!1,this.noglobstar=!!e.noglobstar,this.matchBase=!!e.matchBase,this.maxDepth=typeof e.maxDepth=="number"?e.maxDepth:1/0,this.stat=!!e.stat,this.ignore=e.ignore,this.withFileTypes&&this.absolute!==void 0)throw new Error("cannot set absolute and withFileTypes:true");if(typeof t=="string"&&(t=[t]),this.windowsPathsNoEscape=!!e.windowsPathsNoEscape||e.allowWindowsEscape===!1,this.windowsPathsNoEscape&&(t=t.map(a=>a.replace(/\\/g,"/"))),this.matchBase){if(e.noglobstar)throw new TypeError("base matching requires globstar");t=t.map(a=>a.includes("/")?a:`./**/${a}`)}if(this.pattern=t,this.platform=e.platform||un,this.opts={...e,platform:this.platform},e.scurry){if(this.scurry=e.scurry,e.nocase!==void 0&&e.nocase!==e.scurry.nocase)throw new Error("nocase option contradicts provided scurry option")}else{let a=e.platform==="win32"?ht:e.platform==="darwin"?Tt:e.platform?at:Es;this.scurry=new a(this.cwd,{nocase:e.nocase,fs:e.fs})}this.nocase=this.scurry.nocase;let s=this.platform==="darwin"||this.platform==="win32",i={...e,dot:this.dot,matchBase:this.matchBase,nobrace:this.nobrace,nocase:this.nocase,nocaseMagicOnly:s,nocomment:!0,noext:this.noext,nonegate:!0,optimizationLevel:2,platform:this.platform,windowsPathsNoEscape:this.windowsPathsNoEscape,debug:!!this.opts.debug},r=this.pattern.map(a=>new _(a,i)),[o,h]=r.reduce((a,l)=>(a[0].push(...l.set),a[1].push(...l.globParts),a),[[],[]]);this.patterns=o.map((a,l)=>{let c=h[l];if(!c)throw new Error("invalid pattern object");return new lt(a,c,0,this.platform)})}async walk(){return[...await new At(this.patterns,this.scurry.cwd,{...this.opts,maxDepth:this.maxDepth!==1/0?this.maxDepth+this.scurry.cwd.depth():1/0,platform:this.platform,nocase:this.nocase,includeChildMatches:this.includeChildMatches}).walk()]}walkSync(){return[...new At(this.patterns,this.scurry.cwd,{...this.opts,maxDepth:this.maxDepth!==1/0?this.maxDepth+this.scurry.cwd.depth():1/0,platform:this.platform,nocase:this.nocase,includeChildMatches:this.includeChildMatches}).walkSync()]}stream(){return new Rt(this.patterns,this.scurry.cwd,{...this.opts,maxDepth:this.maxDepth!==1/0?this.maxDepth+this.scurry.cwd.depth():1/0,platform:this.platform,nocase:this.nocase,includeChildMatches:this.includeChildMatches}).stream()}streamSync(){return new Rt(this.patterns,this.scurry.cwd,{...this.opts,maxDepth:this.maxDepth!==1/0?this.maxDepth+this.scurry.cwd.depth():1/0,platform:this.platform,nocase:this.nocase,includeChildMatches:this.includeChildMatches}).streamSync()}iterateSync(){return this.streamSync()[Symbol.iterator]()}[Symbol.iterator](){return this.iterateSync()}iterate(){return this.stream()[Symbol.asyncIterator]()}[Symbol.asyncIterator](){return this.iterate()}};var be=(n,t={})=>{Array.isArray(n)||(n=[n]);for(let e of n)if(new _(e,t).hasMagic())return!0;return!1};function Jt(n,t={}){return new U(n,t).streamSync()}function Ts(n,t={}){return new U(n,t).stream()}function Kt(n,t={}){return new U(n,t).walkSync()}async function vs(n,t={}){return new U(n,t).walk()}function Vt(n,t={}){return new U(n,t).iterateSync()}function Cs(n,t={}){return new U(n,t).iterate()}var dn=Jt,pn=Object.assign(Ts,{sync:Jt}),mn=Vt,gn=Object.assign(Cs,{sync:Vt}),wn=Object.assign(Kt,{stream:Jt,iterate:Vt}),xs=Object.assign(vs,{glob:vs,globSync:Kt,sync:wn,globStream:Ts,stream:pn,globStreamSync:Jt,streamSync:dn,globIterate:Cs,iterate:gn,globIterateSync:Vt,iterateSync:mn,Glob:U,hasMagic:be,escape:st,unescape:P});xs.glob=xs;import yn from"node:fs";function As(n){return JSON.parse(yn.readFileSync(n).toString("utf-8"))}function Yt(n){return As(n)}function Se(n){return As(n)}function K(n){return(process.env[`INPUT_${n.toUpperCase()}`]||"").trim()}function Ee(n,t){return["true","True","TRUE"].includes(K(n)||t)}function ve(n,t){let e=K(n);return e===""?t:Number.parseInt(e,10)}function Rs(n){let t=bn(n);Xt.mkdirSync(Zt.join(kt.cwd(),n.analyzerDirectory),{recursive:!0});let e=Zt.join(kt.cwd(),n.analyzerDirectory,"bundle_analysis.json");Xt.writeFileSync(e,JSON.stringify(t,null,2)),ft.log(`Wrote ${e}`,t)}function xe(n){return n.metafiles.flatMap(t=>Kt(Zt.join(kt.cwd(),t),{nodir:!0}).map(e=>({relativePath:Zt.relative(kt.cwd(),e),absolutePath:e})))}function bn(n){let t={},e=xe(n),s=e.reduce((i,{relativePath:r,absolutePath:o})=>{try{Xt.accessSync(o,Xt.constants.R_OK)}catch{ft.error(`No meta file found at "${o}" - a path to meta file may be wrong, or esbuild is not executed.`),kt.exit(1)}let h=Yt(o);return Object.entries(h.outputs).reduce((a,l)=>{let[c,f]=l;return n.includeExtensions.some(u=>c.toLowerCase().endsWith(u))&&(a[`${r} -> ${c}`]={bytes:f.bytes,metafile:r,outfile:c}),a},i),i},t);return ft.log("Found metafiles",e),ft.log("Found result",s),s}function Ms(n){let t=!1,e=`## \u{1F4E6} esbuild Bundle Analysis for ${n.name}

This analysis was generated by [esbuild-bundle-analyzer](https://github.com/exoego/esbuild-bundle-analyzer). \u{1F916}
`,s=Ft.join(process.cwd(),n.analyzerDirectory,"bundle_analysis.json"),i=Se(s);N.log(`Current analysis found in ${s}`,i);let r=vn(n),o=xn(n),a=[...new Set([...Object.keys(i),...Object.keys(r)])].sort().map(l=>{let c=i[l],f=r[l];if(N.log("Comparing",l,c,f),!c)return N.log("Deleted file",l),t=!0,{...f,baseBytes:0,remark:"deleted",tree:void 0};let u=o.get(Os(c.metafile,c.outfile));if(!f)return N.log("New file",l),t=!0,{...c,baseBytes:0,remark:"added",tree:u};let d=c.bytes-f.bytes;return d!==0?(N.log("Changed file",l,d),t=!0):N.log("No change",l),{...c,baseBytes:f.bytes,tree:u,remark:d===0?"no-change":Math.sign(d)?"increased":"decreased"}});N.log("Comparison done.",a),t?(e+=Cn(a,n.includeSizeComparison,n.percentExtraAttention),e+=An(a,n.includeSizeComparison,n.percentExtraAttention),e+=kn(a,n.topNLargestPaths),e+=En(n)):e+="This PR introduced no changes to the esbuild bundle! \u{1F64C}",e=`<!-- __ESBUILD_BUNDLE_${n.name} -->
${e}`,Sn(n,e)}function Os(n,t){return`${n} -> ${t}`}function Sn(n,t){N.log("Writing comment to file.",t),Ce.mkdirSync(Ft.join(process.cwd(),n.analyzerDirectory),{recursive:!0}),Ce.writeFileSync(Ft.join(process.cwd(),n.analyzerDirectory,"bundle_analysis_comment.txt"),t.trim())}function En(n){return n.showDetails?`
<details>
<summary>Details</summary>
<p>Next to the size is how much the size has increased or decreased compared with the base branch of this PR.</p>
<ul>
<li>\u203C\uFE0F: Size increased by ${n.percentExtraAttention}% or more. Special attention should be given to this.</li>
<li>\u26A0\uFE0F: Size increased in acceptable range (lower than ${n.percentExtraAttention}%).</li>
<li>\u2705: No change or even downsized.</li>
<li>\u{1F5D1}\uFE0F: The out file is deleted: not found in base branch.</li>
<li>\u{1F195}: The out file is newly found: will be added to base branch.</li>
</ul>
</details>
`:""}function vn(n){try{let t=Ft.join(process.cwd(),n.analyzerDirectory,"base/bundle/bundle_analysis.json"),e=Se(t);return N.info(`Base analysis found in ${t}`,e),e}catch{return N.warn("No base analysis found. First setup or all artifacts are expired."),{}}}function xn(n){function t(i){let r={name:"",path:"",value:0,children:[]};for(let[o,{bytesInOutput:h}]of Object.entries(i)){let a=o.split("/");e(r,a,h)}return r}function e(i,r,o){let h=r.shift();if(h===void 0){i.value+=o;return}let a=i.children.find(l=>l.name===h);a||(a={name:h,path:`${i.path}/${h}`.replace(/^\//,""),value:0,children:[]},i.children.push(a)),i.value+=o,e(a,r,o)}let s=new Map;if(n.topNLargestPaths<=0)return s;for(let{relativePath:i,absolutePath:r}of xe(n)){let o=Yt(r);for(let[h,a]of Object.entries(o.outputs)){let l=t(a.inputs);s.set(Os(i,h),l),Ce.writeFileSync(Ft.join(process.cwd(),n.analyzerDirectory,"tree.json"),JSON.stringify(l,null,2))}}return s}var Qt="\xA0";function Ae(n){let t=n<0?"-":"",e=Math.abs(n);if(e<1e3)return`${t}${e}${Qt}B`;if(e<1e3*1e3)return`${t}${(e/1e3).toFixed(2)}${Qt}KB`;if(e<1e3*1e3*1e3)return`${t}${(e/1e3/1e3).toFixed(2)}${Qt}MB`;if(e<1e3*1e3*1e3*1e3)return`${t}${(e/1e3/1e3/1e3).toFixed(2)}${Qt}GB`;throw new Error("Too large file size!! Are you sure?")}function Tn(n){let t=n.reduce((e,s)=>{let{bytes:i,baseBytes:r,...o}=e;return{...o,baseBytes:r+s.baseBytes,bytes:i+s.bytes}},{baseBytes:0,bytes:0,metafile:"(Total)",outfile:"-",remark:"added",tree:void 0});return t.remark=t.bytes===t.baseBytes?"no-change":t.bytes>t.baseBytes?"increased":"decreased",t}function Cn(n,t,e){let s=t.has("total")?[Tn(n)]:[],i=n.filter(o=>t.has(o.remark));return`
Meta File | Out File  | Size (raw) | Note
----------|----------|-----------:|------
${[...s,...i].map(o=>`${o.metafile} | ${o.outfile} | ${Ds(o)} | ${Ns(o,e)}
`).join("")}`}function An(n,t,e){let s=n.filter(r=>!t.has(r.remark)),i=s.map(r=>`${r.metafile} | ${r.outfile} | ${Ds(r)} | ${Ns(r,e)}<!-- HIDDEN -->
`).join("");return s.length===0?"":`
<details>
<summary>${s.length} bundles are hidden since not listed in include_size_comparison.</summary>    

Meta File | Out File  | Size (raw) | Note 
----------|----------|-----------:|------
${i}

</details>
`}function Rn(n,t){let e=[],s=[{node:n,depth:0}];for(;s.length>0;){let r=s.shift();if(!r)break;let{node:o,depth:h}=r;if(h===3){e.push(o);continue}if(o.children.length===0)e.push(o);else for(let a of o.children)s.push({node:a,depth:h+1})}return{largeNodes:e.sort((r,o)=>o.value-r.value).slice(0,t),hasOther:e.length>t}}function ks(n,t){return Number.parseFloat((n/t*100).toFixed(1))}function kn(n,t){if(n.length===0||t<=0)return"";let e="";e+=`<details>
`,e+=`<summary>Largest paths</summary>
`,e+=`These visualization shows top ${t} largest paths in the bundle.
`;for(let s of n){if(e+=`
`,e+=`## Meta file: ${s.metafile}, Out file: ${s.outfile}
`,!s.tree){e+=`\uFE0F\uFE0F\u{1F5D1}\uFE0FDeleted
`;continue}e+=`| Path | Size |
`,e+=`|------|-------|
`;let i=s.tree.value,{largeNodes:r,hasOther:o}=Rn(s.tree,t);for(let{path:h,value:a}of r){let l=ks(a,i);e+=`| ${h} | ${Fs(l,a)} |
`}if(o){let h=i-r[0].value,a=ks(h,i);e+=`| (other) | ${Fs(a,h)} |
`}}return e+=`</details>
`,e}function Fs(n,t){return`\${{\\color{Goldenrod}{ ${Fn(n/100)} }}}$ ${n.toFixed(1)}%, ${Ae(t)}`}var _s=["","\u258F","\u258E","\u258D","\u258C","\u258B","\u258A","\u2589","\u2588"],Te=1/(_s.length-1);function Fn(n,t=25,e=0,s=1){let i=n*t,r=Math.floor(i),o=i-r,h=Math.round(Te*Math.floor(o/Te)/Te);return"\u2588".repeat(r)+_s[h]}function Ds(n){return Ae(n.bytes)}function Ns(n,t){if(n.remark==="deleted")return"\u{1F5D1}\uFE0F Deleted";if(n.remark==="added")return"\u{1F195} Added";if(n.remark==="no-change"||n.baseBytes===0)return"\u2705  No change";let e=n.bytes-n.baseBytes,s=e/n.baseBytes*100;return`${Mn(s,t)}${Ae(e)} (${zs(s)}${s.toFixed(1)}%)`}function zs(n){return n<0?"":"+"}function Mn(n,t){let e;return n>0&&n<t?e="\u26A0\uFE0F":n>=t?e="\u203C\uFE0F":e="\u2705 ",`${e} ${zs(n)}`}function _n(){let n=K("metafiles");if(!n)throw new Error("metafiles is not specified");let t=K("name");if(!t)throw new Error("name is not specified");let e=new Set((K("include_size_comparison")||"added, deleted, increased, decreased, no-change").split(",").map(i=>{switch(i.trim()){case"added":case"deleted":case"increased":case"decreased":case"total":case"no-change":return i.trim();default:throw new Error(`Unknown size comparison filter: ${i}`)}}));return K("show_no_change")!==""&&(Ee("show_no_change","true")?(e.add("no-change"),Ls.log("`show_no_change: true` is deprecated. Instead, remove `no-change` from the `include_size_comparison` list.")):(e.delete("no-change"),Ls.log("`show_no_change: false` is deprecated. Instead, add `no-change` to the `include_size_comparison` list."))),{percentExtraAttention:ve("percent_extra_attention",20),showDetails:Ee("show_details","true"),topNLargestPaths:ve("top_n_largest_paths",20),includeExtensions:(K("include_extensions")||".js,.mjs,.cjs").split(","),includeSizeComparison:e,name:t,analyzerDirectory:K("analyze_directory")||".analyzer",metafiles:n.split(",")}}function Dn(n=_n()){Rs(n),Ms(n)}import.meta.url===On(process.argv[1]).href&&Dn();export{Dn as run};
//# sourceMappingURL=data:application/json;base64,
