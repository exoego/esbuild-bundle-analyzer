// src/index.ts
import { pathToFileURL } from "node:url";

// src/compare.ts
import fs2 from "node:fs";
import path from "node:path";

// node_modules/filesize/dist/filesize.esm.js
var ARRAY = "array";
var BIT = "bit";
var BITS = "bits";
var BYTE = "byte";
var BYTES = "bytes";
var EMPTY = "";
var EXPONENT = "exponent";
var FUNCTION = "function";
var IEC = "iec";
var INVALID_NUMBER = "Invalid number";
var INVALID_ROUND = "Invalid rounding method";
var JEDEC = "jedec";
var OBJECT = "object";
var PERIOD = ".";
var ROUND = "round";
var S = "s";
var SI = "si";
var SI_KBIT = "kbit";
var SI_KBYTE = "kB";
var SPACE = " ";
var STRING = "string";
var ZERO = "0";
var STRINGS = {
  symbol: {
    iec: {
      bits: ["bit", "Kibit", "Mibit", "Gibit", "Tibit", "Pibit", "Eibit", "Zibit", "Yibit"],
      bytes: ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"]
    },
    jedec: {
      bits: ["bit", "Kbit", "Mbit", "Gbit", "Tbit", "Pbit", "Ebit", "Zbit", "Ybit"],
      bytes: ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]
    }
  },
  fullform: {
    iec: ["", "kibi", "mebi", "gibi", "tebi", "pebi", "exbi", "zebi", "yobi"],
    jedec: ["", "kilo", "mega", "giga", "tera", "peta", "exa", "zetta", "yotta"]
  }
};
function filesize(arg, {
  bits = false,
  pad = false,
  base = -1,
  round = 2,
  locale = EMPTY,
  localeOptions = {},
  separator = EMPTY,
  spacer = SPACE,
  symbols = {},
  standard = EMPTY,
  output = STRING,
  fullform = false,
  fullforms = [],
  exponent = -1,
  roundingMethod = ROUND,
  precision = 0
} = {}) {
  let e = exponent, num = Number(arg), result = [], val = 0, u = EMPTY;
  if (standard === SI) {
    base = 10;
    standard = JEDEC;
  } else if (standard === IEC || standard === JEDEC) {
    base = 2;
  } else if (base === 2) {
    standard = IEC;
  } else {
    base = 10;
    standard = JEDEC;
  }
  const ceil = base === 10 ? 1e3 : 1024, full = fullform === true, neg = num < 0, roundingFunc = Math[roundingMethod];
  if (typeof arg !== "bigint" && isNaN(arg)) {
    throw new TypeError(INVALID_NUMBER);
  }
  if (typeof roundingFunc !== FUNCTION) {
    throw new TypeError(INVALID_ROUND);
  }
  if (neg) {
    num = -num;
  }
  if (e === -1 || isNaN(e)) {
    e = Math.floor(Math.log(num) / Math.log(ceil));
    if (e < 0) {
      e = 0;
    }
  }
  if (e > 8) {
    if (precision > 0) {
      precision += 8 - e;
    }
    e = 8;
  }
  if (output === EXPONENT) {
    return e;
  }
  if (num === 0) {
    result[0] = 0;
    u = result[1] = STRINGS.symbol[standard][bits ? BITS : BYTES][e];
  } else {
    val = num / (base === 2 ? Math.pow(2, e * 10) : Math.pow(1e3, e));
    if (bits) {
      val = val * 8;
      if (val >= ceil && e < 8) {
        val = val / ceil;
        e++;
      }
    }
    const p = Math.pow(10, e > 0 ? round : 0);
    result[0] = roundingFunc(val * p) / p;
    if (result[0] === ceil && e < 8 && exponent === -1) {
      result[0] = 1;
      e++;
    }
    u = result[1] = base === 10 && e === 1 ? bits ? SI_KBIT : SI_KBYTE : STRINGS.symbol[standard][bits ? BITS : BYTES][e];
  }
  if (neg) {
    result[0] = -result[0];
  }
  if (precision > 0) {
    result[0] = result[0].toPrecision(precision);
  }
  result[1] = symbols[result[1]] || result[1];
  if (locale === true) {
    result[0] = result[0].toLocaleString();
  } else if (locale.length > 0) {
    result[0] = result[0].toLocaleString(locale, localeOptions);
  } else if (separator.length > 0) {
    result[0] = result[0].toString().replace(PERIOD, separator);
  }
  if (pad && Number.isInteger(result[0]) === false && round > 0) {
    const x = separator || PERIOD, tmp = result[0].toString().split(x), s = tmp[1] || EMPTY, l = s.length, n = round - l;
    result[0] = `${tmp[0]}${x}${s.padEnd(l + n, ZERO)}`;
  }
  if (full) {
    result[1] = fullforms[e] ? fullforms[e] : STRINGS.fullform[standard][e] + (bits ? BIT : BYTE) + (result[0] === 1 ? EMPTY : S);
  }
  return output === ARRAY ? result : output === OBJECT ? {
    value: result[0],
    symbol: result[1],
    exponent: e,
    unit: u
  } : result.join(spacer);
}

// src/utils.ts
import fs from "node:fs";
function loadJsonFile(path3) {
  return JSON.parse(fs.readFileSync(path3).toString("utf-8"));
}
function loadMetaFile(path3) {
  return loadJsonFile(path3);
}
function loadAnalysisJson(path3) {
  return loadJsonFile(path3);
}
function getInput(name) {
  const val = process.env[`INPUT_${name.toUpperCase()}`] || "";
  return val.trim();
}

// src/compare.ts
function compare(input) {
  let hasAnyChange = false;
  let output = `## \u{1F4E6} esbuild Bundle Analysis for ${input.name}

This analysis was generated by [esbuild-bundle-analyzer](https://github.com/exoego/esbuild-bundle-analyzer). \u{1F916}
`;
  const current = loadAnalysisJson(
    path.join(process.cwd(), input.analyzerDirectory, "bundle_analysis.json")
  );
  let base;
  try {
    base = loadAnalysisJson(
      path.join(
        process.cwd(),
        input.analyzerDirectory,
        "base/bundle/bundle_analysis.json"
      )
    );
  } catch (e) {
    base = {};
  }
  const allOutFiles = [
    .../* @__PURE__ */ new Set([...Object.keys(current), ...Object.keys(base)])
  ].sort();
  const comparison = allOutFiles.map((outfile) => {
    const currentStats = current[outfile];
    const baseStats = base[outfile];
    if (!currentStats) {
      hasAnyChange = true;
      return { ...baseStats, diff: -1, remark: "deleted" };
    }
    if (!baseStats) {
      hasAnyChange = true;
      return { ...currentStats, diff: -1, remark: "added" };
    }
    const diff = currentStats.bytes - baseStats.bytes;
    const increase = !!Math.sign(diff);
    if (diff !== 0) {
      hasAnyChange = true;
    }
    return {
      ...currentStats,
      diff,
      remark: increase ? "increased" : "decreased"
    };
  });
  if (hasAnyChange) {
    output += markdownTable(comparison, input.budgetPercentIncreaseRed);
    if (input.showDetails) {
      output += `
<details>
<summary>Details</summary>
<p>Next to the size is how much the size has increased or decreased compared with the base branch of this PR.</p>
<ul>
<li>\u203C\uFE0F: Size increased by ${input.budgetPercentIncreaseRed}% or more. Special attention should be given to this.</li>
<li>\u26A0\uFE0F: Size increased in acceptable range (lower than ${input.budgetPercentIncreaseRed}%).</li>
<li>\u2705: No change or even downsized.</li>
<li>\u{1F5D1}\uFE0F: The out file is deleted: not found in base branch.</li>
<li>\u{1F195}: The out file is newly found: will be added to base branch.</li>
</ul>
</details>
`;
    }
  } else {
    output += "This PR introduced no changes to the esbuild bundle! \u{1F64C}";
  }
  output += `<!-- __ESBUILD_BUNDLE_${input.name} -->`;
  if (!hasAnyChange && input.skipCommentIfEmpty) {
    output = "";
  }
  console.log(output);
  fs2.mkdirSync(path.join(process.cwd(), input.analyzerDirectory), {
    recursive: true
  });
  fs2.writeFileSync(
    path.join(
      process.cwd(),
      input.analyzerDirectory,
      "bundle_analysis_comment.txt"
    ),
    output.trim()
  );
}
function filesize2(bytes) {
  return filesize(bytes, {
    spacer: "\xA0"
  });
}
function markdownTable(data, redThreshold) {
  const rows = data.map((d) => {
    return `${d.metafile} | ${d.outfile} | ${renderSize(d)} | ${renderNote(
      d,
      redThreshold
    )}
`;
  }).join("");
  return `
Meta File | Out File  | Size (raw) | Note 
----------|----------|-----------:|------
${rows}`;
}
function renderSize(d) {
  return filesize2(d.bytes);
}
function renderNote(d, redThreshold) {
  if (d.remark === "deleted") {
    return "\u{1F5D1}\uFE0F Deleted";
  }
  if (d.remark === "added") {
    return "\u{1F195} Added";
  }
  if (d.diff) {
    const percentChange = d.diff / d.bytes * 100;
    return `${renderStatusIndicator(percentChange, redThreshold)}${filesize2(
      d.diff
    )} (${sign(percentChange)}${percentChange.toFixed(1)}%)`;
  }
  return "\u2705  No change";
}
function sign(num) {
  return num < 0 ? "" : "+";
}
function renderStatusIndicator(percentChange, redThreshold) {
  let res;
  if (percentChange > 0 && percentChange < redThreshold) {
    res = "\u26A0\uFE0F";
  } else if (percentChange >= redThreshold) {
    res = "\u203C\uFE0F";
  } else {
    res = "\u2705 ";
  }
  return `${res} ${sign(percentChange)}`;
}

// src/report.ts
import fs3 from "node:fs";
import path2 from "node:path";
import process2 from "node:process";
function report(input) {
  const allPageSizes = getAllPageSizes(input);
  fs3.mkdirSync(path2.join(process2.cwd(), input.analyzerDirectory), {
    recursive: true
  });
  const resultJsonPath = path2.join(
    process2.cwd(),
    input.analyzerDirectory,
    "bundle_analysis.json"
  );
  fs3.writeFileSync(resultJsonPath, JSON.stringify(allPageSizes, null, 2));
  console.log(`Wrote ${resultJsonPath}`);
}
function getAllPageSizes(input) {
  const acc = {};
  return input.metafiles.reduce((acc2, metafile) => {
    const metaFilePath = path2.join(process2.cwd(), metafile);
    try {
      fs3.accessSync(metaFilePath, fs3.constants.R_OK);
    } catch (err) {
      console.error(
        `No meta file found at "${metaFilePath}" - a path to meta file may be wrong, or esbuild is not executed.`
      );
      process2.exit(1);
    }
    const metaFileJson = loadMetaFile(metaFilePath);
    Object.entries(metaFileJson.outputs).reduce((acc3, output) => {
      const [outfile, buildMeta] = output;
      acc3[`${metafile} -> ${outfile}`] = {
        bytes: buildMeta.bytes,
        metafile,
        outfile
      };
      return acc3;
    }, acc2);
    return acc2;
  }, acc);
}

// src/index.ts
function getOptions() {
  const rawMetafiles = getInput("metafiles");
  if (!rawMetafiles) {
    throw new Error("metafiles is not specified");
  }
  const name = getInput("name");
  if (!name) {
    throw new Error("name is not specified");
  }
  return {
    budgetPercentIncreaseRed: Number.parseInt(
      getInput("budget_percent_increase_red") || "20",
      10
    ),
    showDetails: ["true", "True", "TRUE"].includes(
      getInput("show_details") || "true"
    ),
    skipCommentIfEmpty: ["false", "False", "FALSE"].includes(
      getInput("skip_comment_if_empty") || "false"
    ),
    name,
    analyzerDirectory: getInput("analyze_directory") || ".analyzer",
    metafiles: rawMetafiles.split(",")
  };
}
function run(options = getOptions()) {
  report(options);
  compare(options);
}
if (import.meta.url === pathToFileURL(process.argv[1]).href) {
  run();
}
export {
  run
};
/*! Bundled license information:

filesize/dist/filesize.esm.js:
  (**
   * filesize
   *
   * @copyright 2024 Jason Mulligan <jason.mulligan@avoidwork.com>
   * @license BSD-3-Clause
   * @version 10.1.1
   *)
*/
//# sourceMappingURL=data:application/json;base64,
