import ks from"node:console";import{pathToFileURL as An}from"node:url";import*as _ from"node:console";import Te from"node:fs";import Rt from"node:path";import Vt from"node:fs";import Yt from"node:path";import At from"node:process";import*as lt from"node:console";var Qt=(r,t,e)=>{let s=r instanceof RegExp?ke(r,e):r,i=t instanceof RegExp?ke(t,e):t,n=s!==null&&i!=null&&Fs(s,i,e);return n&&{start:n[0],end:n[1],pre:e.slice(0,n[0]),body:e.slice(n[0]+s.length,n[1]),post:e.slice(n[1]+i.length)}},ke=(r,t)=>{let e=t.match(r);return e?e[0]:null},Fs=(r,t,e)=>{let s,i,n,o,h,a=e.indexOf(r),l=e.indexOf(t,a+1),c=a;if(a>=0&&l>0){if(r===t)return[a,l];for(s=[],n=e.length;c>=0&&!h;){if(c===a)s.push(c),a=e.indexOf(r,c+1);else if(s.length===1){let f=s.pop();f!==void 0&&(h=[f,l])}else i=s.pop(),i!==void 0&&i<n&&(n=i,o=l),l=e.indexOf(t,c+1);c=a<l&&a>=0?a:l}s.length&&o!==void 0&&(h=[n,o])}return h};var Fe="\0SLASH"+Math.random()+"\0",Oe="\0OPEN"+Math.random()+"\0",ee="\0CLOSE"+Math.random()+"\0",Me="\0COMMA"+Math.random()+"\0",Ne="\0PERIOD"+Math.random()+"\0",Os=new RegExp(Fe,"g"),Ms=new RegExp(Oe,"g"),Ns=new RegExp(ee,"g"),_s=new RegExp(Me,"g"),Ds=new RegExp(Ne,"g"),zs=/\\\\/g,Ls=/\\{/g,Ps=/\\}/g,Is=/\\,/g,$s=/\\./g;function te(r){return isNaN(r)?r.charCodeAt(0):parseInt(r,10)}function js(r){return r.replace(zs,Fe).replace(Ls,Oe).replace(Ps,ee).replace(Is,Me).replace($s,Ne)}function Bs(r){return r.replace(Os,"\\").replace(Ms,"{").replace(Ns,"}").replace(_s,",").replace(Ds,".")}function _e(r){if(!r)return[""];let t=[],e=Qt("{","}",r);if(!e)return r.split(",");let{pre:s,body:i,post:n}=e,o=s.split(",");o[o.length-1]+="{"+i+"}";let h=_e(n);return n.length&&(o[o.length-1]+=h.shift(),o.push.apply(o,h)),t.push.apply(t,o),t}function De(r){return r?(r.slice(0,2)==="{}"&&(r="\\{\\}"+r.slice(2)),ct(js(r),!0).map(Bs)):[]}function Ws(r){return"{"+r+"}"}function Us(r){return/^-?0\d/.test(r)}function Gs(r,t){return r<=t}function Hs(r,t){return r>=t}function ct(r,t){let e=[],s=Qt("{","}",r);if(!s)return[r];let i=s.pre,n=s.post.length?ct(s.post,!1):[""];if(/\$$/.test(s.pre))for(let o=0;o<n.length;o++){let h=i+"{"+s.body+"}"+n[o];e.push(h)}else{let o=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(s.body),h=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(s.body),a=o||h,l=s.body.indexOf(",")>=0;if(!a&&!l)return s.post.match(/,(?!,).*\}/)?(r=s.pre+"{"+s.body+ee+s.post,ct(r)):[r];let c;if(a)c=s.body.split(/\.\./);else if(c=_e(s.body),c.length===1&&c[0]!==void 0&&(c=ct(c[0],!1).map(Ws),c.length===1))return n.map(u=>s.pre+c[0]+u);let f;if(a&&c[0]!==void 0&&c[1]!==void 0){let u=te(c[0]),d=te(c[1]),m=Math.max(c[0].length,c[1].length),p=c.length===3&&c[2]!==void 0?Math.abs(te(c[2])):1,w=Gs;d<u&&(p*=-1,w=Hs);let S=c.some(Us);f=[];for(let b=u;w(b,d);b+=p){let y;if(h)y=String.fromCharCode(b),y==="\\"&&(y="");else if(y=String(b),S){let E=m-y.length;if(E>0){let B=new Array(E+1).join("0");b<0?y="-"+B+y.slice(1):y=B+y}}f.push(y)}}else{f=[];for(let u=0;u<c.length;u++)f.push.apply(f,ct(c[u],!1))}for(let u=0;u<f.length;u++)for(let d=0;d<n.length;d++){let m=i+f[u]+n[d];(!t||a||m)&&e.push(m)}}return e}var ft=r=>{if(typeof r!="string")throw new TypeError("invalid pattern");if(r.length>65536)throw new TypeError("pattern is too long")};var qs={"[:alnum:]":["\\p{L}\\p{Nl}\\p{Nd}",!0],"[:alpha:]":["\\p{L}\\p{Nl}",!0],"[:ascii:]":["\\x00-\\x7f",!1],"[:blank:]":["\\p{Zs}\\t",!0],"[:cntrl:]":["\\p{Cc}",!0],"[:digit:]":["\\p{Nd}",!0],"[:graph:]":["\\p{Z}\\p{C}",!0,!0],"[:lower:]":["\\p{Ll}",!0],"[:print:]":["\\p{C}",!0],"[:punct:]":["\\p{P}",!0],"[:space:]":["\\p{Z}\\t\\r\\n\\v\\f",!0],"[:upper:]":["\\p{Lu}",!0],"[:word:]":["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}",!0],"[:xdigit:]":["A-Fa-f0-9",!1]},ut=r=>r.replace(/[[\]\\-]/g,"\\$&"),Js=r=>r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),ze=r=>r.join(""),Le=(r,t)=>{let e=t;if(r.charAt(e)!=="[")throw new Error("not in a brace expression");let s=[],i=[],n=e+1,o=!1,h=!1,a=!1,l=!1,c=e,f="";t:for(;n<r.length;){let p=r.charAt(n);if((p==="!"||p==="^")&&n===e+1){l=!0,n++;continue}if(p==="]"&&o&&!a){c=n+1;break}if(o=!0,p==="\\"&&!a){a=!0,n++;continue}if(p==="["&&!a){for(let[w,[g,S,b]]of Object.entries(qs))if(r.startsWith(w,n)){if(f)return["$.",!1,r.length-e,!0];n+=w.length,b?i.push(g):s.push(g),h=h||S;continue t}}if(a=!1,f){p>f?s.push(ut(f)+"-"+ut(p)):p===f&&s.push(ut(p)),f="",n++;continue}if(r.startsWith("-]",n+1)){s.push(ut(p+"-")),n+=2;continue}if(r.startsWith("-",n+1)){f=p,n+=2;continue}s.push(ut(p)),n++}if(c<n)return["",!1,0,!1];if(!s.length&&!i.length)return["$.",!1,r.length-e,!0];if(i.length===0&&s.length===1&&/^\\?.$/.test(s[0])&&!l){let p=s[0].length===2?s[0].slice(-1):s[0];return[Js(p),!1,c-e,!1]}let u="["+(l?"^":"")+ze(s)+"]",d="["+(l?"":"^")+ze(i)+"]";return[s.length&&i.length?"("+u+"|"+d+")":s.length?u:d,h,c-e,!0]};var P=(r,{windowsPathsNoEscape:t=!1}={})=>t?r.replace(/\[([^\/\\])\]/g,"$1"):r.replace(/((?!\\).|^)\[([^\/\\])\]/g,"$1$2").replace(/\\([^\/])/g,"$1");var Ks=new Set(["!","?","+","*","@"]),Pe=r=>Ks.has(r),Vs="(?!(?:^|/)\\.\\.?(?:$|/))",Ft="(?!\\.)",Ys=new Set(["[","."]),Xs=new Set(["..","."]),Zs=new Set("().*{}+?[]^$\\!"),Qs=r=>r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),se="[^/]",Ie=se+"*?",$e=se+"+?",Q=class r{type;#t;#e;#r=!1;#i=[];#o;#S;#l;#f=!1;#h;#a;#n=!1;constructor(t,e,s={}){this.type=t,t&&(this.#e=!0),this.#o=e,this.#t=this.#o?this.#o.#t:this,this.#h=this.#t===this?s:this.#t.#h,this.#l=this.#t===this?[]:this.#t.#l,t==="!"&&!this.#t.#f&&this.#l.push(this),this.#S=this.#o?this.#o.#i.length:0}get hasMagic(){if(this.#e!==void 0)return this.#e;for(let t of this.#i)if(typeof t!="string"&&(t.type||t.hasMagic))return this.#e=!0;return this.#e}toString(){return this.#a!==void 0?this.#a:this.type?this.#a=this.type+"("+this.#i.map(t=>String(t)).join("|")+")":this.#a=this.#i.map(t=>String(t)).join("")}#g(){if(this!==this.#t)throw new Error("should only call on root");if(this.#f)return this;this.toString(),this.#f=!0;let t;for(;t=this.#l.pop();){if(t.type!=="!")continue;let e=t,s=e.#o;for(;s;){for(let i=e.#S+1;!s.type&&i<s.#i.length;i++)for(let n of t.#i){if(typeof n=="string")throw new Error("string part in extglob AST??");n.copyIn(s.#i[i])}e=s,s=e.#o}}return this}push(...t){for(let e of t)if(e!==""){if(typeof e!="string"&&!(e instanceof r&&e.#o===this))throw new Error("invalid part: "+e);this.#i.push(e)}}toJSON(){let t=this.type===null?this.#i.slice().map(e=>typeof e=="string"?e:e.toJSON()):[this.type,...this.#i.map(e=>e.toJSON())];return this.isStart()&&!this.type&&t.unshift([]),this.isEnd()&&(this===this.#t||this.#t.#f&&this.#o?.type==="!")&&t.push({}),t}isStart(){if(this.#t===this)return!0;if(!this.#o?.isStart())return!1;if(this.#S===0)return!0;let t=this.#o;for(let e=0;e<this.#S;e++){let s=t.#i[e];if(!(s instanceof r&&s.type==="!"))return!1}return!0}isEnd(){if(this.#t===this||this.#o?.type==="!")return!0;if(!this.#o?.isEnd())return!1;if(!this.type)return this.#o?.isEnd();let t=this.#o?this.#o.#i.length:0;return this.#S===t-1}copyIn(t){typeof t=="string"?this.push(t):this.push(t.clone(this))}clone(t){let e=new r(this.type,t);for(let s of this.#i)e.copyIn(s);return e}static#w(t,e,s,i){let n=!1,o=!1,h=-1,a=!1;if(e.type===null){let d=s,m="";for(;d<t.length;){let p=t.charAt(d++);if(n||p==="\\"){n=!n,m+=p;continue}if(o){d===h+1?(p==="^"||p==="!")&&(a=!0):p==="]"&&!(d===h+2&&a)&&(o=!1),m+=p;continue}else if(p==="["){o=!0,h=d,a=!1,m+=p;continue}if(!i.noext&&Pe(p)&&t.charAt(d)==="("){e.push(m),m="";let w=new r(p,e);d=r.#w(t,w,d,i),e.push(w);continue}m+=p}return e.push(m),d}let l=s+1,c=new r(null,e),f=[],u="";for(;l<t.length;){let d=t.charAt(l++);if(n||d==="\\"){n=!n,u+=d;continue}if(o){l===h+1?(d==="^"||d==="!")&&(a=!0):d==="]"&&!(l===h+2&&a)&&(o=!1),u+=d;continue}else if(d==="["){o=!0,h=l,a=!1,u+=d;continue}if(Pe(d)&&t.charAt(l)==="("){c.push(u),u="";let m=new r(d,c);c.push(m),l=r.#w(t,m,l,i);continue}if(d==="|"){c.push(u),u="",f.push(c),c=new r(null,e);continue}if(d===")")return u===""&&e.#i.length===0&&(e.#n=!0),c.push(u),u="",e.push(...f,c),l;u+=d}return e.type=null,e.#e=void 0,e.#i=[t.substring(s-1)],l}static fromGlob(t,e={}){let s=new r(null,void 0,e);return r.#w(t,s,0,e),s}toMMPattern(){if(this!==this.#t)return this.#t.toMMPattern();let t=this.toString(),[e,s,i,n]=this.toRegExpSource();if(!(i||this.#e||this.#h.nocase&&!this.#h.nocaseMagicOnly&&t.toUpperCase()!==t.toLowerCase()))return s;let h=(this.#h.nocase?"i":"")+(n?"u":"");return Object.assign(new RegExp(`^${e}$`,h),{_src:e,_glob:t})}get options(){return this.#h}toRegExpSource(t){let e=t??!!this.#h.dot;if(this.#t===this&&this.#g(),!this.type){let a=this.isStart()&&this.isEnd(),l=this.#i.map(d=>{let[m,p,w,g]=typeof d=="string"?r.#u(d,this.#e,a):d.toRegExpSource(t);return this.#e=this.#e||w,this.#r=this.#r||g,m}).join(""),c="";if(this.isStart()&&typeof this.#i[0]=="string"&&!(this.#i.length===1&&Xs.has(this.#i[0]))){let m=Ys,p=e&&m.has(l.charAt(0))||l.startsWith("\\.")&&m.has(l.charAt(2))||l.startsWith("\\.\\.")&&m.has(l.charAt(4)),w=!e&&!t&&m.has(l.charAt(0));c=p?Vs:w?Ft:""}let f="";return this.isEnd()&&this.#t.#f&&this.#o?.type==="!"&&(f="(?:$|\\/)"),[c+l+f,P(l),this.#e=!!this.#e,this.#r]}let s=this.type==="*"||this.type==="+",i=this.type==="!"?"(?:(?!(?:":"(?:",n=this.#d(e);if(this.isStart()&&this.isEnd()&&!n&&this.type!=="!"){let a=this.toString();return this.#i=[a],this.type=null,this.#e=void 0,[a,P(this.toString()),!1,!1]}let o=!s||t||e||!Ft?"":this.#d(!0);o===n&&(o=""),o&&(n=`(?:${n})(?:${o})*?`);let h="";if(this.type==="!"&&this.#n)h=(this.isStart()&&!e?Ft:"")+$e;else{let a=this.type==="!"?"))"+(this.isStart()&&!e&&!t?Ft:"")+Ie+")":this.type==="@"?")":this.type==="?"?")?":this.type==="+"&&o?")":this.type==="*"&&o?")?":`)${this.type}`;h=i+n+a}return[h,P(n),this.#e=!!this.#e,this.#r]}#d(t){return this.#i.map(e=>{if(typeof e=="string")throw new Error("string type in extglob ast??");let[s,i,n,o]=e.toRegExpSource(t);return this.#r=this.#r||o,s}).filter(e=>!(this.isStart()&&this.isEnd())||!!e).join("|")}static#u(t,e,s=!1){let i=!1,n="",o=!1;for(let h=0;h<t.length;h++){let a=t.charAt(h);if(i){i=!1,n+=(Zs.has(a)?"\\":"")+a;continue}if(a==="\\"){h===t.length-1?n+="\\\\":i=!0;continue}if(a==="["){let[l,c,f,u]=Le(t,h);if(f){n+=l,o=o||c,h+=f-1,e=e||u;continue}}if(a==="*"){s&&t==="*"?n+=$e:n+=Ie,e=!0;continue}if(a==="?"){n+=se,e=!0;continue}n+=Qs(a)}return[n,P(t),!!e,o]}};var tt=(r,{windowsPathsNoEscape:t=!1}={})=>t?r.replace(/[?*()[\]]/g,"[$&]"):r.replace(/[?*()[\]\\]/g,"\\$&");var F=(r,t,e={})=>(ft(t),!e.nocomment&&t.charAt(0)==="#"?!1:new M(t,e).match(r)),ti=/^\*+([^+@!?\*\[\(]*)$/,ei=r=>t=>!t.startsWith(".")&&t.endsWith(r),si=r=>t=>t.endsWith(r),ii=r=>(r=r.toLowerCase(),t=>!t.startsWith(".")&&t.toLowerCase().endsWith(r)),ni=r=>(r=r.toLowerCase(),t=>t.toLowerCase().endsWith(r)),ri=/^\*+\.\*+$/,oi=r=>!r.startsWith(".")&&r.includes("."),hi=r=>r!=="."&&r!==".."&&r.includes("."),ai=/^\.\*+$/,li=r=>r!=="."&&r!==".."&&r.startsWith("."),ci=/^\*+$/,fi=r=>r.length!==0&&!r.startsWith("."),ui=r=>r.length!==0&&r!=="."&&r!=="..",di=/^\?+([^+@!?\*\[\(]*)?$/,pi=([r,t=""])=>{let e=We([r]);return t?(t=t.toLowerCase(),s=>e(s)&&s.toLowerCase().endsWith(t)):e},mi=([r,t=""])=>{let e=Ue([r]);return t?(t=t.toLowerCase(),s=>e(s)&&s.toLowerCase().endsWith(t)):e},gi=([r,t=""])=>{let e=Ue([r]);return t?s=>e(s)&&s.endsWith(t):e},wi=([r,t=""])=>{let e=We([r]);return t?s=>e(s)&&s.endsWith(t):e},We=([r])=>{let t=r.length;return e=>e.length===t&&!e.startsWith(".")},Ue=([r])=>{let t=r.length;return e=>e.length===t&&e!=="."&&e!==".."},Ge=typeof process=="object"&&process?typeof process.env=="object"&&process.env&&process.env.__MINIMATCH_TESTING_PLATFORM__||process.platform:"posix",je={win32:{sep:"\\"},posix:{sep:"/"}},yi=Ge==="win32"?je.win32.sep:je.posix.sep;F.sep=yi;var A=Symbol("globstar **");F.GLOBSTAR=A;var bi="[^/]",Si=bi+"*?",Ei="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",xi="(?:(?!(?:\\/|^)\\.).)*?",vi=(r,t={})=>e=>F(e,r,t);F.filter=vi;var D=(r,t={})=>Object.assign({},r,t),Ci=r=>{if(!r||typeof r!="object"||!Object.keys(r).length)return F;let t=F;return Object.assign((s,i,n={})=>t(s,i,D(r,n)),{Minimatch:class extends t.Minimatch{constructor(i,n={}){super(i,D(r,n))}static defaults(i){return t.defaults(D(r,i)).Minimatch}},AST:class extends t.AST{constructor(i,n,o={}){super(i,n,D(r,o))}static fromGlob(i,n={}){return t.AST.fromGlob(i,D(r,n))}},unescape:(s,i={})=>t.unescape(s,D(r,i)),escape:(s,i={})=>t.escape(s,D(r,i)),filter:(s,i={})=>t.filter(s,D(r,i)),defaults:s=>t.defaults(D(r,s)),makeRe:(s,i={})=>t.makeRe(s,D(r,i)),braceExpand:(s,i={})=>t.braceExpand(s,D(r,i)),match:(s,i,n={})=>t.match(s,i,D(r,n)),sep:t.sep,GLOBSTAR:A})};F.defaults=Ci;var He=(r,t={})=>(ft(r),t.nobrace||!/\{(?:(?!\{).)*\}/.test(r)?[r]:De(r));F.braceExpand=He;var Ti=(r,t={})=>new M(r,t).makeRe();F.makeRe=Ti;var Ai=(r,t,e={})=>{let s=new M(t,e);return r=r.filter(i=>s.match(i)),s.options.nonull&&!r.length&&r.push(t),r};F.match=Ai;var Be=/[?*]|[+@!]\(.*?\)|\[|\]/,Ri=r=>r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),M=class{options;set;pattern;windowsPathsNoEscape;nonegate;negate;comment;empty;preserveMultipleSlashes;partial;globSet;globParts;nocase;isWindows;platform;windowsNoMagicRoot;regexp;constructor(t,e={}){ft(t),e=e||{},this.options=e,this.pattern=t,this.platform=e.platform||Ge,this.isWindows=this.platform==="win32",this.windowsPathsNoEscape=!!e.windowsPathsNoEscape||e.allowWindowsEscape===!1,this.windowsPathsNoEscape&&(this.pattern=this.pattern.replace(/\\/g,"/")),this.preserveMultipleSlashes=!!e.preserveMultipleSlashes,this.regexp=null,this.negate=!1,this.nonegate=!!e.nonegate,this.comment=!1,this.empty=!1,this.partial=!!e.partial,this.nocase=!!this.options.nocase,this.windowsNoMagicRoot=e.windowsNoMagicRoot!==void 0?e.windowsNoMagicRoot:!!(this.isWindows&&this.nocase),this.globSet=[],this.globParts=[],this.set=[],this.make()}hasMagic(){if(this.options.magicalBraces&&this.set.length>1)return!0;for(let t of this.set)for(let e of t)if(typeof e!="string")return!0;return!1}debug(...t){}make(){let t=this.pattern,e=this.options;if(!e.nocomment&&t.charAt(0)==="#"){this.comment=!0;return}if(!t){this.empty=!0;return}this.parseNegate(),this.globSet=[...new Set(this.braceExpand())],e.debug&&(this.debug=(...n)=>console.error(...n)),this.debug(this.pattern,this.globSet);let s=this.globSet.map(n=>this.slashSplit(n));this.globParts=this.preprocess(s),this.debug(this.pattern,this.globParts);let i=this.globParts.map((n,o,h)=>{if(this.isWindows&&this.windowsNoMagicRoot){let a=n[0]===""&&n[1]===""&&(n[2]==="?"||!Be.test(n[2]))&&!Be.test(n[3]),l=/^[a-z]:/i.test(n[0]);if(a)return[...n.slice(0,4),...n.slice(4).map(c=>this.parse(c))];if(l)return[n[0],...n.slice(1).map(c=>this.parse(c))]}return n.map(a=>this.parse(a))});if(this.debug(this.pattern,i),this.set=i.filter(n=>n.indexOf(!1)===-1),this.isWindows)for(let n=0;n<this.set.length;n++){let o=this.set[n];o[0]===""&&o[1]===""&&this.globParts[n][2]==="?"&&typeof o[3]=="string"&&/^[a-z]:$/i.test(o[3])&&(o[2]="?")}this.debug(this.pattern,this.set)}preprocess(t){if(this.options.noglobstar)for(let s=0;s<t.length;s++)for(let i=0;i<t[s].length;i++)t[s][i]==="**"&&(t[s][i]="*");let{optimizationLevel:e=1}=this.options;return e>=2?(t=this.firstPhasePreProcess(t),t=this.secondPhasePreProcess(t)):e>=1?t=this.levelOneOptimize(t):t=this.adjascentGlobstarOptimize(t),t}adjascentGlobstarOptimize(t){return t.map(e=>{let s=-1;for(;(s=e.indexOf("**",s+1))!==-1;){let i=s;for(;e[i+1]==="**";)i++;i!==s&&e.splice(s,i-s)}return e})}levelOneOptimize(t){return t.map(e=>(e=e.reduce((s,i)=>{let n=s[s.length-1];return i==="**"&&n==="**"?s:i===".."&&n&&n!==".."&&n!=="."&&n!=="**"?(s.pop(),s):(s.push(i),s)},[]),e.length===0?[""]:e))}levelTwoFileOptimize(t){Array.isArray(t)||(t=this.slashSplit(t));let e=!1;do{if(e=!1,!this.preserveMultipleSlashes){for(let i=1;i<t.length-1;i++){let n=t[i];i===1&&n===""&&t[0]===""||(n==="."||n==="")&&(e=!0,t.splice(i,1),i--)}t[0]==="."&&t.length===2&&(t[1]==="."||t[1]==="")&&(e=!0,t.pop())}let s=0;for(;(s=t.indexOf("..",s+1))!==-1;){let i=t[s-1];i&&i!=="."&&i!==".."&&i!=="**"&&(e=!0,t.splice(s-1,2),s-=2)}}while(e);return t.length===0?[""]:t}firstPhasePreProcess(t){let e=!1;do{e=!1;for(let s of t){let i=-1;for(;(i=s.indexOf("**",i+1))!==-1;){let o=i;for(;s[o+1]==="**";)o++;o>i&&s.splice(i+1,o-i);let h=s[i+1],a=s[i+2],l=s[i+3];if(h!==".."||!a||a==="."||a===".."||!l||l==="."||l==="..")continue;e=!0,s.splice(i,1);let c=s.slice(0);c[i]="**",t.push(c),i--}if(!this.preserveMultipleSlashes){for(let o=1;o<s.length-1;o++){let h=s[o];o===1&&h===""&&s[0]===""||(h==="."||h==="")&&(e=!0,s.splice(o,1),o--)}s[0]==="."&&s.length===2&&(s[1]==="."||s[1]==="")&&(e=!0,s.pop())}let n=0;for(;(n=s.indexOf("..",n+1))!==-1;){let o=s[n-1];if(o&&o!=="."&&o!==".."&&o!=="**"){e=!0;let a=n===1&&s[n+1]==="**"?["."]:[];s.splice(n-1,2,...a),s.length===0&&s.push(""),n-=2}}}}while(e);return t}secondPhasePreProcess(t){for(let e=0;e<t.length-1;e++)for(let s=e+1;s<t.length;s++){let i=this.partsMatch(t[e],t[s],!this.preserveMultipleSlashes);if(i){t[e]=[],t[s]=i;break}}return t.filter(e=>e.length)}partsMatch(t,e,s=!1){let i=0,n=0,o=[],h="";for(;i<t.length&&n<e.length;)if(t[i]===e[n])o.push(h==="b"?e[n]:t[i]),i++,n++;else if(s&&t[i]==="**"&&e[n]===t[i+1])o.push(t[i]),i++;else if(s&&e[n]==="**"&&t[i]===e[n+1])o.push(e[n]),n++;else if(t[i]==="*"&&e[n]&&(this.options.dot||!e[n].startsWith("."))&&e[n]!=="**"){if(h==="b")return!1;h="a",o.push(t[i]),i++,n++}else if(e[n]==="*"&&t[i]&&(this.options.dot||!t[i].startsWith("."))&&t[i]!=="**"){if(h==="a")return!1;h="b",o.push(e[n]),i++,n++}else return!1;return t.length===e.length&&o}parseNegate(){if(this.nonegate)return;let t=this.pattern,e=!1,s=0;for(let i=0;i<t.length&&t.charAt(i)==="!";i++)e=!e,s++;s&&(this.pattern=t.slice(s)),this.negate=e}matchOne(t,e,s=!1){let i=this.options;if(this.isWindows){let p=typeof t[0]=="string"&&/^[a-z]:$/i.test(t[0]),w=!p&&t[0]===""&&t[1]===""&&t[2]==="?"&&/^[a-z]:$/i.test(t[3]),g=typeof e[0]=="string"&&/^[a-z]:$/i.test(e[0]),S=!g&&e[0]===""&&e[1]===""&&e[2]==="?"&&typeof e[3]=="string"&&/^[a-z]:$/i.test(e[3]),b=w?3:p?0:void 0,y=S?3:g?0:void 0;if(typeof b=="number"&&typeof y=="number"){let[E,B]=[t[b],e[y]];E.toLowerCase()===B.toLowerCase()&&(e[y]=E,y>b?e=e.slice(y):b>y&&(t=t.slice(b)))}}let{optimizationLevel:n=1}=this.options;n>=2&&(t=this.levelTwoFileOptimize(t)),this.debug("matchOne",this,{file:t,pattern:e}),this.debug("matchOne",t.length,e.length);for(var o=0,h=0,a=t.length,l=e.length;o<a&&h<l;o++,h++){this.debug("matchOne loop");var c=e[h],f=t[o];if(this.debug(e,c,f),c===!1)return!1;if(c===A){this.debug("GLOBSTAR",[e,c,f]);var u=o,d=h+1;if(d===l){for(this.debug("** at the end");o<a;o++)if(t[o]==="."||t[o]===".."||!i.dot&&t[o].charAt(0)===".")return!1;return!0}for(;u<a;){var m=t[u];if(this.debug(`
globstar while`,t,u,e,d,m),this.matchOne(t.slice(u),e.slice(d),s))return this.debug("globstar found match!",u,a,m),!0;if(m==="."||m===".."||!i.dot&&m.charAt(0)==="."){this.debug("dot detected!",t,u,e,d);break}this.debug("globstar swallow a segment, and continue"),u++}return!!(s&&(this.debug(`
>>> no match, partial?`,t,u,e,d),u===a))}let p;if(typeof c=="string"?(p=f===c,this.debug("string match",c,f,p)):(p=c.test(f),this.debug("pattern match",c,f,p)),!p)return!1}if(o===a&&h===l)return!0;if(o===a)return s;if(h===l)return o===a-1&&t[o]==="";throw new Error("wtf?")}braceExpand(){return He(this.pattern,this.options)}parse(t){ft(t);let e=this.options;if(t==="**")return A;if(t==="")return"";let s,i=null;(s=t.match(ci))?i=e.dot?ui:fi:(s=t.match(ti))?i=(e.nocase?e.dot?ni:ii:e.dot?si:ei)(s[1]):(s=t.match(di))?i=(e.nocase?e.dot?mi:pi:e.dot?gi:wi)(s):(s=t.match(ri))?i=e.dot?hi:oi:(s=t.match(ai))&&(i=li);let n=Q.fromGlob(t,this.options).toMMPattern();return i&&typeof n=="object"&&Reflect.defineProperty(n,"test",{value:i}),n}makeRe(){if(this.regexp||this.regexp===!1)return this.regexp;let t=this.set;if(!t.length)return this.regexp=!1,this.regexp;let e=this.options,s=e.noglobstar?Si:e.dot?Ei:xi,i=new Set(e.nocase?["i"]:[]),n=t.map(a=>{let l=a.map(c=>{if(c instanceof RegExp)for(let f of c.flags.split(""))i.add(f);return typeof c=="string"?Ri(c):c===A?A:c._src});return l.forEach((c,f)=>{let u=l[f+1],d=l[f-1];c!==A||d===A||(d===void 0?u!==void 0&&u!==A?l[f+1]="(?:\\/|"+s+"\\/)?"+u:l[f]=s:u===void 0?l[f-1]=d+"(?:\\/|"+s+")?":u!==A&&(l[f-1]=d+"(?:\\/|\\/"+s+"\\/)"+u,l[f+1]=A))}),l.filter(c=>c!==A).join("/")}).join("|"),[o,h]=t.length>1?["(?:",")"]:["",""];n="^"+o+n+h+"$",this.negate&&(n="^(?!"+n+").+$");try{this.regexp=new RegExp(n,[...i].join(""))}catch{this.regexp=!1}return this.regexp}slashSplit(t){return this.preserveMultipleSlashes?t.split("/"):this.isWindows&&/^\/\/[^\/]+/.test(t)?["",...t.split(/\/+/)]:t.split(/\/+/)}match(t,e=this.partial){if(this.debug("match",t,this.pattern),this.comment)return!1;if(this.empty)return t==="";if(t==="/"&&e)return!0;let s=this.options;this.isWindows&&(t=t.split("\\").join("/"));let i=this.slashSplit(t);this.debug(this.pattern,"split",i);let n=this.set;this.debug(this.pattern,"set",n);let o=i[i.length-1];if(!o)for(let h=i.length-2;!o&&h>=0;h--)o=i[h];for(let h=0;h<n.length;h++){let a=n[h],l=i;if(s.matchBase&&a.length===1&&(l=[o]),this.matchOne(l,a,e))return s.flipNegate?!0:!this.negate}return s.flipNegate?!1:this.negate}static defaults(t){return F.defaults(t).Minimatch}};F.AST=Q;F.Minimatch=M;F.escape=tt;F.unescape=P;import{fileURLToPath as on}from"node:url";var et=typeof performance=="object"&&performance&&typeof performance.now=="function"?performance:Date,Je=new Set,ie=typeof process=="object"&&process?process:{},Ke=(r,t,e,s)=>{typeof ie.emitWarning=="function"?ie.emitWarning(r,t,e,s):console.error(`[${e}] ${t}: ${r}`)},Ot=globalThis.AbortController,qe=globalThis.AbortSignal;if(typeof Ot>"u"){qe=class{onabort;_onabort=[];reason;aborted=!1;addEventListener(s,i){this._onabort.push(i)}},Ot=class{constructor(){t()}signal=new qe;abort(s){if(!this.signal.aborted){this.signal.reason=s,this.signal.aborted=!0;for(let i of this.signal._onabort)i(s);this.signal.onabort?.(s)}}};let r=ie.env?.LRU_CACHE_IGNORE_AC_WARNING!=="1",t=()=>{r&&(r=!1,Ke("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.","NO_ABORT_CONTROLLER","ENOTSUP",t))}}var ki=r=>!Je.has(r),Zn=Symbol("type"),K=r=>r&&r===Math.floor(r)&&r>0&&isFinite(r),Ve=r=>K(r)?r<=Math.pow(2,8)?Uint8Array:r<=Math.pow(2,16)?Uint16Array:r<=Math.pow(2,32)?Uint32Array:r<=Number.MAX_SAFE_INTEGER?st:null:null,st=class extends Array{constructor(t){super(t),this.fill(0)}},ne=class r{heap;length;static#t=!1;static create(t){let e=Ve(t);if(!e)return[];r.#t=!0;let s=new r(t,e);return r.#t=!1,s}constructor(t,e){if(!r.#t)throw new TypeError("instantiate Stack using Stack.create(n)");this.heap=new e(t),this.length=0}push(t){this.heap[this.length++]=t}pop(){return this.heap[--this.length]}},dt=class r{#t;#e;#r;#i;#o;#S;ttl;ttlResolution;ttlAutopurge;updateAgeOnGet;updateAgeOnHas;allowStale;noDisposeOnSet;noUpdateTTL;maxEntrySize;sizeCalculation;noDeleteOnFetchRejection;noDeleteOnStaleGet;allowStaleOnFetchAbort;allowStaleOnFetchRejection;ignoreFetchAbort;#l;#f;#h;#a;#n;#g;#w;#d;#u;#v;#m;#C;#T;#b;#E;#x;#p;static unsafeExposeInternals(t){return{starts:t.#T,ttls:t.#b,sizes:t.#C,keyMap:t.#h,keyList:t.#a,valList:t.#n,next:t.#g,prev:t.#w,get head(){return t.#d},get tail(){return t.#u},free:t.#v,isBackgroundFetch:e=>t.#c(e),backgroundFetch:(e,s,i,n)=>t.#I(e,s,i,n),moveToTail:e=>t.#j(e),indexes:e=>t.#R(e),rindexes:e=>t.#k(e),isStale:e=>t.#y(e)}}get max(){return this.#t}get maxSize(){return this.#e}get calculatedSize(){return this.#f}get size(){return this.#l}get fetchMethod(){return this.#o}get memoMethod(){return this.#S}get dispose(){return this.#r}get disposeAfter(){return this.#i}constructor(t){let{max:e=0,ttl:s,ttlResolution:i=1,ttlAutopurge:n,updateAgeOnGet:o,updateAgeOnHas:h,allowStale:a,dispose:l,disposeAfter:c,noDisposeOnSet:f,noUpdateTTL:u,maxSize:d=0,maxEntrySize:m=0,sizeCalculation:p,fetchMethod:w,memoMethod:g,noDeleteOnFetchRejection:S,noDeleteOnStaleGet:b,allowStaleOnFetchRejection:y,allowStaleOnFetchAbort:E,ignoreFetchAbort:B}=t;if(e!==0&&!K(e))throw new TypeError("max option must be a nonnegative integer");let J=e?Ve(e):Array;if(!J)throw new Error("invalid max value: "+e);if(this.#t=e,this.#e=d,this.maxEntrySize=m||this.#e,this.sizeCalculation=p,this.sizeCalculation){if(!this.#e&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if(typeof this.sizeCalculation!="function")throw new TypeError("sizeCalculation set to non-function")}if(g!==void 0&&typeof g!="function")throw new TypeError("memoMethod must be a function if defined");if(this.#S=g,w!==void 0&&typeof w!="function")throw new TypeError("fetchMethod must be a function if specified");if(this.#o=w,this.#x=!!w,this.#h=new Map,this.#a=new Array(e).fill(void 0),this.#n=new Array(e).fill(void 0),this.#g=new J(e),this.#w=new J(e),this.#d=0,this.#u=0,this.#v=ne.create(e),this.#l=0,this.#f=0,typeof l=="function"&&(this.#r=l),typeof c=="function"?(this.#i=c,this.#m=[]):(this.#i=void 0,this.#m=void 0),this.#E=!!this.#r,this.#p=!!this.#i,this.noDisposeOnSet=!!f,this.noUpdateTTL=!!u,this.noDeleteOnFetchRejection=!!S,this.allowStaleOnFetchRejection=!!y,this.allowStaleOnFetchAbort=!!E,this.ignoreFetchAbort=!!B,this.maxEntrySize!==0){if(this.#e!==0&&!K(this.#e))throw new TypeError("maxSize must be a positive integer if specified");if(!K(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");this.#O()}if(this.allowStale=!!a,this.noDeleteOnStaleGet=!!b,this.updateAgeOnGet=!!o,this.updateAgeOnHas=!!h,this.ttlResolution=K(i)||i===0?i:1,this.ttlAutopurge=!!n,this.ttl=s||0,this.ttl){if(!K(this.ttl))throw new TypeError("ttl must be a positive integer if specified");this.#F()}if(this.#t===0&&this.ttl===0&&this.#e===0)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!this.#t&&!this.#e){let kt="LRU_CACHE_UNBOUNDED";ki(kt)&&(Je.add(kt),Ke("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",kt,r))}}getRemainingTTL(t){return this.#h.has(t)?1/0:0}#F(){let t=new st(this.#t),e=new st(this.#t);this.#b=t,this.#T=e,this.#N=(n,o,h=et.now())=>{if(e[n]=o!==0?h:0,t[n]=o,o!==0&&this.ttlAutopurge){let a=setTimeout(()=>{this.#y(n)&&this.#M(this.#a[n],"expire")},o+1);a.unref&&a.unref()}},this.#A=n=>{e[n]=t[n]!==0?et.now():0},this.#s=(n,o)=>{if(t[o]){let h=t[o],a=e[o];if(!h||!a)return;n.ttl=h,n.start=a,n.now=s||i();let l=n.now-a;n.remainingTTL=h-l}};let s=0,i=()=>{let n=et.now();if(this.ttlResolution>0){s=n;let o=setTimeout(()=>s=0,this.ttlResolution);o.unref&&o.unref()}return n};this.getRemainingTTL=n=>{let o=this.#h.get(n);if(o===void 0)return 0;let h=t[o],a=e[o];if(!h||!a)return 1/0;let l=(s||i())-a;return h-l},this.#y=n=>{let o=e[n],h=t[n];return!!h&&!!o&&(s||i())-o>h}}#A=()=>{};#s=()=>{};#N=()=>{};#y=()=>!1;#O(){let t=new st(this.#t);this.#f=0,this.#C=t,this.#_=e=>{this.#f-=t[e],t[e]=0},this.#z=(e,s,i,n)=>{if(this.#c(s))return 0;if(!K(i))if(n){if(typeof n!="function")throw new TypeError("sizeCalculation must be a function");if(i=n(s,e),!K(i))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}else throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");return i},this.#D=(e,s,i)=>{if(t[e]=s,this.#e){let n=this.#e-t[e];for(;this.#f>n;)this.#P(!0)}this.#f+=t[e],i&&(i.entrySize=s,i.totalCalculatedSize=this.#f)}}#_=t=>{};#D=(t,e,s)=>{};#z=(t,e,s,i)=>{if(s||i)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");return 0};*#R({allowStale:t=this.allowStale}={}){if(this.#l)for(let e=this.#u;!(!this.#L(e)||((t||!this.#y(e))&&(yield e),e===this.#d));)e=this.#w[e]}*#k({allowStale:t=this.allowStale}={}){if(this.#l)for(let e=this.#d;!(!this.#L(e)||((t||!this.#y(e))&&(yield e),e===this.#u));)e=this.#g[e]}#L(t){return t!==void 0&&this.#h.get(this.#a[t])===t}*entries(){for(let t of this.#R())this.#n[t]!==void 0&&this.#a[t]!==void 0&&!this.#c(this.#n[t])&&(yield[this.#a[t],this.#n[t]])}*rentries(){for(let t of this.#k())this.#n[t]!==void 0&&this.#a[t]!==void 0&&!this.#c(this.#n[t])&&(yield[this.#a[t],this.#n[t]])}*keys(){for(let t of this.#R()){let e=this.#a[t];e!==void 0&&!this.#c(this.#n[t])&&(yield e)}}*rkeys(){for(let t of this.#k()){let e=this.#a[t];e!==void 0&&!this.#c(this.#n[t])&&(yield e)}}*values(){for(let t of this.#R())this.#n[t]!==void 0&&!this.#c(this.#n[t])&&(yield this.#n[t])}*rvalues(){for(let t of this.#k())this.#n[t]!==void 0&&!this.#c(this.#n[t])&&(yield this.#n[t])}[Symbol.iterator](){return this.entries()}[Symbol.toStringTag]="LRUCache";find(t,e={}){for(let s of this.#R()){let i=this.#n[s],n=this.#c(i)?i.__staleWhileFetching:i;if(n!==void 0&&t(n,this.#a[s],this))return this.get(this.#a[s],e)}}forEach(t,e=this){for(let s of this.#R()){let i=this.#n[s],n=this.#c(i)?i.__staleWhileFetching:i;n!==void 0&&t.call(e,n,this.#a[s],this)}}rforEach(t,e=this){for(let s of this.#k()){let i=this.#n[s],n=this.#c(i)?i.__staleWhileFetching:i;n!==void 0&&t.call(e,n,this.#a[s],this)}}purgeStale(){let t=!1;for(let e of this.#k({allowStale:!0}))this.#y(e)&&(this.#M(this.#a[e],"expire"),t=!0);return t}info(t){let e=this.#h.get(t);if(e===void 0)return;let s=this.#n[e],i=this.#c(s)?s.__staleWhileFetching:s;if(i===void 0)return;let n={value:i};if(this.#b&&this.#T){let o=this.#b[e],h=this.#T[e];if(o&&h){let a=o-(et.now()-h);n.ttl=a,n.start=Date.now()}}return this.#C&&(n.size=this.#C[e]),n}dump(){let t=[];for(let e of this.#R({allowStale:!0})){let s=this.#a[e],i=this.#n[e],n=this.#c(i)?i.__staleWhileFetching:i;if(n===void 0||s===void 0)continue;let o={value:n};if(this.#b&&this.#T){o.ttl=this.#b[e];let h=et.now()-this.#T[e];o.start=Math.floor(Date.now()-h)}this.#C&&(o.size=this.#C[e]),t.unshift([s,o])}return t}load(t){this.clear();for(let[e,s]of t){if(s.start){let i=Date.now()-s.start;s.start=et.now()-i}this.set(e,s.value,s)}}set(t,e,s={}){if(e===void 0)return this.delete(t),this;let{ttl:i=this.ttl,start:n,noDisposeOnSet:o=this.noDisposeOnSet,sizeCalculation:h=this.sizeCalculation,status:a}=s,{noUpdateTTL:l=this.noUpdateTTL}=s,c=this.#z(t,e,s.size||0,h);if(this.maxEntrySize&&c>this.maxEntrySize)return a&&(a.set="miss",a.maxEntrySizeExceeded=!0),this.#M(t,"set"),this;let f=this.#l===0?void 0:this.#h.get(t);if(f===void 0)f=this.#l===0?this.#u:this.#v.length!==0?this.#v.pop():this.#l===this.#t?this.#P(!1):this.#l,this.#a[f]=t,this.#n[f]=e,this.#h.set(t,f),this.#g[this.#u]=f,this.#w[f]=this.#u,this.#u=f,this.#l++,this.#D(f,c,a),a&&(a.set="add"),l=!1;else{this.#j(f);let u=this.#n[f];if(e!==u){if(this.#x&&this.#c(u)){u.__abortController.abort(new Error("replaced"));let{__staleWhileFetching:d}=u;d!==void 0&&!o&&(this.#E&&this.#r?.(d,t,"set"),this.#p&&this.#m?.push([d,t,"set"]))}else o||(this.#E&&this.#r?.(u,t,"set"),this.#p&&this.#m?.push([u,t,"set"]));if(this.#_(f),this.#D(f,c,a),this.#n[f]=e,a){a.set="replace";let d=u&&this.#c(u)?u.__staleWhileFetching:u;d!==void 0&&(a.oldValue=d)}}else a&&(a.set="update")}if(i!==0&&!this.#b&&this.#F(),this.#b&&(l||this.#N(f,i,n),a&&this.#s(a,f)),!o&&this.#p&&this.#m){let u=this.#m,d;for(;d=u?.shift();)this.#i?.(...d)}return this}pop(){try{for(;this.#l;){let t=this.#n[this.#d];if(this.#P(!0),this.#c(t)){if(t.__staleWhileFetching)return t.__staleWhileFetching}else if(t!==void 0)return t}}finally{if(this.#p&&this.#m){let t=this.#m,e;for(;e=t?.shift();)this.#i?.(...e)}}}#P(t){let e=this.#d,s=this.#a[e],i=this.#n[e];return this.#x&&this.#c(i)?i.__abortController.abort(new Error("evicted")):(this.#E||this.#p)&&(this.#E&&this.#r?.(i,s,"evict"),this.#p&&this.#m?.push([i,s,"evict"])),this.#_(e),t&&(this.#a[e]=void 0,this.#n[e]=void 0,this.#v.push(e)),this.#l===1?(this.#d=this.#u=0,this.#v.length=0):this.#d=this.#g[e],this.#h.delete(s),this.#l--,e}has(t,e={}){let{updateAgeOnHas:s=this.updateAgeOnHas,status:i}=e,n=this.#h.get(t);if(n!==void 0){let o=this.#n[n];if(this.#c(o)&&o.__staleWhileFetching===void 0)return!1;if(this.#y(n))i&&(i.has="stale",this.#s(i,n));else return s&&this.#A(n),i&&(i.has="hit",this.#s(i,n)),!0}else i&&(i.has="miss");return!1}peek(t,e={}){let{allowStale:s=this.allowStale}=e,i=this.#h.get(t);if(i===void 0||!s&&this.#y(i))return;let n=this.#n[i];return this.#c(n)?n.__staleWhileFetching:n}#I(t,e,s,i){let n=e===void 0?void 0:this.#n[e];if(this.#c(n))return n;let o=new Ot,{signal:h}=s;h?.addEventListener("abort",()=>o.abort(h.reason),{signal:o.signal});let a={signal:o.signal,options:s,context:i},l=(p,w=!1)=>{let{aborted:g}=o.signal,S=s.ignoreFetchAbort&&p!==void 0;if(s.status&&(g&&!w?(s.status.fetchAborted=!0,s.status.fetchError=o.signal.reason,S&&(s.status.fetchAbortIgnored=!0)):s.status.fetchResolved=!0),g&&!S&&!w)return f(o.signal.reason);let b=d;return this.#n[e]===d&&(p===void 0?b.__staleWhileFetching?this.#n[e]=b.__staleWhileFetching:this.#M(t,"fetch"):(s.status&&(s.status.fetchUpdated=!0),this.set(t,p,a.options))),p},c=p=>(s.status&&(s.status.fetchRejected=!0,s.status.fetchError=p),f(p)),f=p=>{let{aborted:w}=o.signal,g=w&&s.allowStaleOnFetchAbort,S=g||s.allowStaleOnFetchRejection,b=S||s.noDeleteOnFetchRejection,y=d;if(this.#n[e]===d&&(!b||y.__staleWhileFetching===void 0?this.#M(t,"fetch"):g||(this.#n[e]=y.__staleWhileFetching)),S)return s.status&&y.__staleWhileFetching!==void 0&&(s.status.returnedStale=!0),y.__staleWhileFetching;if(y.__returned===y)throw p},u=(p,w)=>{let g=this.#o?.(t,n,a);g&&g instanceof Promise&&g.then(S=>p(S===void 0?void 0:S),w),o.signal.addEventListener("abort",()=>{(!s.ignoreFetchAbort||s.allowStaleOnFetchAbort)&&(p(void 0),s.allowStaleOnFetchAbort&&(p=S=>l(S,!0)))})};s.status&&(s.status.fetchDispatched=!0);let d=new Promise(u).then(l,c),m=Object.assign(d,{__abortController:o,__staleWhileFetching:n,__returned:void 0});return e===void 0?(this.set(t,m,{...a.options,status:void 0}),e=this.#h.get(t)):this.#n[e]=m,m}#c(t){if(!this.#x)return!1;let e=t;return!!e&&e instanceof Promise&&e.hasOwnProperty("__staleWhileFetching")&&e.__abortController instanceof Ot}async fetch(t,e={}){let{allowStale:s=this.allowStale,updateAgeOnGet:i=this.updateAgeOnGet,noDeleteOnStaleGet:n=this.noDeleteOnStaleGet,ttl:o=this.ttl,noDisposeOnSet:h=this.noDisposeOnSet,size:a=0,sizeCalculation:l=this.sizeCalculation,noUpdateTTL:c=this.noUpdateTTL,noDeleteOnFetchRejection:f=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:u=this.allowStaleOnFetchRejection,ignoreFetchAbort:d=this.ignoreFetchAbort,allowStaleOnFetchAbort:m=this.allowStaleOnFetchAbort,context:p,forceRefresh:w=!1,status:g,signal:S}=e;if(!this.#x)return g&&(g.fetch="get"),this.get(t,{allowStale:s,updateAgeOnGet:i,noDeleteOnStaleGet:n,status:g});let b={allowStale:s,updateAgeOnGet:i,noDeleteOnStaleGet:n,ttl:o,noDisposeOnSet:h,size:a,sizeCalculation:l,noUpdateTTL:c,noDeleteOnFetchRejection:f,allowStaleOnFetchRejection:u,allowStaleOnFetchAbort:m,ignoreFetchAbort:d,status:g,signal:S},y=this.#h.get(t);if(y===void 0){g&&(g.fetch="miss");let E=this.#I(t,y,b,p);return E.__returned=E}else{let E=this.#n[y];if(this.#c(E)){let Re=s&&E.__staleWhileFetching!==void 0;return g&&(g.fetch="inflight",Re&&(g.returnedStale=!0)),Re?E.__staleWhileFetching:E.__returned=E}let B=this.#y(y);if(!w&&!B)return g&&(g.fetch="hit"),this.#j(y),i&&this.#A(y),g&&this.#s(g,y),E;let J=this.#I(t,y,b,p),Zt=J.__staleWhileFetching!==void 0&&s;return g&&(g.fetch=B?"stale":"refresh",Zt&&B&&(g.returnedStale=!0)),Zt?J.__staleWhileFetching:J.__returned=J}}async forceFetch(t,e={}){let s=await this.fetch(t,e);if(s===void 0)throw new Error("fetch() returned undefined");return s}memo(t,e={}){let s=this.#S;if(!s)throw new Error("no memoMethod provided to constructor");let{context:i,forceRefresh:n,...o}=e,h=this.get(t,o);if(!n&&h!==void 0)return h;let a=s(t,h,{options:o,context:i});return this.set(t,a,o),a}get(t,e={}){let{allowStale:s=this.allowStale,updateAgeOnGet:i=this.updateAgeOnGet,noDeleteOnStaleGet:n=this.noDeleteOnStaleGet,status:o}=e,h=this.#h.get(t);if(h!==void 0){let a=this.#n[h],l=this.#c(a);return o&&this.#s(o,h),this.#y(h)?(o&&(o.get="stale"),l?(o&&s&&a.__staleWhileFetching!==void 0&&(o.returnedStale=!0),s?a.__staleWhileFetching:void 0):(n||this.#M(t,"expire"),o&&s&&(o.returnedStale=!0),s?a:void 0)):(o&&(o.get="hit"),l?a.__staleWhileFetching:(this.#j(h),i&&this.#A(h),a))}else o&&(o.get="miss")}#$(t,e){this.#w[e]=t,this.#g[t]=e}#j(t){t!==this.#u&&(t===this.#d?this.#d=this.#g[t]:this.#$(this.#w[t],this.#g[t]),this.#$(this.#u,t),this.#u=t)}delete(t){return this.#M(t,"delete")}#M(t,e){let s=!1;if(this.#l!==0){let i=this.#h.get(t);if(i!==void 0)if(s=!0,this.#l===1)this.#B(e);else{this.#_(i);let n=this.#n[i];if(this.#c(n)?n.__abortController.abort(new Error("deleted")):(this.#E||this.#p)&&(this.#E&&this.#r?.(n,t,e),this.#p&&this.#m?.push([n,t,e])),this.#h.delete(t),this.#a[i]=void 0,this.#n[i]=void 0,i===this.#u)this.#u=this.#w[i];else if(i===this.#d)this.#d=this.#g[i];else{let o=this.#w[i];this.#g[o]=this.#g[i];let h=this.#g[i];this.#w[h]=this.#w[i]}this.#l--,this.#v.push(i)}}if(this.#p&&this.#m?.length){let i=this.#m,n;for(;n=i?.shift();)this.#i?.(...n)}return s}clear(){return this.#B("delete")}#B(t){for(let e of this.#k({allowStale:!0})){let s=this.#n[e];if(this.#c(s))s.__abortController.abort(new Error("deleted"));else{let i=this.#a[e];this.#E&&this.#r?.(s,i,t),this.#p&&this.#m?.push([s,i,t])}}if(this.#h.clear(),this.#n.fill(void 0),this.#a.fill(void 0),this.#b&&this.#T&&(this.#b.fill(0),this.#T.fill(0)),this.#C&&this.#C.fill(0),this.#d=0,this.#u=0,this.#v.length=0,this.#f=0,this.#l=0,this.#p&&this.#m){let e=this.#m,s;for(;s=e?.shift();)this.#i?.(...s)}}};import{posix as $i,win32 as pe}from"node:path";import{fileURLToPath as ji}from"node:url";import{lstatSync as Bi,readdir as Wi,readdirSync as Ui,readlinkSync as Gi,realpathSync as Hi}from"fs";import*as qi from"node:fs";import{lstat as Ki,readdir as Vi,readlink as Yi,realpath as Xi}from"node:fs/promises";import{EventEmitter as fe}from"node:events";import ts from"node:stream";import{StringDecoder as Fi}from"node:string_decoder";var Ye=typeof process=="object"&&process?process:{stdout:null,stderr:null},Oi=r=>!!r&&typeof r=="object"&&(r instanceof Y||r instanceof ts||Mi(r)||Ni(r)),Mi=r=>!!r&&typeof r=="object"&&r instanceof fe&&typeof r.pipe=="function"&&r.pipe!==ts.Writable.prototype.pipe,Ni=r=>!!r&&typeof r=="object"&&r instanceof fe&&typeof r.write=="function"&&typeof r.end=="function",G=Symbol("EOF"),H=Symbol("maybeEmitEnd"),V=Symbol("emittedEnd"),Mt=Symbol("emittingEnd"),pt=Symbol("emittedError"),Nt=Symbol("closed"),Xe=Symbol("read"),_t=Symbol("flush"),Ze=Symbol("flushChunk"),I=Symbol("encoding"),it=Symbol("decoder"),v=Symbol("flowing"),mt=Symbol("paused"),nt=Symbol("resume"),C=Symbol("buffer"),O=Symbol("pipes"),T=Symbol("bufferLength"),re=Symbol("bufferPush"),Dt=Symbol("bufferShift"),R=Symbol("objectMode"),x=Symbol("destroyed"),oe=Symbol("error"),he=Symbol("emitData"),Qe=Symbol("emitEnd"),ae=Symbol("emitEnd2"),W=Symbol("async"),le=Symbol("abort"),zt=Symbol("aborted"),gt=Symbol("signal"),X=Symbol("dataListeners"),N=Symbol("discarded"),wt=r=>Promise.resolve().then(r),_i=r=>r(),Di=r=>r==="end"||r==="finish"||r==="prefinish",zi=r=>r instanceof ArrayBuffer||!!r&&typeof r=="object"&&r.constructor&&r.constructor.name==="ArrayBuffer"&&r.byteLength>=0,Li=r=>!Buffer.isBuffer(r)&&ArrayBuffer.isView(r),Lt=class{src;dest;opts;ondrain;constructor(t,e,s){this.src=t,this.dest=e,this.opts=s,this.ondrain=()=>t[nt](),this.dest.on("drain",this.ondrain)}unpipe(){this.dest.removeListener("drain",this.ondrain)}proxyErrors(t){}end(){this.unpipe(),this.opts.end&&this.dest.end()}},ce=class extends Lt{unpipe(){this.src.removeListener("error",this.proxyErrors),super.unpipe()}constructor(t,e,s){super(t,e,s),this.proxyErrors=i=>e.emit("error",i),t.on("error",this.proxyErrors)}},Pi=r=>!!r.objectMode,Ii=r=>!r.objectMode&&!!r.encoding&&r.encoding!=="buffer",Y=class extends fe{[v]=!1;[mt]=!1;[O]=[];[C]=[];[R];[I];[W];[it];[G]=!1;[V]=!1;[Mt]=!1;[Nt]=!1;[pt]=null;[T]=0;[x]=!1;[gt];[zt]=!1;[X]=0;[N]=!1;writable=!0;readable=!0;constructor(...t){let e=t[0]||{};if(super(),e.objectMode&&typeof e.encoding=="string")throw new TypeError("Encoding and objectMode may not be used together");Pi(e)?(this[R]=!0,this[I]=null):Ii(e)?(this[I]=e.encoding,this[R]=!1):(this[R]=!1,this[I]=null),this[W]=!!e.async,this[it]=this[I]?new Fi(this[I]):null,e&&e.debugExposeBuffer===!0&&Object.defineProperty(this,"buffer",{get:()=>this[C]}),e&&e.debugExposePipes===!0&&Object.defineProperty(this,"pipes",{get:()=>this[O]});let{signal:s}=e;s&&(this[gt]=s,s.aborted?this[le]():s.addEventListener("abort",()=>this[le]()))}get bufferLength(){return this[T]}get encoding(){return this[I]}set encoding(t){throw new Error("Encoding must be set at instantiation time")}setEncoding(t){throw new Error("Encoding must be set at instantiation time")}get objectMode(){return this[R]}set objectMode(t){throw new Error("objectMode must be set at instantiation time")}get async(){return this[W]}set async(t){this[W]=this[W]||!!t}[le](){this[zt]=!0,this.emit("abort",this[gt]?.reason),this.destroy(this[gt]?.reason)}get aborted(){return this[zt]}set aborted(t){}write(t,e,s){if(this[zt])return!1;if(this[G])throw new Error("write after end");if(this[x])return this.emit("error",Object.assign(new Error("Cannot call write after a stream was destroyed"),{code:"ERR_STREAM_DESTROYED"})),!0;typeof e=="function"&&(s=e,e="utf8"),e||(e="utf8");let i=this[W]?wt:_i;if(!this[R]&&!Buffer.isBuffer(t)){if(Li(t))t=Buffer.from(t.buffer,t.byteOffset,t.byteLength);else if(zi(t))t=Buffer.from(t);else if(typeof t!="string")throw new Error("Non-contiguous data written to non-objectMode stream")}return this[R]?(this[v]&&this[T]!==0&&this[_t](!0),this[v]?this.emit("data",t):this[re](t),this[T]!==0&&this.emit("readable"),s&&i(s),this[v]):t.length?(typeof t=="string"&&!(e===this[I]&&!this[it]?.lastNeed)&&(t=Buffer.from(t,e)),Buffer.isBuffer(t)&&this[I]&&(t=this[it].write(t)),this[v]&&this[T]!==0&&this[_t](!0),this[v]?this.emit("data",t):this[re](t),this[T]!==0&&this.emit("readable"),s&&i(s),this[v]):(this[T]!==0&&this.emit("readable"),s&&i(s),this[v])}read(t){if(this[x])return null;if(this[N]=!1,this[T]===0||t===0||t&&t>this[T])return this[H](),null;this[R]&&(t=null),this[C].length>1&&!this[R]&&(this[C]=[this[I]?this[C].join(""):Buffer.concat(this[C],this[T])]);let e=this[Xe](t||null,this[C][0]);return this[H](),e}[Xe](t,e){if(this[R])this[Dt]();else{let s=e;t===s.length||t===null?this[Dt]():typeof s=="string"?(this[C][0]=s.slice(t),e=s.slice(0,t),this[T]-=t):(this[C][0]=s.subarray(t),e=s.subarray(0,t),this[T]-=t)}return this.emit("data",e),!this[C].length&&!this[G]&&this.emit("drain"),e}end(t,e,s){return typeof t=="function"&&(s=t,t=void 0),typeof e=="function"&&(s=e,e="utf8"),t!==void 0&&this.write(t,e),s&&this.once("end",s),this[G]=!0,this.writable=!1,(this[v]||!this[mt])&&this[H](),this}[nt](){this[x]||(!this[X]&&!this[O].length&&(this[N]=!0),this[mt]=!1,this[v]=!0,this.emit("resume"),this[C].length?this[_t]():this[G]?this[H]():this.emit("drain"))}resume(){return this[nt]()}pause(){this[v]=!1,this[mt]=!0,this[N]=!1}get destroyed(){return this[x]}get flowing(){return this[v]}get paused(){return this[mt]}[re](t){this[R]?this[T]+=1:this[T]+=t.length,this[C].push(t)}[Dt](){return this[R]?this[T]-=1:this[T]-=this[C][0].length,this[C].shift()}[_t](t=!1){do;while(this[Ze](this[Dt]())&&this[C].length);!t&&!this[C].length&&!this[G]&&this.emit("drain")}[Ze](t){return this.emit("data",t),this[v]}pipe(t,e){if(this[x])return t;this[N]=!1;let s=this[V];return e=e||{},t===Ye.stdout||t===Ye.stderr?e.end=!1:e.end=e.end!==!1,e.proxyErrors=!!e.proxyErrors,s?e.end&&t.end():(this[O].push(e.proxyErrors?new ce(this,t,e):new Lt(this,t,e)),this[W]?wt(()=>this[nt]()):this[nt]()),t}unpipe(t){let e=this[O].find(s=>s.dest===t);e&&(this[O].length===1?(this[v]&&this[X]===0&&(this[v]=!1),this[O]=[]):this[O].splice(this[O].indexOf(e),1),e.unpipe())}addListener(t,e){return this.on(t,e)}on(t,e){let s=super.on(t,e);if(t==="data")this[N]=!1,this[X]++,!this[O].length&&!this[v]&&this[nt]();else if(t==="readable"&&this[T]!==0)super.emit("readable");else if(Di(t)&&this[V])super.emit(t),this.removeAllListeners(t);else if(t==="error"&&this[pt]){let i=e;this[W]?wt(()=>i.call(this,this[pt])):i.call(this,this[pt])}return s}removeListener(t,e){return this.off(t,e)}off(t,e){let s=super.off(t,e);return t==="data"&&(this[X]=this.listeners("data").length,this[X]===0&&!this[N]&&!this[O].length&&(this[v]=!1)),s}removeAllListeners(t){let e=super.removeAllListeners(t);return(t==="data"||t===void 0)&&(this[X]=0,!this[N]&&!this[O].length&&(this[v]=!1)),e}get emittedEnd(){return this[V]}[H](){!this[Mt]&&!this[V]&&!this[x]&&this[C].length===0&&this[G]&&(this[Mt]=!0,this.emit("end"),this.emit("prefinish"),this.emit("finish"),this[Nt]&&this.emit("close"),this[Mt]=!1)}emit(t,...e){let s=e[0];if(t!=="error"&&t!=="close"&&t!==x&&this[x])return!1;if(t==="data")return!this[R]&&!s?!1:this[W]?(wt(()=>this[he](s)),!0):this[he](s);if(t==="end")return this[Qe]();if(t==="close"){if(this[Nt]=!0,!this[V]&&!this[x])return!1;let n=super.emit("close");return this.removeAllListeners("close"),n}else if(t==="error"){this[pt]=s,super.emit(oe,s);let n=!this[gt]||this.listeners("error").length?super.emit("error",s):!1;return this[H](),n}else if(t==="resume"){let n=super.emit("resume");return this[H](),n}else if(t==="finish"||t==="prefinish"){let n=super.emit(t);return this.removeAllListeners(t),n}let i=super.emit(t,...e);return this[H](),i}[he](t){for(let s of this[O])s.dest.write(t)===!1&&this.pause();let e=this[N]?!1:super.emit("data",t);return this[H](),e}[Qe](){return this[V]?!1:(this[V]=!0,this.readable=!1,this[W]?(wt(()=>this[ae]()),!0):this[ae]())}[ae](){if(this[it]){let e=this[it].end();if(e){for(let s of this[O])s.dest.write(e);this[N]||super.emit("data",e)}}for(let e of this[O])e.end();let t=super.emit("end");return this.removeAllListeners("end"),t}async collect(){let t=Object.assign([],{dataLength:0});this[R]||(t.dataLength=0);let e=this.promise();return this.on("data",s=>{t.push(s),this[R]||(t.dataLength+=s.length)}),await e,t}async concat(){if(this[R])throw new Error("cannot concat in objectMode");let t=await this.collect();return this[I]?t.join(""):Buffer.concat(t,t.dataLength)}async promise(){return new Promise((t,e)=>{this.on(x,()=>e(new Error("stream destroyed"))),this.on("error",s=>e(s)),this.on("end",()=>t())})}[Symbol.asyncIterator](){this[N]=!1;let t=!1,e=async()=>(this.pause(),t=!0,{value:void 0,done:!0});return{next:()=>{if(t)return e();let i=this.read();if(i!==null)return Promise.resolve({done:!1,value:i});if(this[G])return e();let n,o,h=f=>{this.off("data",a),this.off("end",l),this.off(x,c),e(),o(f)},a=f=>{this.off("error",h),this.off("end",l),this.off(x,c),this.pause(),n({value:f,done:!!this[G]})},l=()=>{this.off("error",h),this.off("data",a),this.off(x,c),e(),n({done:!0,value:void 0})},c=()=>h(new Error("stream destroyed"));return new Promise((f,u)=>{o=u,n=f,this.once(x,c),this.once("error",h),this.once("end",l),this.once("data",a)})},throw:e,return:e,[Symbol.asyncIterator](){return this}}}[Symbol.iterator](){this[N]=!1;let t=!1,e=()=>(this.pause(),this.off(oe,e),this.off(x,e),this.off("end",e),t=!0,{done:!0,value:void 0}),s=()=>{if(t)return e();let i=this.read();return i===null?e():{done:!1,value:i}};return this.once("end",e),this.once(oe,e),this.once(x,e),{next:s,throw:e,return:e,[Symbol.iterator](){return this}}}destroy(t){if(this[x])return t?this.emit("error",t):this.emit(x),this;this[x]=!0,this[N]=!0,this[C].length=0,this[T]=0;let e=this;return typeof e.close=="function"&&!this[Nt]&&e.close(),t?this.emit("error",t):this.emit(x),this}static get isStream(){return Oi}};var Ji=Hi.native,bt={lstatSync:Bi,readdir:Wi,readdirSync:Ui,readlinkSync:Gi,realpathSync:Ji,promises:{lstat:Ki,readdir:Vi,readlink:Yi,realpath:Xi}},rs=r=>!r||r===bt||r===qi?bt:{...bt,...r,promises:{...bt.promises,...r.promises||{}}},os=/^\\\\\?\\([a-z]:)\\?$/i,Zi=r=>r.replace(/\//g,"\\").replace(os,"$1\\"),Qi=/[\\\/]/,L=0,hs=1,as=2,U=4,ls=6,cs=8,Z=10,fs=12,z=15,yt=~z,ue=16,es=32,St=64,$=128,Pt=256,$t=512,ss=St|$|$t,tn=1023,de=r=>r.isFile()?cs:r.isDirectory()?U:r.isSymbolicLink()?Z:r.isCharacterDevice()?as:r.isBlockDevice()?ls:r.isSocket()?fs:r.isFIFO()?hs:L,is=new Map,Et=r=>{let t=is.get(r);if(t)return t;let e=r.normalize("NFKD");return is.set(r,e),e},ns=new Map,It=r=>{let t=ns.get(r);if(t)return t;let e=Et(r.toLowerCase());return ns.set(r,e),e},jt=class extends dt{constructor(){super({max:256})}},me=class extends dt{constructor(t=16*1024){super({maxSize:t,sizeCalculation:e=>e.length+1})}},us=Symbol("PathScurry setAsCwd"),k=class{name;root;roots;parent;nocase;isCWD=!1;#t;#e;get dev(){return this.#e}#r;get mode(){return this.#r}#i;get nlink(){return this.#i}#o;get uid(){return this.#o}#S;get gid(){return this.#S}#l;get rdev(){return this.#l}#f;get blksize(){return this.#f}#h;get ino(){return this.#h}#a;get size(){return this.#a}#n;get blocks(){return this.#n}#g;get atimeMs(){return this.#g}#w;get mtimeMs(){return this.#w}#d;get ctimeMs(){return this.#d}#u;get birthtimeMs(){return this.#u}#v;get atime(){return this.#v}#m;get mtime(){return this.#m}#C;get ctime(){return this.#C}#T;get birthtime(){return this.#T}#b;#E;#x;#p;#F;#A;#s;#N;#y;#O;get parentPath(){return(this.parent||this).fullpath()}get path(){return this.parentPath}constructor(t,e=L,s,i,n,o,h){this.name=t,this.#b=n?It(t):Et(t),this.#s=e&tn,this.nocase=n,this.roots=i,this.root=s||this,this.#N=o,this.#x=h.fullpath,this.#F=h.relative,this.#A=h.relativePosix,this.parent=h.parent,this.parent?this.#t=this.parent.#t:this.#t=rs(h.fs)}depth(){return this.#E!==void 0?this.#E:this.parent?this.#E=this.parent.depth()+1:this.#E=0}childrenCache(){return this.#N}resolve(t){if(!t)return this;let e=this.getRootString(t),i=t.substring(e.length).split(this.splitSep);return e?this.getRoot(e).#_(i):this.#_(i)}#_(t){let e=this;for(let s of t)e=e.child(s);return e}children(){let t=this.#N.get(this);if(t)return t;let e=Object.assign([],{provisional:0});return this.#N.set(this,e),this.#s&=~ue,e}child(t,e){if(t===""||t===".")return this;if(t==="..")return this.parent||this;let s=this.children(),i=this.nocase?It(t):Et(t);for(let a of s)if(a.#b===i)return a;let n=this.parent?this.sep:"",o=this.#x?this.#x+n+t:void 0,h=this.newChild(t,L,{...e,parent:this,fullpath:o});return this.canReaddir()||(h.#s|=$),s.push(h),h}relative(){if(this.isCWD)return"";if(this.#F!==void 0)return this.#F;let t=this.name,e=this.parent;if(!e)return this.#F=this.name;let s=e.relative();return s+(!s||!e.parent?"":this.sep)+t}relativePosix(){if(this.sep==="/")return this.relative();if(this.isCWD)return"";if(this.#A!==void 0)return this.#A;let t=this.name,e=this.parent;if(!e)return this.#A=this.fullpathPosix();let s=e.relativePosix();return s+(!s||!e.parent?"":"/")+t}fullpath(){if(this.#x!==void 0)return this.#x;let t=this.name,e=this.parent;if(!e)return this.#x=this.name;let i=e.fullpath()+(e.parent?this.sep:"")+t;return this.#x=i}fullpathPosix(){if(this.#p!==void 0)return this.#p;if(this.sep==="/")return this.#p=this.fullpath();if(!this.parent){let i=this.fullpath().replace(/\\/g,"/");return/^[a-z]:\//i.test(i)?this.#p=`//?/${i}`:this.#p=i}let t=this.parent,e=t.fullpathPosix(),s=e+(!e||!t.parent?"":"/")+this.name;return this.#p=s}isUnknown(){return(this.#s&z)===L}isType(t){return this[`is${t}`]()}getType(){return this.isUnknown()?"Unknown":this.isDirectory()?"Directory":this.isFile()?"File":this.isSymbolicLink()?"SymbolicLink":this.isFIFO()?"FIFO":this.isCharacterDevice()?"CharacterDevice":this.isBlockDevice()?"BlockDevice":this.isSocket()?"Socket":"Unknown"}isFile(){return(this.#s&z)===cs}isDirectory(){return(this.#s&z)===U}isCharacterDevice(){return(this.#s&z)===as}isBlockDevice(){return(this.#s&z)===ls}isFIFO(){return(this.#s&z)===hs}isSocket(){return(this.#s&z)===fs}isSymbolicLink(){return(this.#s&Z)===Z}lstatCached(){return this.#s&es?this:void 0}readlinkCached(){return this.#y}realpathCached(){return this.#O}readdirCached(){let t=this.children();return t.slice(0,t.provisional)}canReadlink(){if(this.#y)return!0;if(!this.parent)return!1;let t=this.#s&z;return!(t!==L&&t!==Z||this.#s&Pt||this.#s&$)}calledReaddir(){return!!(this.#s&ue)}isENOENT(){return!!(this.#s&$)}isNamed(t){return this.nocase?this.#b===It(t):this.#b===Et(t)}async readlink(){let t=this.#y;if(t)return t;if(this.canReadlink()&&this.parent)try{let e=await this.#t.promises.readlink(this.fullpath()),s=(await this.parent.realpath())?.resolve(e);if(s)return this.#y=s}catch(e){this.#c(e.code);return}}readlinkSync(){let t=this.#y;if(t)return t;if(this.canReadlink()&&this.parent)try{let e=this.#t.readlinkSync(this.fullpath()),s=this.parent.realpathSync()?.resolve(e);if(s)return this.#y=s}catch(e){this.#c(e.code);return}}#D(t){this.#s|=ue;for(let e=t.provisional;e<t.length;e++){let s=t[e];s&&s.#z()}}#z(){this.#s&$||(this.#s=(this.#s|$)&yt,this.#R())}#R(){let t=this.children();t.provisional=0;for(let e of t)e.#z()}#k(){this.#s|=$t,this.#L()}#L(){if(this.#s&St)return;let t=this.#s;(t&z)===U&&(t&=yt),this.#s=t|St,this.#R()}#P(t=""){t==="ENOTDIR"||t==="EPERM"?this.#L():t==="ENOENT"?this.#z():this.children().provisional=0}#I(t=""){t==="ENOTDIR"?this.parent.#L():t==="ENOENT"&&this.#z()}#c(t=""){let e=this.#s;e|=Pt,t==="ENOENT"&&(e|=$),(t==="EINVAL"||t==="UNKNOWN")&&(e&=yt),this.#s=e,t==="ENOTDIR"&&this.parent&&this.parent.#L()}#$(t,e){return this.#M(t,e)||this.#j(t,e)}#j(t,e){let s=de(t),i=this.newChild(t.name,s,{parent:this}),n=i.#s&z;return n!==U&&n!==Z&&n!==L&&(i.#s|=St),e.unshift(i),e.provisional++,i}#M(t,e){for(let s=e.provisional;s<e.length;s++){let i=e[s];if((this.nocase?It(t.name):Et(t.name))===i.#b)return this.#B(t,i,s,e)}}#B(t,e,s,i){let n=e.name;return e.#s=e.#s&yt|de(t),n!==t.name&&(e.name=t.name),s!==i.provisional&&(s===i.length-1?i.pop():i.splice(s,1),i.unshift(e)),i.provisional++,e}async lstat(){if((this.#s&$)===0)try{return this.#H(await this.#t.promises.lstat(this.fullpath())),this}catch(t){this.#I(t.code)}}lstatSync(){if((this.#s&$)===0)try{return this.#H(this.#t.lstatSync(this.fullpath())),this}catch(t){this.#I(t.code)}}#H(t){let{atime:e,atimeMs:s,birthtime:i,birthtimeMs:n,blksize:o,blocks:h,ctime:a,ctimeMs:l,dev:c,gid:f,ino:u,mode:d,mtime:m,mtimeMs:p,nlink:w,rdev:g,size:S,uid:b}=t;this.#v=e,this.#g=s,this.#T=i,this.#u=n,this.#f=o,this.#n=h,this.#C=a,this.#d=l,this.#e=c,this.#S=f,this.#h=u,this.#r=d,this.#m=m,this.#w=p,this.#i=w,this.#l=g,this.#a=S,this.#o=b;let y=de(t);this.#s=this.#s&yt|y|es,y!==L&&y!==U&&y!==Z&&(this.#s|=St)}#U=[];#G=!1;#q(t){this.#G=!1;let e=this.#U.slice();this.#U.length=0,e.forEach(s=>s(null,t))}readdirCB(t,e=!1){if(!this.canReaddir()){e?t(null,[]):queueMicrotask(()=>t(null,[]));return}let s=this.children();if(this.calledReaddir()){let n=s.slice(0,s.provisional);e?t(null,n):queueMicrotask(()=>t(null,n));return}if(this.#U.push(t),this.#G)return;this.#G=!0;let i=this.fullpath();this.#t.readdir(i,{withFileTypes:!0},(n,o)=>{if(n)this.#P(n.code),s.provisional=0;else{for(let h of o)this.#$(h,s);this.#D(s)}this.#q(s.slice(0,s.provisional))})}#W;async readdir(){if(!this.canReaddir())return[];let t=this.children();if(this.calledReaddir())return t.slice(0,t.provisional);let e=this.fullpath();if(this.#W)await this.#W;else{let s=()=>{};this.#W=new Promise(i=>s=i);try{for(let i of await this.#t.promises.readdir(e,{withFileTypes:!0}))this.#$(i,t);this.#D(t)}catch(i){this.#P(i.code),t.provisional=0}this.#W=void 0,s()}return t.slice(0,t.provisional)}readdirSync(){if(!this.canReaddir())return[];let t=this.children();if(this.calledReaddir())return t.slice(0,t.provisional);let e=this.fullpath();try{for(let s of this.#t.readdirSync(e,{withFileTypes:!0}))this.#$(s,t);this.#D(t)}catch(s){this.#P(s.code),t.provisional=0}return t.slice(0,t.provisional)}canReaddir(){if(this.#s&ss)return!1;let t=z&this.#s;return t===L||t===U||t===Z}shouldWalk(t,e){return(this.#s&U)===U&&!(this.#s&ss)&&!t.has(this)&&(!e||e(this))}async realpath(){if(this.#O)return this.#O;if(!(($t|Pt|$)&this.#s))try{let t=await this.#t.promises.realpath(this.fullpath());return this.#O=this.resolve(t)}catch{this.#k()}}realpathSync(){if(this.#O)return this.#O;if(!(($t|Pt|$)&this.#s))try{let t=this.#t.realpathSync(this.fullpath());return this.#O=this.resolve(t)}catch{this.#k()}}[us](t){if(t===this)return;t.isCWD=!1,this.isCWD=!0;let e=new Set([]),s=[],i=this;for(;i&&i.parent;)e.add(i),i.#F=s.join(this.sep),i.#A=s.join("/"),i=i.parent,s.push("..");for(i=t;i&&i.parent&&!e.has(i);)i.#F=void 0,i.#A=void 0,i=i.parent}},Bt=class r extends k{sep="\\";splitSep=Qi;constructor(t,e=L,s,i,n,o,h){super(t,e,s,i,n,o,h)}newChild(t,e=L,s={}){return new r(t,e,this.root,this.roots,this.nocase,this.childrenCache(),s)}getRootString(t){return pe.parse(t).root}getRoot(t){if(t=Zi(t.toUpperCase()),t===this.root.name)return this.root;for(let[e,s]of Object.entries(this.roots))if(this.sameRoot(t,e))return this.roots[t]=s;return this.roots[t]=new rt(t,this).root}sameRoot(t,e=this.root.name){return t=t.toUpperCase().replace(/\//g,"\\").replace(os,"$1\\"),t===e}},Wt=class r extends k{splitSep="/";sep="/";constructor(t,e=L,s,i,n,o,h){super(t,e,s,i,n,o,h)}getRootString(t){return t.startsWith("/")?"/":""}getRoot(t){return this.root}newChild(t,e=L,s={}){return new r(t,e,this.root,this.roots,this.nocase,this.childrenCache(),s)}},Ut=class{root;rootPath;roots;cwd;#t;#e;#r;nocase;#i;constructor(t=process.cwd(),e,s,{nocase:i,childrenCacheSize:n=16*1024,fs:o=bt}={}){this.#i=rs(o),(t instanceof URL||t.startsWith("file://"))&&(t=ji(t));let h=e.resolve(t);this.roots=Object.create(null),this.rootPath=this.parseRootPath(h),this.#t=new jt,this.#e=new jt,this.#r=new me(n);let a=h.substring(this.rootPath.length).split(s);if(a.length===1&&!a[0]&&a.pop(),i===void 0)throw new TypeError("must provide nocase setting to PathScurryBase ctor");this.nocase=i,this.root=this.newRoot(this.#i),this.roots[this.rootPath]=this.root;let l=this.root,c=a.length-1,f=e.sep,u=this.rootPath,d=!1;for(let m of a){let p=c--;l=l.child(m,{relative:new Array(p).fill("..").join(f),relativePosix:new Array(p).fill("..").join("/"),fullpath:u+=(d?"":f)+m}),d=!0}this.cwd=l}depth(t=this.cwd){return typeof t=="string"&&(t=this.cwd.resolve(t)),t.depth()}childrenCache(){return this.#r}resolve(...t){let e="";for(let n=t.length-1;n>=0;n--){let o=t[n];if(!(!o||o===".")&&(e=e?`${o}/${e}`:o,this.isAbsolute(o)))break}let s=this.#t.get(e);if(s!==void 0)return s;let i=this.cwd.resolve(e).fullpath();return this.#t.set(e,i),i}resolvePosix(...t){let e="";for(let n=t.length-1;n>=0;n--){let o=t[n];if(!(!o||o===".")&&(e=e?`${o}/${e}`:o,this.isAbsolute(o)))break}let s=this.#e.get(e);if(s!==void 0)return s;let i=this.cwd.resolve(e).fullpathPosix();return this.#e.set(e,i),i}relative(t=this.cwd){return typeof t=="string"&&(t=this.cwd.resolve(t)),t.relative()}relativePosix(t=this.cwd){return typeof t=="string"&&(t=this.cwd.resolve(t)),t.relativePosix()}basename(t=this.cwd){return typeof t=="string"&&(t=this.cwd.resolve(t)),t.name}dirname(t=this.cwd){return typeof t=="string"&&(t=this.cwd.resolve(t)),(t.parent||t).fullpath()}async readdir(t=this.cwd,e={withFileTypes:!0}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof k||(e=t,t=this.cwd);let{withFileTypes:s}=e;if(t.canReaddir()){let i=await t.readdir();return s?i:i.map(n=>n.name)}else return[]}readdirSync(t=this.cwd,e={withFileTypes:!0}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof k||(e=t,t=this.cwd);let{withFileTypes:s=!0}=e;return t.canReaddir()?s?t.readdirSync():t.readdirSync().map(i=>i.name):[]}async lstat(t=this.cwd){return typeof t=="string"&&(t=this.cwd.resolve(t)),t.lstat()}lstatSync(t=this.cwd){return typeof t=="string"&&(t=this.cwd.resolve(t)),t.lstatSync()}async readlink(t=this.cwd,{withFileTypes:e}={withFileTypes:!1}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof k||(e=t.withFileTypes,t=this.cwd);let s=await t.readlink();return e?s:s?.fullpath()}readlinkSync(t=this.cwd,{withFileTypes:e}={withFileTypes:!1}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof k||(e=t.withFileTypes,t=this.cwd);let s=t.readlinkSync();return e?s:s?.fullpath()}async realpath(t=this.cwd,{withFileTypes:e}={withFileTypes:!1}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof k||(e=t.withFileTypes,t=this.cwd);let s=await t.realpath();return e?s:s?.fullpath()}realpathSync(t=this.cwd,{withFileTypes:e}={withFileTypes:!1}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof k||(e=t.withFileTypes,t=this.cwd);let s=t.realpathSync();return e?s:s?.fullpath()}async walk(t=this.cwd,e={}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof k||(e=t,t=this.cwd);let{withFileTypes:s=!0,follow:i=!1,filter:n,walkFilter:o}=e,h=[];(!n||n(t))&&h.push(s?t:t.fullpath());let a=new Set,l=(f,u)=>{a.add(f),f.readdirCB((d,m)=>{if(d)return u(d);let p=m.length;if(!p)return u();let w=()=>{--p===0&&u()};for(let g of m)(!n||n(g))&&h.push(s?g:g.fullpath()),i&&g.isSymbolicLink()?g.realpath().then(S=>S?.isUnknown()?S.lstat():S).then(S=>S?.shouldWalk(a,o)?l(S,w):w()):g.shouldWalk(a,o)?l(g,w):w()},!0)},c=t;return new Promise((f,u)=>{l(c,d=>{if(d)return u(d);f(h)})})}walkSync(t=this.cwd,e={}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof k||(e=t,t=this.cwd);let{withFileTypes:s=!0,follow:i=!1,filter:n,walkFilter:o}=e,h=[];(!n||n(t))&&h.push(s?t:t.fullpath());let a=new Set([t]);for(let l of a){let c=l.readdirSync();for(let f of c){(!n||n(f))&&h.push(s?f:f.fullpath());let u=f;if(f.isSymbolicLink()){if(!(i&&(u=f.realpathSync())))continue;u.isUnknown()&&u.lstatSync()}u.shouldWalk(a,o)&&a.add(u)}}return h}[Symbol.asyncIterator](){return this.iterate()}iterate(t=this.cwd,e={}){return typeof t=="string"?t=this.cwd.resolve(t):t instanceof k||(e=t,t=this.cwd),this.stream(t,e)[Symbol.asyncIterator]()}[Symbol.iterator](){return this.iterateSync()}*iterateSync(t=this.cwd,e={}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof k||(e=t,t=this.cwd);let{withFileTypes:s=!0,follow:i=!1,filter:n,walkFilter:o}=e;(!n||n(t))&&(yield s?t:t.fullpath());let h=new Set([t]);for(let a of h){let l=a.readdirSync();for(let c of l){(!n||n(c))&&(yield s?c:c.fullpath());let f=c;if(c.isSymbolicLink()){if(!(i&&(f=c.realpathSync())))continue;f.isUnknown()&&f.lstatSync()}f.shouldWalk(h,o)&&h.add(f)}}}stream(t=this.cwd,e={}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof k||(e=t,t=this.cwd);let{withFileTypes:s=!0,follow:i=!1,filter:n,walkFilter:o}=e,h=new Y({objectMode:!0});(!n||n(t))&&h.write(s?t:t.fullpath());let a=new Set,l=[t],c=0,f=()=>{let u=!1;for(;!u;){let d=l.shift();if(!d){c===0&&h.end();return}c++,a.add(d);let m=(w,g,S=!1)=>{if(w)return h.emit("error",w);if(i&&!S){let b=[];for(let y of g)y.isSymbolicLink()&&b.push(y.realpath().then(E=>E?.isUnknown()?E.lstat():E));if(b.length){Promise.all(b).then(()=>m(null,g,!0));return}}for(let b of g)b&&(!n||n(b))&&(h.write(s?b:b.fullpath())||(u=!0));c--;for(let b of g){let y=b.realpathCached()||b;y.shouldWalk(a,o)&&l.push(y)}u&&!h.flowing?h.once("drain",f):p||f()},p=!0;d.readdirCB(m,!0),p=!1}};return f(),h}streamSync(t=this.cwd,e={}){typeof t=="string"?t=this.cwd.resolve(t):t instanceof k||(e=t,t=this.cwd);let{withFileTypes:s=!0,follow:i=!1,filter:n,walkFilter:o}=e,h=new Y({objectMode:!0}),a=new Set;(!n||n(t))&&h.write(s?t:t.fullpath());let l=[t],c=0,f=()=>{let u=!1;for(;!u;){let d=l.shift();if(!d){c===0&&h.end();return}c++,a.add(d);let m=d.readdirSync();for(let p of m)(!n||n(p))&&(h.write(s?p:p.fullpath())||(u=!0));c--;for(let p of m){let w=p;if(p.isSymbolicLink()){if(!(i&&(w=p.realpathSync())))continue;w.isUnknown()&&w.lstatSync()}w.shouldWalk(a,o)&&l.push(w)}}u&&!h.flowing&&h.once("drain",f)};return f(),h}chdir(t=this.cwd){let e=this.cwd;this.cwd=typeof t=="string"?this.cwd.resolve(t):t,this.cwd[us](e)}},rt=class extends Ut{sep="\\";constructor(t=process.cwd(),e={}){let{nocase:s=!0}=e;super(t,pe,"\\",{...e,nocase:s}),this.nocase=s;for(let i=this.cwd;i;i=i.parent)i.nocase=this.nocase}parseRootPath(t){return pe.parse(t).root.toUpperCase()}newRoot(t){return new Bt(this.rootPath,U,void 0,this.roots,this.nocase,this.childrenCache(),{fs:t})}isAbsolute(t){return t.startsWith("/")||t.startsWith("\\")||/^[a-z]:(\/|\\)/i.test(t)}},ot=class extends Ut{sep="/";constructor(t=process.cwd(),e={}){let{nocase:s=!1}=e;super(t,$i,"/",{...e,nocase:s}),this.nocase=s}parseRootPath(t){return"/"}newRoot(t){return new Wt(this.rootPath,U,void 0,this.roots,this.nocase,this.childrenCache(),{fs:t})}isAbsolute(t){return t.startsWith("/")}},xt=class extends ot{constructor(t=process.cwd(),e={}){let{nocase:s=!0}=e;super(t,{...e,nocase:s})}},cr=process.platform==="win32"?Bt:Wt,ds=process.platform==="win32"?rt:process.platform==="darwin"?xt:ot;var en=r=>r.length>=1,sn=r=>r.length>=1,ht=class r{#t;#e;#r;length;#i;#o;#S;#l;#f;#h;#a=!0;constructor(t,e,s,i){if(!en(t))throw new TypeError("empty pattern list");if(!sn(e))throw new TypeError("empty glob list");if(e.length!==t.length)throw new TypeError("mismatched pattern list and glob list lengths");if(this.length=t.length,s<0||s>=this.length)throw new TypeError("index out of range");if(this.#t=t,this.#e=e,this.#r=s,this.#i=i,this.#r===0){if(this.isUNC()){let[n,o,h,a,...l]=this.#t,[c,f,u,d,...m]=this.#e;l[0]===""&&(l.shift(),m.shift());let p=[n,o,h,a,""].join("/"),w=[c,f,u,d,""].join("/");this.#t=[p,...l],this.#e=[w,...m],this.length=this.#t.length}else if(this.isDrive()||this.isAbsolute()){let[n,...o]=this.#t,[h,...a]=this.#e;o[0]===""&&(o.shift(),a.shift());let l=n+"/",c=h+"/";this.#t=[l,...o],this.#e=[c,...a],this.length=this.#t.length}}}pattern(){return this.#t[this.#r]}isString(){return typeof this.#t[this.#r]=="string"}isGlobstar(){return this.#t[this.#r]===A}isRegExp(){return this.#t[this.#r]instanceof RegExp}globString(){return this.#S=this.#S||(this.#r===0?this.isAbsolute()?this.#e[0]+this.#e.slice(1).join("/"):this.#e.join("/"):this.#e.slice(this.#r).join("/"))}hasMore(){return this.length>this.#r+1}rest(){return this.#o!==void 0?this.#o:this.hasMore()?(this.#o=new r(this.#t,this.#e,this.#r+1,this.#i),this.#o.#h=this.#h,this.#o.#f=this.#f,this.#o.#l=this.#l,this.#o):this.#o=null}isUNC(){let t=this.#t;return this.#f!==void 0?this.#f:this.#f=this.#i==="win32"&&this.#r===0&&t[0]===""&&t[1]===""&&typeof t[2]=="string"&&!!t[2]&&typeof t[3]=="string"&&!!t[3]}isDrive(){let t=this.#t;return this.#l!==void 0?this.#l:this.#l=this.#i==="win32"&&this.#r===0&&this.length>1&&typeof t[0]=="string"&&/^[a-z]:$/i.test(t[0])}isAbsolute(){let t=this.#t;return this.#h!==void 0?this.#h:this.#h=t[0]===""&&t.length>1||this.isDrive()||this.isUNC()}root(){let t=this.#t[0];return typeof t=="string"&&this.isAbsolute()&&this.#r===0?t:""}checkFollowGlobstar(){return!(this.#r===0||!this.isGlobstar()||!this.#a)}markFollowGlobstar(){return this.#r===0||!this.isGlobstar()||!this.#a?!1:(this.#a=!1,!0)}};var nn=typeof process=="object"&&process&&typeof process.platform=="string"?process.platform:"linux",at=class{relative;relativeChildren;absolute;absoluteChildren;platform;mmopts;constructor(t,{nobrace:e,nocase:s,noext:i,noglobstar:n,platform:o=nn}){this.relative=[],this.absolute=[],this.relativeChildren=[],this.absoluteChildren=[],this.platform=o,this.mmopts={dot:!0,nobrace:e,nocase:s,noext:i,noglobstar:n,optimizationLevel:2,platform:o,nocomment:!0,nonegate:!0};for(let h of t)this.add(h)}add(t){let e=new M(t,this.mmopts);for(let s=0;s<e.set.length;s++){let i=e.set[s],n=e.globParts[s];if(!i||!n)throw new Error("invalid pattern object");for(;i[0]==="."&&n[0]===".";)i.shift(),n.shift();let o=new ht(i,n,0,this.platform),h=new M(o.globString(),this.mmopts),a=n[n.length-1]==="**",l=o.isAbsolute();l?this.absolute.push(h):this.relative.push(h),a&&(l?this.absoluteChildren.push(h):this.relativeChildren.push(h))}}ignored(t){let e=t.fullpath(),s=`${e}/`,i=t.relative()||".",n=`${i}/`;for(let o of this.relative)if(o.match(i)||o.match(n))return!0;for(let o of this.absolute)if(o.match(e)||o.match(s))return!0;return!1}childrenIgnored(t){let e=t.fullpath()+"/",s=(t.relative()||".")+"/";for(let i of this.relativeChildren)if(i.match(s))return!0;for(let i of this.absoluteChildren)if(i.match(e))return!0;return!1}};var ge=class r{store;constructor(t=new Map){this.store=t}copy(){return new r(new Map(this.store))}hasWalked(t,e){return this.store.get(t.fullpath())?.has(e.globString())}storeWalked(t,e){let s=t.fullpath(),i=this.store.get(s);i?i.add(e.globString()):this.store.set(s,new Set([e.globString()]))}},we=class{store=new Map;add(t,e,s){let i=(e?2:0)|(s?1:0),n=this.store.get(t);this.store.set(t,n===void 0?i:i&n)}entries(){return[...this.store.entries()].map(([t,e])=>[t,!!(e&2),!!(e&1)])}},ye=class{store=new Map;add(t,e){if(!t.canReaddir())return;let s=this.store.get(t);s?s.find(i=>i.globString()===e.globString())||s.push(e):this.store.set(t,[e])}get(t){let e=this.store.get(t);if(!e)throw new Error("attempting to walk unknown path");return e}entries(){return this.keys().map(t=>[t,this.store.get(t)])}keys(){return[...this.store.keys()].filter(t=>t.canReaddir())}},vt=class r{hasWalkedCache;matches=new we;subwalks=new ye;patterns;follow;dot;opts;constructor(t,e){this.opts=t,this.follow=!!t.follow,this.dot=!!t.dot,this.hasWalkedCache=e?e.copy():new ge}processPatterns(t,e){this.patterns=e;let s=e.map(i=>[t,i]);for(let[i,n]of s){this.hasWalkedCache.storeWalked(i,n);let o=n.root(),h=n.isAbsolute()&&this.opts.absolute!==!1;if(o){i=i.resolve(o==="/"&&this.opts.root!==void 0?this.opts.root:o);let f=n.rest();if(f)n=f;else{this.matches.add(i,!0,!1);continue}}if(i.isENOENT())continue;let a,l,c=!1;for(;typeof(a=n.pattern())=="string"&&(l=n.rest());)i=i.resolve(a),n=l,c=!0;if(a=n.pattern(),l=n.rest(),c){if(this.hasWalkedCache.hasWalked(i,n))continue;this.hasWalkedCache.storeWalked(i,n)}if(typeof a=="string"){let f=a===".."||a===""||a===".";this.matches.add(i.resolve(a),h,f);continue}else if(a===A){(!i.isSymbolicLink()||this.follow||n.checkFollowGlobstar())&&this.subwalks.add(i,n);let f=l?.pattern(),u=l?.rest();if(!l||(f===""||f===".")&&!u)this.matches.add(i,h,f===""||f===".");else if(f===".."){let d=i.parent||i;u?this.hasWalkedCache.hasWalked(d,u)||this.subwalks.add(d,u):this.matches.add(d,h,!0)}}else a instanceof RegExp&&this.subwalks.add(i,n)}return this}subwalkTargets(){return this.subwalks.keys()}child(){return new r(this.opts,this.hasWalkedCache)}filterEntries(t,e){let s=this.subwalks.get(t),i=this.child();for(let n of e)for(let o of s){let h=o.isAbsolute(),a=o.pattern(),l=o.rest();a===A?i.testGlobstar(n,o,l,h):a instanceof RegExp?i.testRegExp(n,a,l,h):i.testString(n,a,l,h)}return i}testGlobstar(t,e,s,i){if((this.dot||!t.name.startsWith("."))&&(e.hasMore()||this.matches.add(t,i,!1),t.canReaddir()&&(this.follow||!t.isSymbolicLink()?this.subwalks.add(t,e):t.isSymbolicLink()&&(s&&e.checkFollowGlobstar()?this.subwalks.add(t,s):e.markFollowGlobstar()&&this.subwalks.add(t,e)))),s){let n=s.pattern();if(typeof n=="string"&&n!==".."&&n!==""&&n!==".")this.testString(t,n,s.rest(),i);else if(n===".."){let o=t.parent||t;this.subwalks.add(o,s)}else n instanceof RegExp&&this.testRegExp(t,n,s.rest(),i)}}testRegExp(t,e,s,i){e.test(t.name)&&(s?this.subwalks.add(t,s):this.matches.add(t,i,!1))}testString(t,e,s,i){t.isNamed(e)&&(s?this.subwalks.add(t,s):this.matches.add(t,i,!1))}};var rn=(r,t)=>typeof r=="string"?new at([r],t):Array.isArray(r)?new at(r,t):r,Gt=class{path;patterns;opts;seen=new Set;paused=!1;aborted=!1;#t=[];#e;#r;signal;maxDepth;includeChildMatches;constructor(t,e,s){if(this.patterns=t,this.path=e,this.opts=s,this.#r=!s.posix&&s.platform==="win32"?"\\":"/",this.includeChildMatches=s.includeChildMatches!==!1,(s.ignore||!this.includeChildMatches)&&(this.#e=rn(s.ignore??[],s),!this.includeChildMatches&&typeof this.#e.add!="function")){let i="cannot ignore child matches, ignore lacks add() method.";throw new Error(i)}this.maxDepth=s.maxDepth||1/0,s.signal&&(this.signal=s.signal,this.signal.addEventListener("abort",()=>{this.#t.length=0}))}#i(t){return this.seen.has(t)||!!this.#e?.ignored?.(t)}#o(t){return!!this.#e?.childrenIgnored?.(t)}pause(){this.paused=!0}resume(){if(this.signal?.aborted)return;this.paused=!1;let t;for(;!this.paused&&(t=this.#t.shift());)t()}onResume(t){this.signal?.aborted||(this.paused?this.#t.push(t):t())}async matchCheck(t,e){if(e&&this.opts.nodir)return;let s;if(this.opts.realpath){if(s=t.realpathCached()||await t.realpath(),!s)return;t=s}let n=t.isUnknown()||this.opts.stat?await t.lstat():t;if(this.opts.follow&&this.opts.nodir&&n?.isSymbolicLink()){let o=await n.realpath();o&&(o.isUnknown()||this.opts.stat)&&await o.lstat()}return this.matchCheckTest(n,e)}matchCheckTest(t,e){return t&&(this.maxDepth===1/0||t.depth()<=this.maxDepth)&&(!e||t.canReaddir())&&(!this.opts.nodir||!t.isDirectory())&&(!this.opts.nodir||!this.opts.follow||!t.isSymbolicLink()||!t.realpathCached()?.isDirectory())&&!this.#i(t)?t:void 0}matchCheckSync(t,e){if(e&&this.opts.nodir)return;let s;if(this.opts.realpath){if(s=t.realpathCached()||t.realpathSync(),!s)return;t=s}let n=t.isUnknown()||this.opts.stat?t.lstatSync():t;if(this.opts.follow&&this.opts.nodir&&n?.isSymbolicLink()){let o=n.realpathSync();o&&(o?.isUnknown()||this.opts.stat)&&o.lstatSync()}return this.matchCheckTest(n,e)}matchFinish(t,e){if(this.#i(t))return;if(!this.includeChildMatches&&this.#e?.add){let n=`${t.relativePosix()}/**`;this.#e.add(n)}let s=this.opts.absolute===void 0?e:this.opts.absolute;this.seen.add(t);let i=this.opts.mark&&t.isDirectory()?this.#r:"";if(this.opts.withFileTypes)this.matchEmit(t);else if(s){let n=this.opts.posix?t.fullpathPosix():t.fullpath();this.matchEmit(n+i)}else{let n=this.opts.posix?t.relativePosix():t.relative(),o=this.opts.dotRelative&&!n.startsWith(".."+this.#r)?"."+this.#r:"";this.matchEmit(n?o+n+i:"."+i)}}async match(t,e,s){let i=await this.matchCheck(t,s);i&&this.matchFinish(i,e)}matchSync(t,e,s){let i=this.matchCheckSync(t,s);i&&this.matchFinish(i,e)}walkCB(t,e,s){this.signal?.aborted&&s(),this.walkCB2(t,e,new vt(this.opts),s)}walkCB2(t,e,s,i){if(this.#o(t))return i();if(this.signal?.aborted&&i(),this.paused){this.onResume(()=>this.walkCB2(t,e,s,i));return}s.processPatterns(t,e);let n=1,o=()=>{--n===0&&i()};for(let[h,a,l]of s.matches.entries())this.#i(h)||(n++,this.match(h,a,l).then(()=>o()));for(let h of s.subwalkTargets()){if(this.maxDepth!==1/0&&h.depth()>=this.maxDepth)continue;n++;let a=h.readdirCached();h.calledReaddir()?this.walkCB3(h,a,s,o):h.readdirCB((l,c)=>this.walkCB3(h,c,s,o),!0)}o()}walkCB3(t,e,s,i){s=s.filterEntries(t,e);let n=1,o=()=>{--n===0&&i()};for(let[h,a,l]of s.matches.entries())this.#i(h)||(n++,this.match(h,a,l).then(()=>o()));for(let[h,a]of s.subwalks.entries())n++,this.walkCB2(h,a,s.child(),o);o()}walkCBSync(t,e,s){this.signal?.aborted&&s(),this.walkCB2Sync(t,e,new vt(this.opts),s)}walkCB2Sync(t,e,s,i){if(this.#o(t))return i();if(this.signal?.aborted&&i(),this.paused){this.onResume(()=>this.walkCB2Sync(t,e,s,i));return}s.processPatterns(t,e);let n=1,o=()=>{--n===0&&i()};for(let[h,a,l]of s.matches.entries())this.#i(h)||this.matchSync(h,a,l);for(let h of s.subwalkTargets()){if(this.maxDepth!==1/0&&h.depth()>=this.maxDepth)continue;n++;let a=h.readdirSync();this.walkCB3Sync(h,a,s,o)}o()}walkCB3Sync(t,e,s,i){s=s.filterEntries(t,e);let n=1,o=()=>{--n===0&&i()};for(let[h,a,l]of s.matches.entries())this.#i(h)||this.matchSync(h,a,l);for(let[h,a]of s.subwalks.entries())n++,this.walkCB2Sync(h,a,s.child(),o);o()}},Ct=class extends Gt{matches=new Set;constructor(t,e,s){super(t,e,s)}matchEmit(t){this.matches.add(t)}async walk(){if(this.signal?.aborted)throw this.signal.reason;return this.path.isUnknown()&&await this.path.lstat(),await new Promise((t,e)=>{this.walkCB(this.path,this.patterns,()=>{this.signal?.aborted?e(this.signal.reason):t(this.matches)})}),this.matches}walkSync(){if(this.signal?.aborted)throw this.signal.reason;return this.path.isUnknown()&&this.path.lstatSync(),this.walkCBSync(this.path,this.patterns,()=>{if(this.signal?.aborted)throw this.signal.reason}),this.matches}},Tt=class extends Gt{results;constructor(t,e,s){super(t,e,s),this.results=new Y({signal:this.signal,objectMode:!0}),this.results.on("drain",()=>this.resume()),this.results.on("resume",()=>this.resume())}matchEmit(t){this.results.write(t),this.results.flowing||this.pause()}stream(){let t=this.path;return t.isUnknown()?t.lstat().then(()=>{this.walkCB(t,this.patterns,()=>this.results.end())}):this.walkCB(t,this.patterns,()=>this.results.end()),this.results}streamSync(){return this.path.isUnknown()&&this.path.lstatSync(),this.walkCBSync(this.path,this.patterns,()=>this.results.end()),this.results}};var hn=typeof process=="object"&&process&&typeof process.platform=="string"?process.platform:"linux",j=class{absolute;cwd;root;dot;dotRelative;follow;ignore;magicalBraces;mark;matchBase;maxDepth;nobrace;nocase;nodir;noext;noglobstar;pattern;platform;realpath;scurry;stat;signal;windowsPathsNoEscape;withFileTypes;includeChildMatches;opts;patterns;constructor(t,e){if(!e)throw new TypeError("glob options required");if(this.withFileTypes=!!e.withFileTypes,this.signal=e.signal,this.follow=!!e.follow,this.dot=!!e.dot,this.dotRelative=!!e.dotRelative,this.nodir=!!e.nodir,this.mark=!!e.mark,e.cwd?(e.cwd instanceof URL||e.cwd.startsWith("file://"))&&(e.cwd=on(e.cwd)):this.cwd="",this.cwd=e.cwd||"",this.root=e.root,this.magicalBraces=!!e.magicalBraces,this.nobrace=!!e.nobrace,this.noext=!!e.noext,this.realpath=!!e.realpath,this.absolute=e.absolute,this.includeChildMatches=e.includeChildMatches!==!1,this.noglobstar=!!e.noglobstar,this.matchBase=!!e.matchBase,this.maxDepth=typeof e.maxDepth=="number"?e.maxDepth:1/0,this.stat=!!e.stat,this.ignore=e.ignore,this.withFileTypes&&this.absolute!==void 0)throw new Error("cannot set absolute and withFileTypes:true");if(typeof t=="string"&&(t=[t]),this.windowsPathsNoEscape=!!e.windowsPathsNoEscape||e.allowWindowsEscape===!1,this.windowsPathsNoEscape&&(t=t.map(a=>a.replace(/\\/g,"/"))),this.matchBase){if(e.noglobstar)throw new TypeError("base matching requires globstar");t=t.map(a=>a.includes("/")?a:`./**/${a}`)}if(this.pattern=t,this.platform=e.platform||hn,this.opts={...e,platform:this.platform},e.scurry){if(this.scurry=e.scurry,e.nocase!==void 0&&e.nocase!==e.scurry.nocase)throw new Error("nocase option contradicts provided scurry option")}else{let a=e.platform==="win32"?rt:e.platform==="darwin"?xt:e.platform?ot:ds;this.scurry=new a(this.cwd,{nocase:e.nocase,fs:e.fs})}this.nocase=this.scurry.nocase;let s=this.platform==="darwin"||this.platform==="win32",i={...e,dot:this.dot,matchBase:this.matchBase,nobrace:this.nobrace,nocase:this.nocase,nocaseMagicOnly:s,nocomment:!0,noext:this.noext,nonegate:!0,optimizationLevel:2,platform:this.platform,windowsPathsNoEscape:this.windowsPathsNoEscape,debug:!!this.opts.debug},n=this.pattern.map(a=>new M(a,i)),[o,h]=n.reduce((a,l)=>(a[0].push(...l.set),a[1].push(...l.globParts),a),[[],[]]);this.patterns=o.map((a,l)=>{let c=h[l];if(!c)throw new Error("invalid pattern object");return new ht(a,c,0,this.platform)})}async walk(){return[...await new Ct(this.patterns,this.scurry.cwd,{...this.opts,maxDepth:this.maxDepth!==1/0?this.maxDepth+this.scurry.cwd.depth():1/0,platform:this.platform,nocase:this.nocase,includeChildMatches:this.includeChildMatches}).walk()]}walkSync(){return[...new Ct(this.patterns,this.scurry.cwd,{...this.opts,maxDepth:this.maxDepth!==1/0?this.maxDepth+this.scurry.cwd.depth():1/0,platform:this.platform,nocase:this.nocase,includeChildMatches:this.includeChildMatches}).walkSync()]}stream(){return new Tt(this.patterns,this.scurry.cwd,{...this.opts,maxDepth:this.maxDepth!==1/0?this.maxDepth+this.scurry.cwd.depth():1/0,platform:this.platform,nocase:this.nocase,includeChildMatches:this.includeChildMatches}).stream()}streamSync(){return new Tt(this.patterns,this.scurry.cwd,{...this.opts,maxDepth:this.maxDepth!==1/0?this.maxDepth+this.scurry.cwd.depth():1/0,platform:this.platform,nocase:this.nocase,includeChildMatches:this.includeChildMatches}).streamSync()}iterateSync(){return this.streamSync()[Symbol.iterator]()}[Symbol.iterator](){return this.iterateSync()}iterate(){return this.stream()[Symbol.asyncIterator]()}[Symbol.asyncIterator](){return this.iterate()}};var be=(r,t={})=>{Array.isArray(r)||(r=[r]);for(let e of r)if(new M(e,t).hasMagic())return!0;return!1};function Ht(r,t={}){return new j(r,t).streamSync()}function gs(r,t={}){return new j(r,t).stream()}function qt(r,t={}){return new j(r,t).walkSync()}async function ps(r,t={}){return new j(r,t).walk()}function Jt(r,t={}){return new j(r,t).iterateSync()}function ws(r,t={}){return new j(r,t).iterate()}var an=Ht,ln=Object.assign(gs,{sync:Ht}),cn=Jt,fn=Object.assign(ws,{sync:Jt}),un=Object.assign(qt,{stream:Ht,iterate:Jt}),ms=Object.assign(ps,{glob:ps,globSync:qt,sync:un,globStream:gs,stream:ln,globStreamSync:Ht,streamSync:an,globIterate:ws,iterate:fn,globIterateSync:Jt,iterateSync:cn,Glob:j,hasMagic:be,escape:tt,unescape:P});ms.glob=ms;import dn from"node:fs";function ys(r){return JSON.parse(dn.readFileSync(r).toString("utf-8"))}function Kt(r){return ys(r)}function Se(r){return ys(r)}function q(r){return(process.env[`INPUT_${r.toUpperCase()}`]||"").trim()}function Ee(r,t){return["true","True","TRUE"].includes(q(r)||t)}function xe(r,t){let e=q(r);return e===""?t:Number.parseInt(e,10)}function bs(r){let t=pn(r);Vt.mkdirSync(Yt.join(At.cwd(),r.analyzerDirectory),{recursive:!0});let e=Yt.join(At.cwd(),r.analyzerDirectory,"bundle_analysis.json");Vt.writeFileSync(e,JSON.stringify(t,null,2)),lt.log(`Wrote ${e}`,t)}function ve(r){return r.metafiles.flatMap(t=>qt(Yt.join(At.cwd(),t),{nodir:!0}).map(e=>({relativePath:Yt.relative(At.cwd(),e),absolutePath:e})))}function pn(r){let t={},e=ve(r),s=e.reduce((i,{relativePath:n,absolutePath:o})=>{try{Vt.accessSync(o,Vt.constants.R_OK)}catch{lt.error(`No meta file found at "${o}" - a path to meta file may be wrong, or esbuild is not executed.`),At.exit(1)}let h=Kt(o);return Object.entries(h.outputs).reduce((a,l)=>{let[c,f]=l;return r.includeExtensions.some(u=>c.toLowerCase().endsWith(u))&&(a[`${n} -> ${c}`]={bytes:f.bytes,metafile:n,outfile:c}),a},i),i},t);return lt.log("Found metafiles",e),lt.log("Found result",s),s}function xs(r){let t=!1,e=`## \u{1F4E6} esbuild Bundle Analysis for ${r.name}

This analysis was generated by [esbuild-bundle-analyzer](https://github.com/exoego/esbuild-bundle-analyzer). \u{1F916}
`,s=Rt.join(process.cwd(),r.analyzerDirectory,"bundle_analysis.json"),i=Se(s);_.log(`Current analysis found in ${s}`,i);let n=wn(r),o=yn(r),a=[...new Set([...Object.keys(i),...Object.keys(n)])].sort().map(l=>{let c=i[l],f=n[l];if(_.log("Comparing",l,c,f),!c)return _.log("Deleted file",l),t=!0,{...f,baseBytes:0,remark:"deleted",tree:void 0};let u=o.get(vs(c.metafile,c.outfile));if(!f)return _.log("New file",l),t=!0,{...c,baseBytes:0,remark:"added",tree:u};let d=c.bytes-f.bytes;return d!==0?(_.log("Changed file",l,d),t=!0):_.log("No change",l),{...c,baseBytes:f.bytes,tree:u,remark:d===0?"no-change":Math.sign(d)?"increased":"decreased"}});_.log("Comparison done.",a),t?(e+=Sn(a,r.includeSizeComparison,r.percentExtraAttention),e+=En(a,r.includeSizeComparison,r.percentExtraAttention),e+=vn(a,r.topNLargestPaths),e+=gn(r)):e+="This PR introduced no changes to the esbuild bundle! \u{1F64C}",e=`<!-- __ESBUILD_BUNDLE_${r.name} -->
${e}`,mn(r,e)}function vs(r,t){return`${r} -> ${t}`}function mn(r,t){_.log("Writing comment to file.",t),Te.mkdirSync(Rt.join(process.cwd(),r.analyzerDirectory),{recursive:!0}),Te.writeFileSync(Rt.join(process.cwd(),r.analyzerDirectory,"bundle_analysis_comment.txt"),t.trim())}function gn(r){return r.showDetails?`
<details>
<summary>Details</summary>
<p>Next to the size is how much the size has increased or decreased compared with the base branch of this PR.</p>
<ul>
<li>\u203C\uFE0F: Size increased by ${r.percentExtraAttention}% or more. Special attention should be given to this.</li>
<li>\u26A0\uFE0F: Size increased in acceptable range (lower than ${r.percentExtraAttention}%).</li>
<li>\u2705: No change or even downsized.</li>
<li>\u{1F5D1}\uFE0F: The out file is deleted: not found in base branch.</li>
<li>\u{1F195}: The out file is newly found: will be added to base branch.</li>
</ul>
</details>
`:""}function wn(r){try{let t=Rt.join(process.cwd(),r.analyzerDirectory,"base/bundle/bundle_analysis.json"),e=Se(t);return _.info(`Base analysis found in ${t}`,e),e}catch{return _.warn("No base analysis found. First setup or all artifacts are expired."),{}}}function yn(r){function t(i){let n={name:"",path:"",value:0,children:[]};for(let[o,{bytesInOutput:h}]of Object.entries(i)){let a=o.split("/");e(n,a,h)}return n}function e(i,n,o){let h=n.shift();if(h===void 0){i.value+=o;return}let a=i.children.find(l=>l.name===h);a||(a={name:h,path:`${i.path}/${h}`.replace(/^\//,""),value:0,children:[]},i.children.push(a)),i.value+=o,e(a,n,o)}let s=new Map;if(r.topNLargestPaths<=0)return s;for(let{relativePath:i,absolutePath:n}of ve(r)){let o=Kt(n);for(let[h,a]of Object.entries(o.outputs)){let l=t(a.inputs);s.set(vs(i,h),l),Te.writeFileSync(Rt.join(process.cwd(),r.analyzerDirectory,"tree.json"),JSON.stringify(l,null,2))}}return s}var Xt="\xA0";function Ae(r){let t=r<0?"-":"",e=Math.abs(r);if(e<1e3)return`${t}${e}${Xt}B`;if(e<1e3*1e3)return`${t}${(e/1e3).toFixed(2)}${Xt}KB`;if(e<1e3*1e3*1e3)return`${t}${(e/1e3/1e3).toFixed(2)}${Xt}MB`;if(e<1e3*1e3*1e3*1e3)return`${t}${(e/1e3/1e3/1e3).toFixed(2)}${Xt}GB`;throw new Error("Too large file size!! Are you sure?")}function bn(r){let t=r.reduce((e,s)=>{let{bytes:i,baseBytes:n,...o}=e;return{...o,baseBytes:n+s.baseBytes,bytes:i+s.bytes}},{baseBytes:0,bytes:0,metafile:"(Total)",outfile:"-",remark:"added",tree:void 0});return t.remark=t.bytes===t.baseBytes?"no-change":t.bytes>t.baseBytes?"increased":"decreased",t}function Sn(r,t,e){let s=t.has("total")?[bn(r)]:[],i=r.filter(o=>t.has(o.remark));return`
Meta File | Out File  | Size (raw) | Note
----------|----------|-----------:|------
${[...s,...i].map(o=>`${o.metafile} | ${o.outfile} | ${Ts(o)} | ${As(o,e)}
`).join("")}`}function En(r,t,e){let s=r.filter(n=>!t.has(n.remark)),i=s.map(n=>`${n.metafile} | ${n.outfile} | ${Ts(n)} | ${As(n,e)}<!-- HIDDEN -->
`).join("");return s.length===0?"":`
<details>
<summary>${s.length} bundles are hidden since not listed in include_size_comparison.</summary>    

Meta File | Out File  | Size (raw) | Note 
----------|----------|-----------:|------
${i}

</details>
`}function xn(r,t){let e=[],s=[{node:r,depth:0}];for(;s.length>0;){let n=s.shift();if(!n)break;let{node:o,depth:h}=n;if(h===3){e.push(o);continue}if(o.children.length===0)e.push(o);else for(let a of o.children)s.push({node:a,depth:h+1})}return{largeNodes:e.sort((n,o)=>o.value-n.value).slice(0,t),hasOther:e.length>t}}function Ss(r,t){return Number.parseFloat((r/t*100).toFixed(1))}function vn(r,t){if(r.length===0||t<=0)return"";let e="";e+=`<details>
`,e+=`<summary>Largest paths</summary>
`,e+=`These visualization shows top ${t} largest paths in the bundle.
`;for(let s of r){if(e+=`
`,e+=`## Meta file: ${s.metafile}, Out file: ${s.outfile}
`,!s.tree){e+=`\uFE0F\uFE0F\u{1F5D1}\uFE0FDeleted
`;continue}e+=`| Path | Size |
`,e+=`|------|-------|
`;let i=s.tree.value,{largeNodes:n,hasOther:o}=xn(s.tree,t);for(let{path:h,value:a}of n){let l=Ss(a,i);e+=`| ${h} | ${Es(l,a)} |
`}if(o){let h=i-n[0].value,a=Ss(h,i);e+=`| (other) | ${Es(a,h)} |
`}}return e+=`</details>
`,e}function Es(r,t){return`\${{\\color{Goldenrod}{ ${Cn(r/100)} }}}$ ${r.toFixed(1)}%, ${Ae(t)}`}var Cs=["","\u258F","\u258E","\u258D","\u258C","\u258B","\u258A","\u2589","\u2588"],Ce=1/(Cs.length-1);function Cn(r,t=25,e=0,s=1){let i=r*t,n=Math.floor(i),o=i-n,h=Math.round(Ce*Math.floor(o/Ce)/Ce);return"\u2588".repeat(n)+Cs[h]}function Ts(r){return Ae(r.bytes)}function As(r,t){if(r.remark==="deleted")return"\u{1F5D1}\uFE0F Deleted";if(r.remark==="added")return"\u{1F195} Added";if(r.remark==="no-change"||r.baseBytes===0)return"\u2705  No change";let e=r.bytes-r.baseBytes,s=e/r.baseBytes*100;return`${Tn(s,t)}${Ae(e)} (${Rs(s)}${s.toFixed(1)}%)`}function Rs(r){return r<0?"":"+"}function Tn(r,t){let e;return r>0&&r<t?e="\u26A0\uFE0F":r>=t?e="\u203C\uFE0F":e="\u2705 ",`${e} ${Rs(r)}`}function Rn(){let r=q("metafiles");if(!r)throw new Error("metafiles is not specified");let t=q("name");if(!t)throw new Error("name is not specified");let e=new Set((q("include_size_comparison")||"added, deleted, increased, decreased, no-change").split(",").map(i=>{switch(i.trim()){case"added":case"deleted":case"increased":case"decreased":case"total":case"no-change":return i.trim();default:throw new Error(`Unknown size comparison filter: ${i}`)}}));return q("show_no_change")!==""&&(Ee("show_no_change","true")?(e.add("no-change"),ks.log("`show_no_change: true` is deprecated. Instead, remove `no-change` from the `include_size_comparison` list.")):(e.delete("no-change"),ks.log("`show_no_change: false` is deprecated. Instead, add `no-change` to the `include_size_comparison` list."))),{percentExtraAttention:xe("percent_extra_attention",20),showDetails:Ee("show_details","true"),topNLargestPaths:xe("top_n_largest_paths",20),includeExtensions:(q("include_extensions")||".js,.mjs,.cjs").split(","),includeSizeComparison:e,name:t,analyzerDirectory:q("analyze_directory")||".analyzer",metafiles:r.split(",")}}function kn(r=Rn()){bs(r),xs(r)}import.meta.url===An(process.argv[1]).href&&kn();export{kn as run};
//# sourceMappingURL=data:application/json;base64,
