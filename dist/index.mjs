// src/index.ts
import { pathToFileURL } from "node:url";

// src/compare.ts
import fs2 from "node:fs";
import path from "node:path";

// src/utils.ts
import fs from "node:fs";
function loadJsonFile(path3) {
  return JSON.parse(fs.readFileSync(path3).toString("utf-8"));
}
function loadMetaFile(path3) {
  return loadJsonFile(path3);
}
function loadAnalysisJson(path3) {
  return loadJsonFile(path3);
}
function getSingleInput(name) {
  const val = process.env[`INPUT_${name.toUpperCase()}`] || "";
  return val.trim();
}

// src/compare.ts
function compare(input) {
  let hasAnyChange = false;
  let output = `## \u{1F4E6} esbuild Bundle Analysis for ${input.name}

This analysis was generated by [esbuild-bundle-analyzer](https://github.com/exoego/esbuild-bundle-analyzer). \u{1F916}
`;
  const current = loadAnalysisJson(
    path.join(process.cwd(), input.analyzerDirectory, "bundle_analysis.json")
  );
  const base = loadBaseAnalysisJson(input);
  const fileTree = buildFileTree(input);
  const allOutFiles = [
    .../* @__PURE__ */ new Set([...Object.keys(current), ...Object.keys(base)])
  ].sort();
  const comparison = allOutFiles.map((outfile) => {
    const currentStats = current[outfile];
    const baseStats = base[outfile];
    if (!currentStats) {
      hasAnyChange = true;
      return { ...baseStats, diff: -1, remark: "deleted", tree: void 0 };
    }
    const tree = fileTree.get(
      treeKey(currentStats.metafile, currentStats.outfile)
    );
    if (!baseStats) {
      hasAnyChange = true;
      return { ...currentStats, diff: -1, remark: "added", tree };
    }
    const diff = currentStats.bytes - baseStats.bytes;
    if (diff !== 0) {
      hasAnyChange = true;
    }
    return {
      ...currentStats,
      diff,
      tree,
      remark: Math.sign(diff) ? "increased" : "decreased"
    };
  });
  if (hasAnyChange) {
    output += markdownTable(comparison, input.percentExtraAttention);
    output += fileSizeTable(comparison, input.topNLargestPaths);
    output += detail(input);
  } else {
    output += "This PR introduced no changes to the esbuild bundle! \u{1F64C}";
  }
  output += `<!-- __ESBUILD_BUNDLE_${input.name} -->`;
  writeComment(input, output);
}
function treeKey(metafile, outfile) {
  return `${metafile} -> ${outfile}`;
}
function writeComment(input, output) {
  fs2.mkdirSync(path.join(process.cwd(), input.analyzerDirectory), {
    recursive: true
  });
  fs2.writeFileSync(
    path.join(
      process.cwd(),
      input.analyzerDirectory,
      "bundle_analysis_comment.txt"
    ),
    output.trim()
  );
}
function detail(input) {
  if (!input.showDetails) {
    return "";
  }
  return `
<details>
<summary>Details</summary>
<p>Next to the size is how much the size has increased or decreased compared with the base branch of this PR.</p>
<ul>
<li>\u203C\uFE0F: Size increased by ${input.percentExtraAttention}% or more. Special attention should be given to this.</li>
<li>\u26A0\uFE0F: Size increased in acceptable range (lower than ${input.percentExtraAttention}%).</li>
<li>\u2705: No change or even downsized.</li>
<li>\u{1F5D1}\uFE0F: The out file is deleted: not found in base branch.</li>
<li>\u{1F195}: The out file is newly found: will be added to base branch.</li>
</ul>
</details>
`;
}
function loadBaseAnalysisJson(input) {
  try {
    return loadAnalysisJson(
      path.join(
        process.cwd(),
        input.analyzerDirectory,
        "base/bundle/bundle_analysis.json"
      )
    );
  } catch (e) {
    return {};
  }
}
function buildFileTree(input) {
  function buildRoot(input2) {
    const root = { name: "", path: "", value: 0, children: [] };
    for (const [filePath, { bytesInOutput }] of Object.entries(input2)) {
      const directories = filePath.split("/");
      buildNode(root, directories, bytesInOutput);
    }
    return root;
  }
  function buildNode(node, paths, value) {
    const first = paths.shift();
    if (first === void 0) {
      node.value += value;
      return;
    }
    let child = node.children.find((child2) => child2.name === first);
    if (!child) {
      child = {
        name: first,
        path: `${node.path}/${first}`.replace(/^\//, ""),
        value: 0,
        children: []
      };
      node.children.push(child);
    }
    node.value += value;
    buildNode(child, paths, value);
  }
  const trees = /* @__PURE__ */ new Map();
  if (input.topNLargestPaths <= 0) {
    return trees;
  }
  for (const metafile of input.metafiles) {
    const metafileJson = loadMetaFile(path.join(process.cwd(), metafile));
    for (const [outfile, buildMeta] of Object.entries(metafileJson.outputs)) {
      const tree = buildRoot(buildMeta.inputs);
      trees.set(treeKey(metafile, outfile), tree);
      fs2.writeFileSync(
        path.join(process.cwd(), input.analyzerDirectory, "tree.json"),
        JSON.stringify(tree, null, 2)
      );
    }
  }
  return trees;
}
var spacer = "\xA0";
function filesize(bytes) {
  const sign2 = bytes < 0 ? "-" : "";
  const n = Math.abs(bytes);
  if (n < 1e3) {
    return `${sign2}${n}${spacer}B`;
  }
  if (n < 1e3 * 1e3) {
    return `${sign2}${(n / 1e3).toFixed(2)}${spacer}KB`;
  }
  if (n < 1e3 * 1e3 * 1e3) {
    return `${sign2}${(n / 1e3 / 1e3).toFixed(2)}${spacer}MB`;
  }
  if (n < 1e3 * 1e3 * 1e3 * 1e3) {
    return `${sign2}${(n / 1e3 / 1e3 / 1e3).toFixed(2)}${spacer}GB`;
  }
  throw new Error("Too large file size!! Are you sure?");
}
function markdownTable(data, redThreshold) {
  const rows = data.map((d) => {
    return `${d.metafile} | ${d.outfile} | ${renderSize(d)} | ${renderNote(
      d,
      redThreshold
    )}
`;
  }).join("");
  return `
Meta File | Out File  | Size (raw) | Note 
----------|----------|-----------:|------
${rows}`;
}
function findLargeDirectories(root, N) {
  const nodes = [];
  const queue = [
    { node: root, depth: 0 }
  ];
  while (queue.length > 0) {
    const shift = queue.shift();
    if (!shift) {
      break;
    }
    const { node, depth } = shift;
    if (depth === 3) {
      nodes.push(node);
      continue;
    }
    if (node.children.length === 0) {
      nodes.push(node);
    } else {
      for (const item of node.children) {
        queue.push({ node: item, depth: depth + 1 });
      }
    }
  }
  const largeNodes = nodes.sort((a, b) => b.value - a.value).slice(0, N);
  return {
    largeNodes,
    hasOther: nodes.length > N
  };
}
function fixedPercent(n, d) {
  return Number.parseFloat((n / d * 100).toFixed(1));
}
function fileSizeTable(data, topNLargestPaths) {
  if (data.length === 0 || topNLargestPaths <= 0) {
    return "";
  }
  let output = "";
  output += "<details>\n";
  output += "<summary>Top ten largest paths</summary>\n";
  output += `These visualization shows top ${topNLargestPaths} largest paths in the bundle.
`;
  for (const d of data) {
    output += "\n";
    output += `## Meta file: ${d.metafile}, Out file: ${d.outfile}
`;
    if (!d.tree) {
      output += "\uFE0F\uFE0F\u{1F5D1}\uFE0FDeleted\n";
      continue;
    }
    output += "| Path | Size |\n";
    output += "|------|-------|\n";
    const totalSize = d.tree.value;
    const { largeNodes, hasOther } = findLargeDirectories(
      d.tree,
      topNLargestPaths
    );
    for (const { path: path3, value } of largeNodes) {
      const percent = fixedPercent(value, totalSize);
      output += `| ${path3} | ${renderBar(percent, value)} |
`;
    }
    if (hasOther) {
      const otherSize = totalSize - largeNodes[0].value;
      const otherPercent = fixedPercent(otherSize, totalSize);
      output += `| (other) | ${renderBar(otherPercent, otherSize)} |
`;
    }
  }
  output += "</details>\n";
  return output;
}
function renderBar(percent, bytes) {
  const bar = progress(percent / 100);
  return `\${{\\color{Goldenrod}{ ${bar} }}}$ ${percent.toFixed(
    1
  )}%, ${filesize(bytes)}`;
}
var blocks = ["", "\u258F", "\u258E", "\u258D", "\u258C", "\u258B", "\u258A", "\u2589", "\u2588"];
var progression = 1 / (blocks.length - 1);
function progress(value, length = 25, vmin = 0, vmax = 1) {
  const v = value * length;
  const integerPart = Math.floor(v);
  const fractionalPart = v - integerPart;
  const i = Math.round(
    progression * Math.floor(fractionalPart / progression) / progression
  );
  return "\u2588".repeat(integerPart) + blocks[i];
}
function renderSize(d) {
  return filesize(d.bytes);
}
function renderNote(d, redThreshold) {
  if (d.remark === "deleted") {
    return "\u{1F5D1}\uFE0F Deleted";
  }
  if (d.remark === "added") {
    return "\u{1F195} Added";
  }
  if (d.diff) {
    const percentChange = d.diff / d.bytes * 100;
    return `${renderStatusIndicator(percentChange, redThreshold)}${filesize(
      d.diff
    )} (${sign(percentChange)}${percentChange.toFixed(1)}%)`;
  }
  return "\u2705  No change";
}
function sign(num) {
  return num < 0 ? "" : "+";
}
function renderStatusIndicator(percentChange, redThreshold) {
  let res;
  if (percentChange > 0 && percentChange < redThreshold) {
    res = "\u26A0\uFE0F";
  } else if (percentChange >= redThreshold) {
    res = "\u203C\uFE0F";
  } else {
    res = "\u2705 ";
  }
  return `${res} ${sign(percentChange)}`;
}

// src/report.ts
import fs3 from "node:fs";
import path2 from "node:path";
import process2 from "node:process";
function report(input) {
  const allPageSizes = getAllPageSizes(input);
  fs3.mkdirSync(path2.join(process2.cwd(), input.analyzerDirectory), {
    recursive: true
  });
  const resultJsonPath = path2.join(
    process2.cwd(),
    input.analyzerDirectory,
    "bundle_analysis.json"
  );
  fs3.writeFileSync(resultJsonPath, JSON.stringify(allPageSizes, null, 2));
  console.log(`Wrote ${resultJsonPath}`);
}
function getAllPageSizes(input) {
  const acc = {};
  return input.metafiles.reduce((acc2, metafile) => {
    const metaFilePath = path2.join(process2.cwd(), metafile);
    try {
      fs3.accessSync(metaFilePath, fs3.constants.R_OK);
    } catch (err) {
      console.error(
        `No meta file found at "${metaFilePath}" - a path to meta file may be wrong, or esbuild is not executed.`
      );
      process2.exit(1);
    }
    const metaFileJson = loadMetaFile(metaFilePath);
    Object.entries(metaFileJson.outputs).reduce((acc3, output) => {
      const [outfile, buildMeta] = output;
      if (!input.includeExtensions.some(
        (ext) => outfile.toLowerCase().endsWith(ext)
      )) {
        return acc3;
      }
      acc3[`${metafile} -> ${outfile}`] = {
        bytes: buildMeta.bytes,
        metafile,
        outfile
      };
      return acc3;
    }, acc2);
    return acc2;
  }, acc);
}

// src/index.ts
function getInput() {
  const rawMetafiles = getSingleInput("metafiles");
  if (!rawMetafiles) {
    throw new Error("metafiles is not specified");
  }
  const name = getSingleInput("name");
  if (!name) {
    throw new Error("name is not specified");
  }
  return {
    percentExtraAttention: Number.parseInt(
      getSingleInput("percent_extra_attention") || "20",
      10
    ),
    showDetails: ["true", "True", "TRUE"].includes(
      getSingleInput("show_details") || "true"
    ),
    topNLargestPaths: Number.parseInt(
      getSingleInput("top_n_largest_paths") || "20",
      10
    ),
    includeExtensions: (getSingleInput("include_extensions") || ".js,.mjs,.cjs").split(","),
    name,
    analyzerDirectory: getSingleInput("analyze_directory") || ".analyzer",
    metafiles: rawMetafiles.split(",")
  };
}
function run(input = getInput()) {
  report(input);
  compare(input);
}
if (import.meta.url === pathToFileURL(process.argv[1]).href) {
  run();
}
export {
  run
};
//# sourceMappingURL=data:application/json;base64,
