// src/index.ts
import { pathToFileURL } from "node:url";

// src/compare.ts
import fs2 from "node:fs";
import path from "node:path";

// src/utils.ts
import fs from "node:fs";
function loadJsonFile(path3) {
  return JSON.parse(fs.readFileSync(path3).toString("utf-8"));
}
function loadMetaFile(path3) {
  return loadJsonFile(path3);
}
function loadAnalysisJson(path3) {
  return loadJsonFile(path3);
}
function getInput(name) {
  const val = process.env[`INPUT_${name.toUpperCase()}`] || "";
  return val.trim();
}

// src/compare.ts
function compare(input) {
  let hasAnyChange = false;
  let output = `## \u{1F4E6} esbuild Bundle Analysis for ${input.name}

This analysis was generated by [esbuild-bundle-analyzer](https://github.com/exoego/esbuild-bundle-analyzer). \u{1F916}
`;
  const current = loadAnalysisJson(
    path.join(process.cwd(), input.analyzerDirectory, "bundle_analysis.json")
  );
  const base = loadBaseAnalysisJson(input);
  const fileTree = buildFileTree(input);
  const allOutFiles = [
    .../* @__PURE__ */ new Set([...Object.keys(current), ...Object.keys(base)])
  ].sort();
  const comparison = allOutFiles.map((outfile) => {
    const currentStats = current[outfile];
    const baseStats = base[outfile];
    if (!currentStats) {
      hasAnyChange = true;
      return { ...baseStats, diff: -1, remark: "deleted", tree: void 0 };
    }
    const tree = fileTree.get(
      treeKey(currentStats.metafile, currentStats.outfile)
    );
    if (!baseStats) {
      hasAnyChange = true;
      return { ...currentStats, diff: -1, remark: "added", tree };
    }
    const diff = currentStats.bytes - baseStats.bytes;
    if (diff !== 0) {
      hasAnyChange = true;
    }
    return {
      ...currentStats,
      diff,
      tree,
      remark: Math.sign(diff) ? "increased" : "decreased"
    };
  });
  if (hasAnyChange) {
    output += markdownTable(comparison, input.percentExtraAttention);
    output += fileSizeTable(comparison, input.topNLargestPaths);
    output += detail(input);
  } else {
    output += "This PR introduced no changes to the esbuild bundle! \u{1F64C}";
  }
  output += `<!-- __ESBUILD_BUNDLE_${input.name} -->`;
  writeComment(input, output);
}
function treeKey(metafile, outfile) {
  return `${metafile} -> ${outfile}`;
}
function writeComment(input, output) {
  fs2.mkdirSync(path.join(process.cwd(), input.analyzerDirectory), {
    recursive: true
  });
  fs2.writeFileSync(
    path.join(
      process.cwd(),
      input.analyzerDirectory,
      "bundle_analysis_comment.txt"
    ),
    output.trim()
  );
}
function detail(input) {
  if (!input.showDetails) {
    return "";
  }
  return `
<details>
<summary>Details</summary>
<p>Next to the size is how much the size has increased or decreased compared with the base branch of this PR.</p>
<ul>
<li>\u203C\uFE0F: Size increased by ${input.percentExtraAttention}% or more. Special attention should be given to this.</li>
<li>\u26A0\uFE0F: Size increased in acceptable range (lower than ${input.percentExtraAttention}%).</li>
<li>\u2705: No change or even downsized.</li>
<li>\u{1F5D1}\uFE0F: The out file is deleted: not found in base branch.</li>
<li>\u{1F195}: The out file is newly found: will be added to base branch.</li>
</ul>
</details>
`;
}
function loadBaseAnalysisJson(input) {
  try {
    return loadAnalysisJson(
      path.join(
        process.cwd(),
        input.analyzerDirectory,
        "base/bundle/bundle_analysis.json"
      )
    );
  } catch (e) {
    return {};
  }
}
function buildFileTree(input) {
  function buildRoot(input2) {
    const root = { name: "", path: "", value: 0, children: [] };
    for (const [filePath, { bytesInOutput }] of Object.entries(input2)) {
      const directories = filePath.split("/");
      buildNode(root, directories, bytesInOutput);
    }
    return root;
  }
  function buildNode(node, paths, value) {
    const first = paths.shift();
    if (first === void 0) {
      node.value += value;
      return;
    }
    let child = node.children.find((child2) => child2.name === first);
    if (!child) {
      child = {
        name: first,
        path: `${node.path}/${first}`.replace(/^\//, ""),
        value: 0,
        children: []
      };
      node.children.push(child);
    }
    node.value += value;
    buildNode(child, paths, value);
  }
  const trees = /* @__PURE__ */ new Map();
  if (input.topNLargestPaths <= 0) {
    return trees;
  }
  for (const metafile of input.metafiles) {
    const metafileJson = loadMetaFile(path.join(process.cwd(), metafile));
    for (const [outfile, buildMeta] of Object.entries(metafileJson.outputs)) {
      const tree = buildRoot(buildMeta.inputs);
      trees.set(treeKey(metafile, outfile), tree);
      fs2.writeFileSync(
        path.join(process.cwd(), input.analyzerDirectory, "tree.json"),
        JSON.stringify(tree, null, 2)
      );
    }
  }
  return trees;
}
var spacer = "\xA0";
function filesize(bytes) {
  const sign2 = bytes < 0 ? "-" : "";
  const n = Math.abs(bytes);
  if (n < 1e3) {
    return `${sign2}${n}${spacer}B`;
  }
  if (n < 1e3 * 1e3) {
    return `${sign2}${(n / 1e3).toFixed(2)}${spacer}KB`;
  }
  if (n < 1e3 * 1e3 * 1e3) {
    return `${sign2}${(n / 1e3 / 1e3).toFixed(2)}${spacer}MB`;
  }
  if (n < 1e3 * 1e3 * 1e3 * 1e3) {
    return `${sign2}${(n / 1e3 / 1e3 / 1e3).toFixed(2)}${spacer}GB`;
  }
  throw new Error("Too large file size!! Are you sure?");
}
function markdownTable(data, redThreshold) {
  const rows = data.map((d) => {
    return `${d.metafile} | ${d.outfile} | ${renderSize(d)} | ${renderNote(
      d,
      redThreshold
    )}
`;
  }).join("");
  return `
Meta File | Out File  | Size (raw) | Note 
----------|----------|-----------:|------
${rows}`;
}
function findLargeDirectories(root, N) {
  const nodes = [];
  const queue = [
    { node: root, depth: 0 }
  ];
  while (queue.length > 0) {
    const shift = queue.shift();
    if (!shift) {
      break;
    }
    const { node, depth } = shift;
    if (depth === 3) {
      nodes.push(node);
      continue;
    }
    if (node.children.length === 0) {
      nodes.push(node);
    } else {
      for (const item of node.children) {
        queue.push({ node: item, depth: depth + 1 });
      }
    }
  }
  const largeNodes = nodes.sort((a, b) => b.value - a.value).slice(0, N);
  return {
    largeNodes,
    hasOther: nodes.length > N
  };
}
function fixedPercent(n, d) {
  return Number.parseFloat((n / d * 100).toFixed(1));
}
function fileSizeTable(data, topNLargestPaths) {
  if (data.length === 0 || topNLargestPaths <= 0) {
    return "";
  }
  let output = "";
  output += "<details>\n";
  output += "<summary>Top ten largest paths</summary>\n";
  output += `These visualization shows top ${topNLargestPaths} largest paths in the bundle.
`;
  for (const d of data) {
    output += "\n";
    output += `## Meta file: ${d.metafile}, Out file: ${d.outfile}
`;
    if (!d.tree) {
      output += "\uFE0F\uFE0F\u{1F5D1}\uFE0FDeleted\n";
      continue;
    }
    output += "| Path | Size |\n";
    output += "|------|-------|\n";
    const totalSize = d.tree.value;
    const { largeNodes, hasOther } = findLargeDirectories(
      d.tree,
      topNLargestPaths
    );
    for (const { path: path3, value } of largeNodes) {
      const percent = fixedPercent(value, totalSize);
      output += `| ${path3} | ${renderBar(percent, value)} |
`;
    }
    if (hasOther) {
      const otherSize = totalSize - largeNodes[0].value;
      const otherPercent = fixedPercent(otherSize, totalSize);
      output += `| (other) | ${renderBar(otherPercent, otherSize)} |
`;
    }
  }
  output += "</details>\n";
  return output;
}
function renderBar(percent, bytes) {
  const bar = progress(percent / 100);
  return `\${{\\color{Goldenrod}{ ${bar} }}}$ ${percent.toFixed(
    1
  )}%, ${filesize(bytes)}`;
}
var blocks = ["", "\u258F", "\u258E", "\u258D", "\u258C", "\u258B", "\u258A", "\u2589", "\u2588"];
var progression = 1 / (blocks.length - 1);
function progress(value, length = 25, vmin = 0, vmax = 1) {
  const v = value * length;
  const integerPart = Math.floor(v);
  const fractionalPart = v - integerPart;
  const i = Math.round(
    progression * Math.floor(fractionalPart / progression) / progression
  );
  return "\u2588".repeat(integerPart) + blocks[i];
}
function renderSize(d) {
  return filesize(d.bytes);
}
function renderNote(d, redThreshold) {
  if (d.remark === "deleted") {
    return "\u{1F5D1}\uFE0F Deleted";
  }
  if (d.remark === "added") {
    return "\u{1F195} Added";
  }
  if (d.diff) {
    const percentChange = d.diff / d.bytes * 100;
    return `${renderStatusIndicator(percentChange, redThreshold)}${filesize(
      d.diff
    )} (${sign(percentChange)}${percentChange.toFixed(1)}%)`;
  }
  return "\u2705  No change";
}
function sign(num) {
  return num < 0 ? "" : "+";
}
function renderStatusIndicator(percentChange, redThreshold) {
  let res;
  if (percentChange > 0 && percentChange < redThreshold) {
    res = "\u26A0\uFE0F";
  } else if (percentChange >= redThreshold) {
    res = "\u203C\uFE0F";
  } else {
    res = "\u2705 ";
  }
  return `${res} ${sign(percentChange)}`;
}

// src/report.ts
import fs3 from "node:fs";
import path2 from "node:path";
import process2 from "node:process";
function report(input) {
  const allPageSizes = getAllPageSizes(input);
  fs3.mkdirSync(path2.join(process2.cwd(), input.analyzerDirectory), {
    recursive: true
  });
  const resultJsonPath = path2.join(
    process2.cwd(),
    input.analyzerDirectory,
    "bundle_analysis.json"
  );
  fs3.writeFileSync(resultJsonPath, JSON.stringify(allPageSizes, null, 2));
  console.log(`Wrote ${resultJsonPath}`);
}
function getAllPageSizes(input) {
  const acc = {};
  return input.metafiles.reduce((acc2, metafile) => {
    const metaFilePath = path2.join(process2.cwd(), metafile);
    try {
      fs3.accessSync(metaFilePath, fs3.constants.R_OK);
    } catch (err) {
      console.error(
        `No meta file found at "${metaFilePath}" - a path to meta file may be wrong, or esbuild is not executed.`
      );
      process2.exit(1);
    }
    const metaFileJson = loadMetaFile(metaFilePath);
    Object.entries(metaFileJson.outputs).reduce((acc3, output) => {
      const [outfile, buildMeta] = output;
      if (!input.includeExtensions.some(
        (ext) => outfile.toLowerCase().endsWith(ext)
      )) {
        return acc3;
      }
      acc3[`${metafile} -> ${outfile}`] = {
        bytes: buildMeta.bytes,
        metafile,
        outfile
      };
      return acc3;
    }, acc2);
    return acc2;
  }, acc);
}

// src/index.ts
function getOptions() {
  const rawMetafiles = getInput("metafiles");
  if (!rawMetafiles) {
    throw new Error("metafiles is not specified");
  }
  const name = getInput("name");
  if (!name) {
    throw new Error("name is not specified");
  }
  return {
    percentExtraAttention: Number.parseInt(
      getInput("percent_extra_attention") || "20",
      10
    ),
    showDetails: ["true", "True", "TRUE"].includes(
      getInput("show_details") || "true"
    ),
    topNLargestPaths: Number.parseInt(
      getInput("top_n_largest_paths") || "20",
      10
    ),
    includeExtensions: (getInput("include_extensions") || ".js,.mjs,.cjs").split(","),
    name,
    analyzerDirectory: getInput("analyze_directory") || ".analyzer",
    metafiles: rawMetafiles.split(",")
  };
}
function run(options = getOptions()) {
  report(options);
  compare(options);
}
if (import.meta.url === pathToFileURL(process.argv[1]).href) {
  run();
}
export {
  run
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2luZGV4LnRzIiwgIi4uL3NyYy9jb21wYXJlLnRzIiwgIi4uL3NyYy91dGlscy50cyIsICIuLi9zcmMvcmVwb3J0LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBwYXRoVG9GaWxlVVJMIH0gZnJvbSBcIm5vZGU6dXJsXCI7XG5pbXBvcnQgeyBjb21wYXJlIH0gZnJvbSBcIi4vY29tcGFyZVwiO1xuaW1wb3J0IHsgcmVwb3J0IH0gZnJvbSBcIi4vcmVwb3J0XCI7XG5pbXBvcnQgdHlwZSB7IE9wdGlvbnMgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgZ2V0SW5wdXQgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5mdW5jdGlvbiBnZXRPcHRpb25zKCk6IE9wdGlvbnMge1xuXHRjb25zdCByYXdNZXRhZmlsZXMgPSBnZXRJbnB1dChcIm1ldGFmaWxlc1wiKTtcblx0aWYgKCFyYXdNZXRhZmlsZXMpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJtZXRhZmlsZXMgaXMgbm90IHNwZWNpZmllZFwiKTtcblx0fVxuXHRjb25zdCBuYW1lID0gZ2V0SW5wdXQoXCJuYW1lXCIpO1xuXHRpZiAoIW5hbWUpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJuYW1lIGlzIG5vdCBzcGVjaWZpZWRcIik7XG5cdH1cblx0cmV0dXJuIHtcblx0XHRwZXJjZW50RXh0cmFBdHRlbnRpb246IE51bWJlci5wYXJzZUludChcblx0XHRcdGdldElucHV0KFwicGVyY2VudF9leHRyYV9hdHRlbnRpb25cIikgfHwgXCIyMFwiLFxuXHRcdFx0MTAsXG5cdFx0KSxcblx0XHRzaG93RGV0YWlsczogW1widHJ1ZVwiLCBcIlRydWVcIiwgXCJUUlVFXCJdLmluY2x1ZGVzKFxuXHRcdFx0Z2V0SW5wdXQoXCJzaG93X2RldGFpbHNcIikgfHwgXCJ0cnVlXCIsXG5cdFx0KSxcblx0XHR0b3BOTGFyZ2VzdFBhdGhzOiBOdW1iZXIucGFyc2VJbnQoXG5cdFx0XHRnZXRJbnB1dChcInRvcF9uX2xhcmdlc3RfcGF0aHNcIikgfHwgXCIyMFwiLFxuXHRcdFx0MTAsXG5cdFx0KSxcblx0XHRpbmNsdWRlRXh0ZW5zaW9uczogKFxuXHRcdFx0Z2V0SW5wdXQoXCJpbmNsdWRlX2V4dGVuc2lvbnNcIikgfHwgXCIuanMsLm1qcywuY2pzXCJcblx0XHQpLnNwbGl0KFwiLFwiKSxcblx0XHRuYW1lLFxuXHRcdGFuYWx5emVyRGlyZWN0b3J5OiBnZXRJbnB1dChcImFuYWx5emVfZGlyZWN0b3J5XCIpIHx8IFwiLmFuYWx5emVyXCIsXG5cdFx0bWV0YWZpbGVzOiByYXdNZXRhZmlsZXMuc3BsaXQoXCIsXCIpLFxuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuKG9wdGlvbnM6IE9wdGlvbnMgPSBnZXRPcHRpb25zKCkpOiB2b2lkIHtcblx0cmVwb3J0KG9wdGlvbnMpO1xuXHRjb21wYXJlKG9wdGlvbnMpO1xufVxuXG5pZiAoaW1wb3J0Lm1ldGEudXJsID09PSBwYXRoVG9GaWxlVVJMKHByb2Nlc3MuYXJndlsxXSkuaHJlZikge1xuXHRydW4oKTtcbn1cbiIsICJpbXBvcnQgZnMgZnJvbSBcIm5vZGU6ZnNcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJub2RlOnBhdGhcIjtcbmltcG9ydCB0eXBlIHsgQ29tcGFyZVJlc3VsdCwgT3B0aW9ucywgUmVwb3J0LCBUcmVlTWFwTm9kZSB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBsb2FkQW5hbHlzaXNKc29uLCBsb2FkTWV0YUZpbGUgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZShpbnB1dDogT3B0aW9ucyk6IHZvaWQge1xuXHRsZXQgaGFzQW55Q2hhbmdlID0gZmFsc2U7XG5cdGxldCBvdXRwdXQgPSBgIyMgXHVEODNEXHVEQ0U2IGVzYnVpbGQgQnVuZGxlIEFuYWx5c2lzIGZvciAke2lucHV0Lm5hbWV9XG5cblRoaXMgYW5hbHlzaXMgd2FzIGdlbmVyYXRlZCBieSBbZXNidWlsZC1idW5kbGUtYW5hbHl6ZXJdKGh0dHBzOi8vZ2l0aHViLmNvbS9leG9lZ28vZXNidWlsZC1idW5kbGUtYW5hbHl6ZXIpLiBcdUQ4M0VcdUREMTZcbmA7XG5cblx0Y29uc3QgY3VycmVudCA9IGxvYWRBbmFseXNpc0pzb24oXG5cdFx0cGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIGlucHV0LmFuYWx5emVyRGlyZWN0b3J5LCBcImJ1bmRsZV9hbmFseXNpcy5qc29uXCIpLFxuXHQpO1xuXHRjb25zdCBiYXNlID0gbG9hZEJhc2VBbmFseXNpc0pzb24oaW5wdXQpO1xuXG5cdGNvbnN0IGZpbGVUcmVlID0gYnVpbGRGaWxlVHJlZShpbnB1dCk7XG5cblx0Y29uc3QgYWxsT3V0RmlsZXM6IHN0cmluZ1tdID0gW1xuXHRcdC4uLm5ldyBTZXQoWy4uLk9iamVjdC5rZXlzKGN1cnJlbnQpLCAuLi5PYmplY3Qua2V5cyhiYXNlKV0pLFxuXHRdLnNvcnQoKTtcblxuXHRjb25zdCBjb21wYXJpc29uOiBBcnJheTxDb21wYXJlUmVzdWx0PiA9IGFsbE91dEZpbGVzLm1hcCgob3V0ZmlsZSkgPT4ge1xuXHRcdGNvbnN0IGN1cnJlbnRTdGF0cyA9IGN1cnJlbnRbb3V0ZmlsZV07XG5cdFx0Y29uc3QgYmFzZVN0YXRzID0gYmFzZVtvdXRmaWxlXTtcblxuXHRcdGlmICghY3VycmVudFN0YXRzKSB7XG5cdFx0XHRoYXNBbnlDaGFuZ2UgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIHsgLi4uYmFzZVN0YXRzLCBkaWZmOiAtMSwgcmVtYXJrOiBcImRlbGV0ZWRcIiwgdHJlZTogdW5kZWZpbmVkIH07XG5cdFx0fVxuXG5cdFx0Y29uc3QgdHJlZSA9IGZpbGVUcmVlLmdldChcblx0XHRcdHRyZWVLZXkoY3VycmVudFN0YXRzLm1ldGFmaWxlLCBjdXJyZW50U3RhdHMub3V0ZmlsZSksXG5cdFx0KTtcblx0XHRpZiAoIWJhc2VTdGF0cykge1xuXHRcdFx0aGFzQW55Q2hhbmdlID0gdHJ1ZTtcblx0XHRcdHJldHVybiB7IC4uLmN1cnJlbnRTdGF0cywgZGlmZjogLTEsIHJlbWFyazogXCJhZGRlZFwiLCB0cmVlIH07XG5cdFx0fVxuXG5cdFx0Y29uc3QgZGlmZiA9IGN1cnJlbnRTdGF0cy5ieXRlcyAtIGJhc2VTdGF0cy5ieXRlcztcblx0XHRpZiAoZGlmZiAhPT0gMCkge1xuXHRcdFx0aGFzQW55Q2hhbmdlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdC4uLmN1cnJlbnRTdGF0cyxcblx0XHRcdGRpZmYsXG5cdFx0XHR0cmVlLFxuXHRcdFx0cmVtYXJrOiBNYXRoLnNpZ24oZGlmZikgPyBcImluY3JlYXNlZFwiIDogXCJkZWNyZWFzZWRcIixcblx0XHR9O1xuXHR9KTtcblxuXHRpZiAoaGFzQW55Q2hhbmdlKSB7XG5cdFx0b3V0cHV0ICs9IG1hcmtkb3duVGFibGUoY29tcGFyaXNvbiwgaW5wdXQucGVyY2VudEV4dHJhQXR0ZW50aW9uKTtcblx0XHRvdXRwdXQgKz0gZmlsZVNpemVUYWJsZShjb21wYXJpc29uLCBpbnB1dC50b3BOTGFyZ2VzdFBhdGhzKTtcblx0XHRvdXRwdXQgKz0gZGV0YWlsKGlucHV0KTtcblx0fSBlbHNlIHtcblx0XHRvdXRwdXQgKz0gXCJUaGlzIFBSIGludHJvZHVjZWQgbm8gY2hhbmdlcyB0byB0aGUgZXNidWlsZCBidW5kbGUhIFx1RDgzRFx1REU0Q1wiO1xuXHR9XG5cblx0Ly8gd2UgYWRkIHRoaXMgdGFnIHNvIHRoYXQgb3VyIGFjdGlvbiBjYW4gYmUgYWJsZSB0byBlYXNpbHkgYW5kXG5cdC8vIGNvbnNpc3RlbnRseSBmaW5kIHRoZSByaWdodCBjb21tZW50IHRvIGVkaXQgYXMgbW9yZSBjb21taXRzIGFyZSBwdXNoZWQuXG5cdG91dHB1dCArPSBgPCEtLSBfX0VTQlVJTERfQlVORExFXyR7aW5wdXQubmFtZX0gLS0+YDtcblxuXHR3cml0ZUNvbW1lbnQoaW5wdXQsIG91dHB1dCk7XG59XG5cbmZ1bmN0aW9uIHRyZWVLZXkobWV0YWZpbGU6IHN0cmluZywgb3V0ZmlsZTogc3RyaW5nKTogc3RyaW5nIHtcblx0cmV0dXJuIGAke21ldGFmaWxlfSAtPiAke291dGZpbGV9YDtcbn1cblxuLy8gV3JpdGUgdGhlIG91dHB1dCB0byBhIGZpbGUgd2hpY2ggaXMgbGF0ZXIgcmVhZCBpblxuLy8gYXMgY29tbWVudCBjb250ZW50cyBieSB0aGUgYWN0aW9ucyB3b3JrZmxvdy5cbmZ1bmN0aW9uIHdyaXRlQ29tbWVudChpbnB1dDogT3B0aW9ucywgb3V0cHV0OiBzdHJpbmcpOiB2b2lkIHtcblx0ZnMubWtkaXJTeW5jKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCBpbnB1dC5hbmFseXplckRpcmVjdG9yeSksIHtcblx0XHRyZWN1cnNpdmU6IHRydWUsXG5cdH0pO1xuXHRmcy53cml0ZUZpbGVTeW5jKFxuXHRcdHBhdGguam9pbihcblx0XHRcdHByb2Nlc3MuY3dkKCksXG5cdFx0XHRpbnB1dC5hbmFseXplckRpcmVjdG9yeSxcblx0XHRcdFwiYnVuZGxlX2FuYWx5c2lzX2NvbW1lbnQudHh0XCIsXG5cdFx0KSxcblx0XHRvdXRwdXQudHJpbSgpLFxuXHQpO1xufVxuXG5mdW5jdGlvbiBkZXRhaWwoaW5wdXQ6IE9wdGlvbnMpOiBzdHJpbmcge1xuXHRpZiAoIWlucHV0LnNob3dEZXRhaWxzKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblx0cmV0dXJuIGBcXG48ZGV0YWlscz5cbjxzdW1tYXJ5PkRldGFpbHM8L3N1bW1hcnk+XG48cD5OZXh0IHRvIHRoZSBzaXplIGlzIGhvdyBtdWNoIHRoZSBzaXplIGhhcyBpbmNyZWFzZWQgb3IgZGVjcmVhc2VkIGNvbXBhcmVkIHdpdGggdGhlIGJhc2UgYnJhbmNoIG9mIHRoaXMgUFIuPC9wPlxuPHVsPlxuPGxpPlx1MjAzQ1x1RkUwRjogU2l6ZSBpbmNyZWFzZWQgYnkgJHtpbnB1dC5wZXJjZW50RXh0cmFBdHRlbnRpb259JSBvciBtb3JlLiBTcGVjaWFsIGF0dGVudGlvbiBzaG91bGQgYmUgZ2l2ZW4gdG8gdGhpcy48L2xpPlxuPGxpPlx1MjZBMFx1RkUwRjogU2l6ZSBpbmNyZWFzZWQgaW4gYWNjZXB0YWJsZSByYW5nZSAobG93ZXIgdGhhbiAke2lucHV0LnBlcmNlbnRFeHRyYUF0dGVudGlvbn0lKS48L2xpPlxuPGxpPlx1MjcwNTogTm8gY2hhbmdlIG9yIGV2ZW4gZG93bnNpemVkLjwvbGk+XG48bGk+XHVEODNEXHVEREQxXHVGRTBGOiBUaGUgb3V0IGZpbGUgaXMgZGVsZXRlZDogbm90IGZvdW5kIGluIGJhc2UgYnJhbmNoLjwvbGk+XG48bGk+XHVEODNDXHVERDk1OiBUaGUgb3V0IGZpbGUgaXMgbmV3bHkgZm91bmQ6IHdpbGwgYmUgYWRkZWQgdG8gYmFzZSBicmFuY2guPC9saT5cbjwvdWw+XG48L2RldGFpbHM+XFxuYDtcbn1cblxuZnVuY3Rpb24gbG9hZEJhc2VBbmFseXNpc0pzb24oaW5wdXQ6IE9wdGlvbnMpOiBSZXBvcnQge1xuXHR0cnkge1xuXHRcdHJldHVybiBsb2FkQW5hbHlzaXNKc29uKFxuXHRcdFx0cGF0aC5qb2luKFxuXHRcdFx0XHRwcm9jZXNzLmN3ZCgpLFxuXHRcdFx0XHRpbnB1dC5hbmFseXplckRpcmVjdG9yeSxcblx0XHRcdFx0XCJiYXNlL2J1bmRsZS9idW5kbGVfYW5hbHlzaXMuanNvblwiLFxuXHRcdFx0KSxcblx0XHQpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gRW1wdHkgaWYgbm8gYmFzZSBhbmFseXNpcyBmb3VuZC5cblx0XHQvLyBUaGlzIGlzIGEgY2FzZSB3aGVuIGFuYWx5emVyIGlzIGZpcnN0IHNldCB1cCBvciBhbGwgYXJ0aWZhY3RzIGFyZSBleHBpcmVkLlxuXHRcdHJldHVybiB7fTtcblx0fVxufVxuXG5mdW5jdGlvbiBidWlsZEZpbGVUcmVlKGlucHV0OiBPcHRpb25zKSB7XG5cdGZ1bmN0aW9uIGJ1aWxkUm9vdChcblx0XHRpbnB1dDogUmVjb3JkPHN0cmluZywgeyBieXRlc0luT3V0cHV0OiBudW1iZXIgfT4sXG5cdCk6IFRyZWVNYXBOb2RlIHtcblx0XHRjb25zdCByb290OiBUcmVlTWFwTm9kZSA9IHsgbmFtZTogXCJcIiwgcGF0aDogXCJcIiwgdmFsdWU6IDAsIGNoaWxkcmVuOiBbXSB9O1xuXHRcdGZvciAoY29uc3QgW2ZpbGVQYXRoLCB7IGJ5dGVzSW5PdXRwdXQgfV0gb2YgT2JqZWN0LmVudHJpZXMoaW5wdXQpKSB7XG5cdFx0XHRjb25zdCBkaXJlY3RvcmllcyA9IGZpbGVQYXRoLnNwbGl0KFwiL1wiKTtcblx0XHRcdGJ1aWxkTm9kZShyb290LCBkaXJlY3RvcmllcywgYnl0ZXNJbk91dHB1dCk7XG5cdFx0fVxuXHRcdHJldHVybiByb290O1xuXHR9XG5cblx0ZnVuY3Rpb24gYnVpbGROb2RlKFxuXHRcdG5vZGU6IFRyZWVNYXBOb2RlLFxuXHRcdHBhdGhzOiBBcnJheTxzdHJpbmc+LFxuXHRcdHZhbHVlOiBudW1iZXIsXG5cdCk6IHZvaWQge1xuXHRcdGNvbnN0IGZpcnN0ID0gcGF0aHMuc2hpZnQoKTtcblx0XHRpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Ly8gbGVhZiBub2RlIChmaWxlKVxuXHRcdFx0bm9kZS52YWx1ZSArPSB2YWx1ZTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0bGV0IGNoaWxkID0gbm9kZS5jaGlsZHJlbi5maW5kKChjaGlsZCkgPT4gY2hpbGQubmFtZSA9PT0gZmlyc3QpO1xuXHRcdGlmICghY2hpbGQpIHtcblx0XHRcdGNoaWxkID0ge1xuXHRcdFx0XHRuYW1lOiBmaXJzdCxcblx0XHRcdFx0cGF0aDogYCR7bm9kZS5wYXRofS8ke2ZpcnN0fWAucmVwbGFjZSgvXlxcLy8sIFwiXCIpLFxuXHRcdFx0XHR2YWx1ZTogMCxcblx0XHRcdFx0Y2hpbGRyZW46IFtdLFxuXHRcdFx0fTtcblx0XHRcdG5vZGUuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG5cdFx0fVxuXHRcdG5vZGUudmFsdWUgKz0gdmFsdWU7XG5cdFx0YnVpbGROb2RlKGNoaWxkLCBwYXRocywgdmFsdWUpO1xuXHR9XG5cblx0Y29uc3QgdHJlZXMgPSBuZXcgTWFwPHN0cmluZywgVHJlZU1hcE5vZGU+KCk7XG5cdGlmIChpbnB1dC50b3BOTGFyZ2VzdFBhdGhzIDw9IDApIHtcblx0XHQvLyBTa2lwIGJ1aWxkaW5nIHRyZWUgaWYgd2UgZG9uJ3QgbmVlZCBpdC5cblx0XHRyZXR1cm4gdHJlZXM7XG5cdH1cblx0Zm9yIChjb25zdCBtZXRhZmlsZSBvZiBpbnB1dC5tZXRhZmlsZXMpIHtcblx0XHRjb25zdCBtZXRhZmlsZUpzb24gPSBsb2FkTWV0YUZpbGUocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIG1ldGFmaWxlKSk7XG5cdFx0Zm9yIChjb25zdCBbb3V0ZmlsZSwgYnVpbGRNZXRhXSBvZiBPYmplY3QuZW50cmllcyhtZXRhZmlsZUpzb24ub3V0cHV0cykpIHtcblx0XHRcdGNvbnN0IHRyZWUgPSBidWlsZFJvb3QoYnVpbGRNZXRhLmlucHV0cyk7XG5cdFx0XHR0cmVlcy5zZXQodHJlZUtleShtZXRhZmlsZSwgb3V0ZmlsZSksIHRyZWUpO1xuXG5cdFx0XHRmcy53cml0ZUZpbGVTeW5jKFxuXHRcdFx0XHRwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgaW5wdXQuYW5hbHl6ZXJEaXJlY3RvcnksIFwidHJlZS5qc29uXCIpLFxuXHRcdFx0XHRKU09OLnN0cmluZ2lmeSh0cmVlLCBudWxsLCAyKSxcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB0cmVlcztcbn1cblxuY29uc3Qgc3BhY2VyID0gXCJcdTAwQTBcIjtcbmZ1bmN0aW9uIGZpbGVzaXplKGJ5dGVzOiBudW1iZXIpOiBzdHJpbmcge1xuXHRjb25zdCBzaWduID0gYnl0ZXMgPCAwID8gXCItXCIgOiBcIlwiO1xuXHRjb25zdCBuID0gTWF0aC5hYnMoYnl0ZXMpO1xuXHRpZiAobiA8IDEwMDApIHtcblx0XHRyZXR1cm4gYCR7c2lnbn0ke259JHtzcGFjZXJ9QmA7XG5cdH1cblx0aWYgKG4gPCAxMDAwICogMTAwMCkge1xuXHRcdHJldHVybiBgJHtzaWdufSR7KG4gLyAxMDAwKS50b0ZpeGVkKDIpfSR7c3BhY2VyfUtCYDtcblx0fVxuXHRpZiAobiA8IDEwMDAgKiAxMDAwICogMTAwMCkge1xuXHRcdHJldHVybiBgJHtzaWdufSR7KG4gLyAxMDAwIC8gMTAwMCkudG9GaXhlZCgyKX0ke3NwYWNlcn1NQmA7XG5cdH1cblx0aWYgKG4gPCAxMDAwICogMTAwMCAqIDEwMDAgKiAxMDAwKSB7XG5cdFx0cmV0dXJuIGAke3NpZ259JHsobiAvIDEwMDAgLyAxMDAwIC8gMTAwMCkudG9GaXhlZCgyKX0ke3NwYWNlcn1HQmA7XG5cdH1cblx0dGhyb3cgbmV3IEVycm9yKFwiVG9vIGxhcmdlIGZpbGUgc2l6ZSEhIEFyZSB5b3Ugc3VyZT9cIik7XG59XG5cbmZ1bmN0aW9uIG1hcmtkb3duVGFibGUoXG5cdGRhdGE6IEFycmF5PENvbXBhcmVSZXN1bHQ+LFxuXHRyZWRUaHJlc2hvbGQ6IG51bWJlcixcbik6IHN0cmluZyB7XG5cdGNvbnN0IHJvd3MgPSBkYXRhXG5cdFx0Lm1hcCgoZCkgPT4ge1xuXHRcdFx0cmV0dXJuIGAke2QubWV0YWZpbGV9IHwgJHtkLm91dGZpbGV9IHwgJHtyZW5kZXJTaXplKGQpfSB8ICR7cmVuZGVyTm90ZShcblx0XHRcdFx0ZCxcblx0XHRcdFx0cmVkVGhyZXNob2xkLFxuXHRcdFx0KX1cXG5gO1xuXHRcdH0pXG5cdFx0LmpvaW4oXCJcIik7XG5cblx0cmV0dXJuIGBcbk1ldGEgRmlsZSB8IE91dCBGaWxlICB8IFNpemUgKHJhdykgfCBOb3RlIFxuLS0tLS0tLS0tLXwtLS0tLS0tLS0tfC0tLS0tLS0tLS0tOnwtLS0tLS1cbiR7cm93c31gO1xufVxuXG4vKipcbiAqIEZpbmQgdGhlIHRvcCBOIGxhcmdlc3Qgbm9kZXMgaW4gcm9vdCB0cmVlLlxuICogRGlnIG5vZGVzIHVudGlsIHRoZSBkZXB0aCBvZiAzLlxuICovXG5mdW5jdGlvbiBmaW5kTGFyZ2VEaXJlY3Rvcmllcyhyb290OiBUcmVlTWFwTm9kZSwgTjogbnVtYmVyKSB7XG5cdGNvbnN0IG5vZGVzOiBUcmVlTWFwTm9kZVtdID0gW107XG5cdGNvbnN0IHF1ZXVlOiBBcnJheTx7IG5vZGU6IFRyZWVNYXBOb2RlOyBkZXB0aDogbnVtYmVyIH0+ID0gW1xuXHRcdHsgbm9kZTogcm9vdCwgZGVwdGg6IDAgfSxcblx0XTtcblx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRjb25zdCBzaGlmdCA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0aWYgKCFzaGlmdCkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdGNvbnN0IHsgbm9kZSwgZGVwdGggfSA9IHNoaWZ0O1xuXHRcdGlmIChkZXB0aCA9PT0gMykge1xuXHRcdFx0bm9kZXMucHVzaChub2RlKTtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcblx0XHRcdG5vZGVzLnB1c2gobm9kZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoY29uc3QgaXRlbSBvZiBub2RlLmNoaWxkcmVuKSB7XG5cdFx0XHRcdHF1ZXVlLnB1c2goeyBub2RlOiBpdGVtLCBkZXB0aDogZGVwdGggKyAxIH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRjb25zdCBsYXJnZU5vZGVzID0gbm9kZXMuc29ydCgoYSwgYikgPT4gYi52YWx1ZSAtIGEudmFsdWUpLnNsaWNlKDAsIE4pO1xuXHRyZXR1cm4ge1xuXHRcdGxhcmdlTm9kZXMsXG5cdFx0aGFzT3RoZXI6IG5vZGVzLmxlbmd0aCA+IE4sXG5cdH07XG59XG5cbmZ1bmN0aW9uIGZpeGVkUGVyY2VudChuOiBudW1iZXIsIGQ6IG51bWJlcik6IG51bWJlciB7XG5cdHJldHVybiBOdW1iZXIucGFyc2VGbG9hdCgoKG4gLyBkKSAqIDEwMCkudG9GaXhlZCgxKSk7XG59XG5cbmZ1bmN0aW9uIGZpbGVTaXplVGFibGUoXG5cdGRhdGE6IEFycmF5PENvbXBhcmVSZXN1bHQ+LFxuXHR0b3BOTGFyZ2VzdFBhdGhzOiBudW1iZXIsXG4pOiBzdHJpbmcge1xuXHRpZiAoZGF0YS5sZW5ndGggPT09IDAgfHwgdG9wTkxhcmdlc3RQYXRocyA8PSAwKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblx0bGV0IG91dHB1dCA9IFwiXCI7XG5cdG91dHB1dCArPSBcIjxkZXRhaWxzPlxcblwiO1xuXHRvdXRwdXQgKz0gXCI8c3VtbWFyeT5Ub3AgdGVuIGxhcmdlc3QgcGF0aHM8L3N1bW1hcnk+XFxuXCI7XG5cdG91dHB1dCArPSBgVGhlc2UgdmlzdWFsaXphdGlvbiBzaG93cyB0b3AgJHt0b3BOTGFyZ2VzdFBhdGhzfSBsYXJnZXN0IHBhdGhzIGluIHRoZSBidW5kbGUuXFxuYDtcblx0Zm9yIChjb25zdCBkIG9mIGRhdGEpIHtcblx0XHRvdXRwdXQgKz0gXCJcXG5cIjtcblx0XHRvdXRwdXQgKz0gYCMjIE1ldGEgZmlsZTogJHtkLm1ldGFmaWxlfSwgT3V0IGZpbGU6ICR7ZC5vdXRmaWxlfVxcbmA7XG5cdFx0aWYgKCFkLnRyZWUpIHtcblx0XHRcdG91dHB1dCArPSBcIlx1RkUwRlx1RkUwRlx1RDgzRFx1REREMVx1RkUwRkRlbGV0ZWRcXG5cIjtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRvdXRwdXQgKz0gXCJ8IFBhdGggfCBTaXplIHxcXG5cIjtcblx0XHRvdXRwdXQgKz0gXCJ8LS0tLS0tfC0tLS0tLS18XFxuXCI7XG5cdFx0Y29uc3QgdG90YWxTaXplID0gZC50cmVlLnZhbHVlO1xuXHRcdGNvbnN0IHsgbGFyZ2VOb2RlcywgaGFzT3RoZXIgfSA9IGZpbmRMYXJnZURpcmVjdG9yaWVzKFxuXHRcdFx0ZC50cmVlLFxuXHRcdFx0dG9wTkxhcmdlc3RQYXRocyxcblx0XHQpO1xuXHRcdGZvciAoY29uc3QgeyBwYXRoLCB2YWx1ZSB9IG9mIGxhcmdlTm9kZXMpIHtcblx0XHRcdGNvbnN0IHBlcmNlbnQgPSBmaXhlZFBlcmNlbnQodmFsdWUsIHRvdGFsU2l6ZSk7XG5cdFx0XHRvdXRwdXQgKz0gYHwgJHtwYXRofSB8ICR7cmVuZGVyQmFyKHBlcmNlbnQsIHZhbHVlKX0gfFxcbmA7XG5cdFx0fVxuXHRcdGlmIChoYXNPdGhlcikge1xuXHRcdFx0Y29uc3Qgb3RoZXJTaXplID0gdG90YWxTaXplIC0gbGFyZ2VOb2Rlc1swXS52YWx1ZTtcblx0XHRcdGNvbnN0IG90aGVyUGVyY2VudCA9IGZpeGVkUGVyY2VudChvdGhlclNpemUsIHRvdGFsU2l6ZSk7XG5cdFx0XHRvdXRwdXQgKz0gYHwgKG90aGVyKSB8ICR7cmVuZGVyQmFyKG90aGVyUGVyY2VudCwgb3RoZXJTaXplKX0gfFxcbmA7XG5cdFx0fVxuXHR9XG5cdG91dHB1dCArPSBcIjwvZGV0YWlscz5cXG5cIjtcblx0cmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gcmVuZGVyQmFyKHBlcmNlbnQ6IG51bWJlciwgYnl0ZXM6IG51bWJlcik6IHN0cmluZyB7XG5cdGNvbnN0IGJhciA9IHByb2dyZXNzKHBlcmNlbnQgLyAxMDApO1xuXHRyZXR1cm4gYFxcJHt7XFxcXGNvbG9ye0dvbGRlbnJvZH17ICR7YmFyfSB9fX1cXCQgJHtwZXJjZW50LnRvRml4ZWQoXG5cdFx0MSxcblx0KX0lLCAke2ZpbGVzaXplKGJ5dGVzKX1gO1xufVxuXG4vLyBCbG9jayBwcm9ncmVzc2lvbiBpcyAxLzggPSAwLjEyNVxuY29uc3QgYmxvY2tzID0gW1wiXCIsIFwiXHUyNThGXCIsIFwiXHUyNThFXCIsIFwiXHUyNThEXCIsIFwiXHUyNThDXCIsIFwiXHUyNThCXCIsIFwiXHUyNThBXCIsIFwiXHUyNTg5XCIsIFwiXHUyNTg4XCJdO1xuY29uc3QgcHJvZ3Jlc3Npb24gPSAxIC8gKGJsb2Nrcy5sZW5ndGggLSAxKTtcbmZ1bmN0aW9uIHByb2dyZXNzKHZhbHVlOiBudW1iZXIsIGxlbmd0aCA9IDI1LCB2bWluID0gMC4wLCB2bWF4ID0gMS4wKSB7XG5cdGNvbnN0IHYgPSB2YWx1ZSAqIGxlbmd0aDtcblx0Y29uc3QgaW50ZWdlclBhcnQgPSBNYXRoLmZsb29yKHYpO1xuXHRjb25zdCBmcmFjdGlvbmFsUGFydCA9IHYgLSBpbnRlZ2VyUGFydDtcblx0Y29uc3QgaSA9IE1hdGgucm91bmQoXG5cdFx0KHByb2dyZXNzaW9uICogTWF0aC5mbG9vcihmcmFjdGlvbmFsUGFydCAvIHByb2dyZXNzaW9uKSkgLyBwcm9ncmVzc2lvbixcblx0KTtcblx0cmV0dXJuIFwiXHUyNTg4XCIucmVwZWF0KGludGVnZXJQYXJ0KSArIGJsb2Nrc1tpXTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyU2l6ZShkOiBDb21wYXJlUmVzdWx0KTogc3RyaW5nIHtcblx0cmV0dXJuIGZpbGVzaXplKGQuYnl0ZXMpO1xufVxuXG5mdW5jdGlvbiByZW5kZXJOb3RlKGQ6IENvbXBhcmVSZXN1bHQsIHJlZFRocmVzaG9sZDogbnVtYmVyKTogc3RyaW5nIHtcblx0aWYgKGQucmVtYXJrID09PSBcImRlbGV0ZWRcIikge1xuXHRcdHJldHVybiBcIlx1RDgzRFx1REREMVx1RkUwRiBEZWxldGVkXCI7XG5cdH1cblx0aWYgKGQucmVtYXJrID09PSBcImFkZGVkXCIpIHtcblx0XHRyZXR1cm4gXCJcdUQ4M0NcdUREOTUgQWRkZWRcIjtcblx0fVxuXHRpZiAoZC5kaWZmKSB7XG5cdFx0Y29uc3QgcGVyY2VudENoYW5nZSA9IChkLmRpZmYgLyBkLmJ5dGVzKSAqIDEwMDtcblx0XHRyZXR1cm4gYCR7cmVuZGVyU3RhdHVzSW5kaWNhdG9yKHBlcmNlbnRDaGFuZ2UsIHJlZFRocmVzaG9sZCl9JHtmaWxlc2l6ZShcblx0XHRcdGQuZGlmZixcblx0XHQpfSAoJHtzaWduKHBlcmNlbnRDaGFuZ2UpfSR7cGVyY2VudENoYW5nZS50b0ZpeGVkKDEpfSUpYDtcblx0fVxuXHRyZXR1cm4gXCJcdTI3MDUgIE5vIGNoYW5nZVwiO1xufVxuXG5mdW5jdGlvbiBzaWduKG51bTogbnVtYmVyKTogc3RyaW5nIHtcblx0cmV0dXJuIG51bSA8IDAgPyBcIlwiIDogXCIrXCI7XG59XG5cbmZ1bmN0aW9uIHJlbmRlclN0YXR1c0luZGljYXRvcihcblx0cGVyY2VudENoYW5nZTogbnVtYmVyLFxuXHRyZWRUaHJlc2hvbGQ6IG51bWJlcixcbik6IHN0cmluZyB7XG5cdGxldCByZXM6IHN0cmluZztcblx0aWYgKHBlcmNlbnRDaGFuZ2UgPiAwICYmIHBlcmNlbnRDaGFuZ2UgPCByZWRUaHJlc2hvbGQpIHtcblx0XHRyZXMgPSBcIlx1MjZBMFx1RkUwRlwiO1xuXHR9IGVsc2UgaWYgKHBlcmNlbnRDaGFuZ2UgPj0gcmVkVGhyZXNob2xkKSB7XG5cdFx0cmVzID0gXCJcdTIwM0NcdUZFMEZcIjtcblx0fSBlbHNlIHtcblx0XHRyZXMgPSBcIlx1MjcwNSBcIjtcblx0fVxuXHRyZXR1cm4gYCR7cmVzfSAke3NpZ24ocGVyY2VudENoYW5nZSl9YDtcbn1cbiIsICJpbXBvcnQgZnMgZnJvbSBcIm5vZGU6ZnNcIjtcblxuaW1wb3J0IHR5cGUgeyBNZXRhZmlsZSB9IGZyb20gXCJlc2J1aWxkXCI7XG5pbXBvcnQgdHlwZSB7IFJlcG9ydCB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmZ1bmN0aW9uIGxvYWRKc29uRmlsZShwYXRoOiBzdHJpbmcpIHtcblx0cmV0dXJuIEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHBhdGgpLnRvU3RyaW5nKFwidXRmLThcIikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZE1ldGFGaWxlKHBhdGg6IHN0cmluZyk6IE1ldGFmaWxlIHtcblx0cmV0dXJuIGxvYWRKc29uRmlsZShwYXRoKSBhcyBNZXRhZmlsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRBbmFseXNpc0pzb24ocGF0aDogc3RyaW5nKTogUmVwb3J0IHtcblx0cmV0dXJuIGxvYWRKc29uRmlsZShwYXRoKSBhcyBSZXBvcnQ7XG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hY3Rpb25zL3Rvb2xraXQvYmxvYi84MWE3M2FiYThiZWRkNTMyZjZlZGRjYzQxZWQzYTBmYWQ4YjFjZmViL3BhY2thZ2VzL2NvcmUvc3JjL2NvcmUudHMjTDEyNlxuZXhwb3J0IGZ1bmN0aW9uIGdldElucHV0KG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG5cdGNvbnN0IHZhbCA9IHByb2Nlc3MuZW52W2BJTlBVVF8ke25hbWUudG9VcHBlckNhc2UoKX1gXSB8fCBcIlwiO1xuXHRyZXR1cm4gdmFsLnRyaW0oKTtcbn1cbiIsICJpbXBvcnQgZnMgZnJvbSBcIm5vZGU6ZnNcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJub2RlOnBhdGhcIjtcbmltcG9ydCBwcm9jZXNzIGZyb20gXCJub2RlOnByb2Nlc3NcIjtcblxuaW1wb3J0IHR5cGUgeyBPcHRpb25zLCBSZXBvcnQgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgbG9hZE1ldGFGaWxlIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlcG9ydChpbnB1dDogT3B0aW9ucyk6IHZvaWQge1xuXHRjb25zdCBhbGxQYWdlU2l6ZXMgPSBnZXRBbGxQYWdlU2l6ZXMoaW5wdXQpO1xuXHRmcy5ta2RpclN5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIGlucHV0LmFuYWx5emVyRGlyZWN0b3J5KSwge1xuXHRcdHJlY3Vyc2l2ZTogdHJ1ZSxcblx0fSk7XG5cdGNvbnN0IHJlc3VsdEpzb25QYXRoID0gcGF0aC5qb2luKFxuXHRcdHByb2Nlc3MuY3dkKCksXG5cdFx0aW5wdXQuYW5hbHl6ZXJEaXJlY3RvcnksXG5cdFx0XCJidW5kbGVfYW5hbHlzaXMuanNvblwiLFxuXHQpO1xuXHRmcy53cml0ZUZpbGVTeW5jKHJlc3VsdEpzb25QYXRoLCBKU09OLnN0cmluZ2lmeShhbGxQYWdlU2l6ZXMsIG51bGwsIDIpKTtcblx0Y29uc29sZS5sb2coYFdyb3RlICR7cmVzdWx0SnNvblBhdGh9YCk7XG59XG5cbmZ1bmN0aW9uIGdldEFsbFBhZ2VTaXplcyhpbnB1dDogT3B0aW9ucyk6IFJlcG9ydCB7XG5cdGNvbnN0IGFjYzogUmVwb3J0ID0ge307XG5cdHJldHVybiBpbnB1dC5tZXRhZmlsZXMucmVkdWNlKChhY2MsIG1ldGFmaWxlKSA9PiB7XG5cdFx0Y29uc3QgbWV0YUZpbGVQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIG1ldGFmaWxlKTtcblx0XHR0cnkge1xuXHRcdFx0ZnMuYWNjZXNzU3luYyhtZXRhRmlsZVBhdGgsIGZzLmNvbnN0YW50cy5SX09LKTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcdGBObyBtZXRhIGZpbGUgZm91bmQgYXQgXCIke21ldGFGaWxlUGF0aH1cIiAtIGEgcGF0aCB0byBtZXRhIGZpbGUgbWF5IGJlIHdyb25nLCBvciBlc2J1aWxkIGlzIG5vdCBleGVjdXRlZC5gLFxuXHRcdFx0KTtcblx0XHRcdHByb2Nlc3MuZXhpdCgxKTtcblx0XHR9XG5cblx0XHRjb25zdCBtZXRhRmlsZUpzb24gPSBsb2FkTWV0YUZpbGUobWV0YUZpbGVQYXRoKTtcblx0XHRPYmplY3QuZW50cmllcyhtZXRhRmlsZUpzb24ub3V0cHV0cykucmVkdWNlKChhY2MsIG91dHB1dCkgPT4ge1xuXHRcdFx0Y29uc3QgW291dGZpbGUsIGJ1aWxkTWV0YV0gPSBvdXRwdXQ7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdCFpbnB1dC5pbmNsdWRlRXh0ZW5zaW9ucy5zb21lKChleHQpID0+XG5cdFx0XHRcdFx0b3V0ZmlsZS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKGV4dCksXG5cdFx0XHRcdClcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm4gYWNjO1xuXHRcdFx0fVxuXHRcdFx0YWNjW2Ake21ldGFmaWxlfSAtPiAke291dGZpbGV9YF0gPSB7XG5cdFx0XHRcdGJ5dGVzOiBidWlsZE1ldGEuYnl0ZXMsXG5cdFx0XHRcdG1ldGFmaWxlLFxuXHRcdFx0XHRvdXRmaWxlLFxuXHRcdFx0fTtcblx0XHRcdHJldHVybiBhY2M7XG5cdFx0fSwgYWNjKTtcblx0XHRyZXR1cm4gYWNjO1xuXHR9LCBhY2MpO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFNBQVMscUJBQXFCOzs7QUNBOUIsT0FBT0EsU0FBUTtBQUNmLE9BQU8sVUFBVTs7O0FDRGpCLE9BQU8sUUFBUTtBQUtmLFNBQVMsYUFBYUMsT0FB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
